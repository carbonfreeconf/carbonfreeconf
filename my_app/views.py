import requests
import json
from django.shortcuts import render, redirect
from bs4 import BeautifulSoup
from . import models
from .forms import UserForm, UserProfileInfoForm, CreateConfForm, PeopleForm, CreateConfLightForm, WebsiteForm, \
    RegisterConfForm, RegisterConfLightForm, EmailPeopleForm, EmailPeopleLightForm, EmailContactLightForm, ProceedingForm, \
    SlidesForm, UpdateUserForm, UpdateUserProfileInfoForm, ConfirmPasswordForm, ExcelPeopleForm, ContactForm, DemoForm, \
    ChatForm, InstForm, QuestionForm, ProgramForm, ArticleUrlForm
from django.contrib.auth import authenticate, login, logout
from django.http import HttpResponseRedirect, HttpResponse
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from .models import HeroPicture, UserProfileInfo, User, Schedule, People, Post, CreateConf, Website, RegisterConf, UserLink, \
    EmailPeople, CreateVisio, Proceeding, Transac, CreateQuestion, UserUpdateQ, UserUpdateL, CreatePoll, ChoicePoll, \
    ProgramDesign, ChatCanal, PosterView, StatsMaster, MinLeftModel

from post.models import Post as blogPost
from qa.models import Question

import urllib.parse
# import post.models.Post as blogPost
#from django.utils.timezone import now

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from . import utils
from . import search
from .search import Search_ela
from bootstrap_datepicker_plus import DateTimePickerInput
import datetime
from datetime import datetime, timedelta, date, time
from django.urls import reverse_lazy
from django.contrib.auth import login
from django.views.generic.list import ListView
from django.utils.safestring import mark_safe
import calendar
from django.shortcuts import get_list_or_404, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from django.core import serializers
import pytz
from easy_timezones.signals import detected_timezone
from django.views import generic
from django.db.models import Q
from django.utils import timezone
from django.utils.timezone import get_current_timezone
from dateutil.tz import tzutc
from django.http import JsonResponse
import random
from django.db.utils import OperationalError
from django.core.mail import send_mail, BadHeaderError, send_mass_mail, EmailMessage
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.contrib import messages
import time
from django.core.serializers.json import DjangoJSONEncoder
from io import BytesIO
from django.template.loader import get_template
from six.moves import urllib
from django.core.exceptions import ValidationError
# from disposable_email_checker.validators import validate_disposable_email
from django.conf import settings
from moviepy.editor import VideoFileClip
from django.contrib.auth import update_session_auth_hash
from django.views.generic.edit import UpdateView
from .decorators import confirm_password
from django.contrib.auth.forms import PasswordChangeForm
from pypandoc.pandoc_download import download_pandoc
import pypandoc
from django.http import FileResponse, Http404
import os
from subprocess import Popen
from djmoney.money import Money
from djmoney.contrib.exchange.backends import FixerBackend, OpenExchangeRatesBackend
from djmoney.contrib.exchange.models import get_rate, convert_money
from django_simple_coupons.validations import validate_coupon
from django_simple_coupons.models import Coupon
from django.views.decorators.clickjacking import xframe_options_sameorigin
import boto3
from django.views.decorators.http import require_GET
from django.utils.text import slugify
from requests import sessions
from pprint import pprint
from rocketchat_API.rocketchat import RocketChat
from conf.tasks import asynchronousuploadvimeo,finishzoomsession, asynchronouscheckstats
from django.forms import formset_factory
import string
import tweepy
import http.client
import secrets
from django.utils.dateparse import parse_datetime
from celery.task.control import revoke
from conf.celery import app
# Create your views here.
from cookie_consent.util import get_cookie_value_from_request
from django.utils.text import Truncator
from django.db.models import Value as V
from django.db.models.functions import Concat
from django.templatetags.static import static

from django.utils.translation import get_language, activate, gettext
from django.views.decorators.clickjacking import xframe_options_exempt

CHANNEL_ID = "q425296"


@require_GET
def robots_txt(request):
    lines = [
        "User-Agent: *",
        "Disallow: /new_suggestion",
        "Disallow: /email",
        "Disallow: /valperson",
        "Disallow: /website",
        "Disallow: /admin",
        "Sitemap: https://www.carbonfreeconf.com/sitemap.xml",
    ]
    return HttpResponse("\n".join(lines), content_type="text/plain")


@login_required
def special(request):
    return HttpResponse("You are logged in !")


@login_required
def user_logout(request, fromm=None, confnum=None,linkcode=None):
    langua = get_language()
    print('languaout',langua)
    logout(request)
    if fromm == 'website':
        return HttpResponseRedirect(reverse('my_app2:website', args=(confnum, 'home')))
    elif fromm == 'fastregistration':
        return HttpResponseRedirect(reverse('my_app2:fastregistration', args=(confnum, 'registration', linkcode)))
    else:
        return HttpResponseRedirect(reverse('my_app2:home'))

#from django.shortcuts import render
#from django.http import HttpResponse

# Create your views here.
import csv

def psg(request,confnum,allint):
# Create the HttpResponse object with the appropriate CSV header.

    if request.method == 'POST':
        conftopass = CreateConf.objects.filter(id=confnum)[0]

        #kikaldroit
        supuser=RegisterConf.objects.filter(conference=conftopass,role=3).values_list('user',flat=True)
        #print('supuser',supuser)

        if request.user.id in supuser or request.user.is_superuser:
            emaillist=[]

            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = 'attachment; filename=CarbonFreeConfParticipants.csv'
            # Create the CSV writer using the HttpResponse as the "file"
            writer = csv.writer(response)

            if allint==1:
                writer.writerow(['First Name', 'Last Name', 'Institute','Job title', 'Email', 'Talk type', 'Status','Session'])

                people=RegisterConf.objects.filter(conference__masterconfpass=conftopass.masterconfpass,conference__acceptconf=True).order_by('user__last_name')
                #print('mez',people)
            else:
                writer.writerow(['First Name', 'Last Name', 'Institute', 'Job title','Email', 'Talk type', 'Status'])

                people = RegisterConf.objects.filter(conference=conftopass).order_by('user__last_name')

            j=0
            if people:
                if j==0:
                    if allint==1:
                        writer.writerow(['List of Registered Participants','','','','','','',''])
                    else:
                        writer.writerow(['List of Registered Participants','','','','','',''])

                for peop in people:
                    emaillist.append(peop.user.email)#context['gender'] = person.get_gender_display()
                    if allint==1:
                        writer.writerow([peop.user.first_name, peop.user.last_name,peop.user.userprofileinfo.institute,peop.user.userprofileinfo.job,peop.user.email,peop.get_type_display(),peop.get_status_display(),peop.conference.title])
                    else:
                        writer.writerow([peop.user.first_name, peop.user.last_name,peop.user.userprofileinfo.institute,peop.user.userprofileinfo.job,peop.user.email,peop.get_type_display(),peop.get_status_display()])
                    j+=1
                        #personlist.append(peop.user.first_name+' '+peop.user.last_name)

            if allint==1:
                peopleinv = People.objects.filter(conference__masterconfpass=conftopass.masterconfpass,conference__acceptconf=True).order_by('lastname')

            else:
                peopleinv = People.objects.filter(conference=conftopass).order_by('lastname')

            if peopleinv:
                i=0
                for peopinv in peopleinv:
                    if not peopinv.email in emaillist:
                        if i==0:
                        #    writer.writerow(['List of Unregistred Participants'])
                            if allint==1:
                                writer.writerow(['List of Unregistred Participants', '', '','', '', '', '', ''])
                            else:
                                writer.writerow(['List of Unregistred Participants', '', '','', '', '', ''])

                        emaillist.append(peopinv.email)
                        if allint==1:
                            writer.writerow([peopinv.firstname, peopinv.lastname,'Not none','Not none',peopinv.email,'Not registered','Waiting',peopinv.conference.title])
                        else:
                            writer.writerow([peopinv.firstname, peopinv.lastname,'Not none','Not none',peopinv.email,'Not registered','Waiting'])

                        i+=1
                        #personlist.append(peopinv.firstname + ' ' + peopinv.lastname)


            #writer.writerow(['Student Name', 'Quiz Subject'])
            #for (name, sub) in zip(NAME, SUBJECT):
            #    writer.writerow([name, sub])

            return response
        else:
            stuff_for_frontend = {}
            #print('rfddsxssds')
            return render(request, 'my_app/psg.html', stuff_for_frontend)
    else:
        stuff_for_frontend = {}
        #print('rfddsxssds')
        return render(request, 'my_app/psg.html', stuff_for_frontend)

def psgall(request):
# Create the HttpResponse object with the appropriate CSV header.

    if 1==1:#request.method == 'POST':
        #conftopass = CreateConf.objects.filter(id=confnum)[0]

        #kikaldroit
        #supuser=RegisterConf.objects.filter(conference=conftopass,role=3).values_list('user',flat=True)
        #print('supuser',supuser)

        if request.user.is_superuser:
            emaillist=[]

            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = 'attachment; filename=CarbonFreeConfParticipants.csv'
            # Create the CSV writer using the HttpResponse as the "file"
            writer = csv.writer(response)


            writer.writerow(['First Name', 'Last Name', 'Institute', 'Job title','Email', 'Institute country'])

            #people = UserProfileInfo.objects.all().order_by('user__last_name')

            conftopass = CreateConf.objects.filter(id=134)[0]

            people2 = RegisterConf.objects.filter(conference__masterconfpass=conftopass.masterconfpass,
                                                 conference__acceptconf=True).order_by('user__last_name')

            people = [people2.filter(user=item['user']).first() for item in
                          people2.values('user').distinct()]
            #peoplesocloc = item_list2

            print('peo',people,conftopass)
            #profile = UserProfileInfo.objects.filter(user=user)[0]

            if people:

                for peop in people:
                    emaillist.append(peop.user.email)#context['gender'] = person.get_gender_display()

                    #writer.writerow([peop.user.first_name, peop.user.last_name,peop.institute,peop.job,peop.user.email,peop.instcountry])
                    writer.writerow([peop.user.first_name, peop.user.last_name,peop.user.userprofileinfo.institute,peop.user.userprofileinfo.job,peop.user.email,peop.user.userprofileinfo.instcountry])

            return response
        else:
            stuff_for_frontend = {}
            #print('rfddsxssds')
            return render(request, 'my_app/psg.html', stuff_for_frontend)
    else:
        stuff_for_frontend = {}
        #print('rfddsxssds')
        return render(request, 'my_app/psg.html', stuff_for_frontend)

def activateacc(request):

    if request.method == 'POST':
        username = request.POST['username']
        #print('username',username)
        if User.objects.filter(username=username).exists():
            #print('rfzd')
            user = User.objects.filter(username=username)[0]
            profile = UserProfileInfo.objects.filter(user=user)[0]

            is_uniquef = False
            #print('rf')
            while not is_uniquef:
                uniquelinkact = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                #print('o', uniquelinkact)
                is_uniquef = not (UserProfileInfo.objects.filter(codeactive=uniquelinkact).exists())
                #print('rtgc')

            profile.codeactive=uniquelinkact
            profile.save()
            urlactive = 'https://www.carbonfreeconf.com/activate-account?u=' + username + '&p=' + uniquelinkact
            #print('urlactive', urlactive)

            subject = "New Activation link for CarbonFreeConf"
            message = "Dear " + \
                      user.first_name + ' ' + user.last_name + ",<br><br>"

            message += "Please click on your new activation link here: " + urlactive + "<br><br>"
            message += "With <strong>CarbonFreeConf</strong>, our aim is to bring together researchers and give them the ability to share their work "
            message += "using <strong>webinars, posters, visio call and chat rooms</strong>. We also give free access to <a href='https://www.carbonfreeconf.com/archive' target='_blank'>previous recorded conferences</a> and <a href='https://www.carbonfreeconf.com/archive-proceedings' target='_blank'>proceedings</a> (if public), "
            message += "which is a gold mine for researchers.<br><br>"
            message += "We are trying to develop <i>all the tools that help strengthening links between all researchers and research fields</i> and "
            message += "we are happy to hear from you if you have <strong>new ideas</strong> that would be worth adding to our platform (if this is the case, just reply to this email).<br><br>"
            message += "If you would like to <strong>organize a carbon free conference yourself</strong> (be it for 10 participants or 5000), it is very easy as all can be set-up and handled on CarbonFreeConf.com in no time!<br><br>"
            message += "We wish you a happy and fruitful time on CarbonFreeConf,<br>"
            message += "The CarbonFreeConf Team<br>"
            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

            emailto = []
            emailto.append(user.email)
            email = EmailMessage(
                subject,
                message,
                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                emailto,  # to
                # getemails,  # bcc
                # reply_to=replylist,
                headers={'Message-From': 'www.carbonfreeconf.com'},
            )
            email.content_subtype = "html"

            email.send(fail_silently=False)
        else:
            #print('rfds')

            return HttpResponseRedirect(reverse('my_app:home'))

    username = request.GET.get('u','')
    password = request.GET.get('p','')

    #print('re',username,password)

    if username and password:
        #print('oki')
        if UserProfileInfo.objects.filter(user__username=username).exists():
            realpass=UserProfileInfo.objects.filter(user__username=username)[0]
            #realpass.active=False

            if realpass.active==False:
                if realpass.codeactive==password:
                    #good to go
                    #print('good to go')
                    realpass.active=True
                    realpass.save()
                    good=1
                else:
                    #print('not right')
                    good=0
            else:
                #print('already active')
                good=2
        else:
            return HttpResponseRedirect(reverse('my_app:home'))

        stuff_for_frontend = {'good': good,'username':username}
        #print('rfd')
        return render(request, 'my_app/activate.html', stuff_for_frontend)
    else:

        return HttpResponseRedirect(reverse('my_app:home'))


class ConfirmPasswordView(UpdateView):
    form_class = ConfirmPasswordForm
    template_name = 'my_app/confirm_password.html'

    def get_object(self):
        return self.request.user

    def get_success_url(self):
        return self.request.get_full_path()


def register(request):
    registered = False
    comingfrom = "nowhere"
    # confnum="0"
    import pycountry
    # country_list = pycountry.countries
    country_list = {country.name for country in pycountry.countries}

    job_list = ('PhD student', 'Postdoc', 'Lecturer', 'Professor', 'Engineer', 'Student', 'Senior scientist', 'Amateur', 'Scholar', 'Journalist')

    if request.method == 'POST':
        comingfrom = request.POST['comingfrom']
        confnum = request.POST.get('confnum')
        linkfrom = request.POST.get('linkfrom','')
        comingfromweb = request.POST.get('comingfromweb')
        linkcode = request.POST.get('linkcode','')
        conftopass = request.POST.get('conftopass')

        # print('co', comingfrom,request.POST.get('realsub'))

        if request.POST.get('realsub'):
            user_form = UserForm(data=request.POST)
            profile_form = UserProfileInfoForm(data=request.POST, data_list=job_list, data_list2 = country_list)

            if user_form.is_valid() and profile_form.is_valid():
                user = user_form.save(commit=False)
                user.set_password(user.password)

                domain = user.email.split("@")[1]
                # print('domain',domain)
                notloading = 0
                try:
                    responseapi = requests.get('https://block-temporary-email.com/check/domain/' + domain, headers={"x-api-key":settings.BLOCK_TEMPORARY_EMAIL})
                    print(responseapi.status_code)
                    if responseapi.status_code == 403:
                        notloading = 1
                except:
                    notloading = 1
                    print('io')

                if notloading==0:
                    if responseapi.status_code == 200:
                        info = json.loads(responseapi.content.decode('utf-8'))
                        # print('info',info, info['temporary'], info['dns'])

                        if (info['temporary'] == False) and (info['dns'] == True):
                            print('reg test good')
                        else:
                            # print('except2')
                            if comingfrom == 'website':
                                return render(request, 'my_app/registration_website.html',
                                              {'user_form': user_form,
                                               'profile_form': profile_form,
                                               'registered': registered,
                                               'comingfrom': comingfrom,
                                               'confnum': confnum,
                                               'comingfromweb': comingfromweb,
                                               'dispemail': True})
                            elif comingfrom == 'fastregistration':
                                return render(request, 'my_app/fast_registration_website.html',
                                              {'user_form': user_form,
                                               'profile_form': profile_form,
                                               'registered': registered,
                                               'comingfrom': comingfrom,
                                               'confnum': confnum,
                                               'linkcode':linkcode,
                                               'comingfromweb': comingfromweb,
                                               'dispemail': True})

                            else:
                                return render(request, 'my_app/registration.html',
                                              {'user_form': user_form,
                                               'profile_form': profile_form,
                                               'registered': registered,
                                               'comingfrom': comingfrom,
                                               'linkfrom': linkfrom,
                                               'dispemail': True})

                    else:
                        # print('except')
                        return render(request, 'my_app/registration.html',
                                      {'user_form': user_form,
                                       'profile_form': profile_form,
                                       'registered': registered,
                                       'comingfrom': comingfrom,
                                       'linkfrom': linkfrom,
                                       'dispemail': True})

                user.save()
                # print('brahsave')
                profile = profile_form.save(commit=False)
                profile.user = user
                profile.active = False
                is_uniquef = False
                #print('rf')
                while not is_uniquef:
                    uniquelinkact = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                    #print('o',uniquelinkact)
                    is_uniquef = not(UserProfileInfo.objects.filter(codeactive=uniquelinkact).exists())
                    #print('rtgc')

                #print('rf2')

                profile.codeactive = uniquelinkact#francine
                #print('rf3')

                if 'profile_pic' in request.FILES:
                    # print('found it')
                    profile.profile_pic = request.FILES['profile_pic']
                profile.save()
                registered = True

                urlactive='https://www.carbonfreeconf.com/activate-account?u='+user.username+'&p='+uniquelinkact
                #print('urlactive',urlactive)

                # register to rocket chat
                with sessions.Session() as session:
                    # log-in as admin
                    # rocket = RocketChat(user_id='ds6wgKPapWQgaBAhd',auth_token='wlRqGekGAtLYNpeFPAG5s74t0k_9qa6_oWUw0ZWua30',server_url='https://chat.carbonfreeconf.com', session=session)
                    try:
                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                            server_url='https://chat.carbonfreeconf.com',
                                            session=session)
                    except:
                        subject = "Nooooooooo Rocket chat what????"
                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                        emailto = []
                        emailto.append("quentin.kral@gmail.com")
                        emailto.append("carbonfreeconf@gmail.com")

                        email = EmailMessage(
                            subject,
                            message,
                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                            emailto,  # to
                            # getemails,  # bcc
                            # reply_to=replylist,
                            headers={'Message-From': 'www.carbonfreeconf.com'},
                        )
                        email.content_subtype = "html"

                        #email.send(fail_silently=False)
                    # pprint(rocket.me().json())

                    # create user
                    # pprint(rocket.users_create(email=request.user.email,name=request.user.first_name+request.user.last_name,password=request.user.password,username=request.user.username).json())
                    content = rocket.users_create(email=user_form.cleaned_data['email'],
                                                  name=user_form.cleaned_data['first_name'] + ' ' +
                                                       user_form.cleaned_data['last_name'],
                                                  password=user_form.cleaned_data['password'],
                                                  username=user_form.cleaned_data['username']).json()
                    pprint(content)

                    # print('prof',profile.profile_pic)
                    if profile.profile_pic:
                        rocket.users_set_avatar(avatar_url=profile.profile_pic.url,
                                                username=user_form.cleaned_data['username']).json()

                    # key = content['user']['_id']
                    # print('key', key)
                    rocket.logout()


                # send an email
                subject = user_form.cleaned_data['username'] + ", you are now a member of the CarbonFreeConf community"
                message = "Welcome to <a href='https://www.carbonfreeconf.com/' target='_blank'>CarbonFreeConf</a> <strong>" + \
                          user_form.cleaned_data['first_name'] + ' ' + user_form.cleaned_data[
                              'last_name'] + "</strong>,<br><br>"
                message += "Whether you are here to <a href='https://www.carbonfreeconf.com/create-conference' target='_blank'>create a conference</a> or <a href='https://www.carbonfreeconf.com/join-conference' target='_blank'>participate in one</a>, we are happy to <strong>have you on board</strong> "
                message += "for developing the first <i>carbon-neutral community</i> of researchers.<br><br>"
                message += "We will ask you to validate your email address within a week to increase security and be sure that you can get your password back if you happen to lose it. To do so, please click on the following link: "+urlactive+"<br><br>"
                message += "With <strong>CarbonFreeConf</strong>, our aim is to bring together researchers and give them the ability to share their work "
                message += "using <strong>webinars, posters, video calls and chat rooms</strong>. We also give free access to <a href='https://www.carbonfreeconf.com/archive' target='_blank'>previous recorded conferences</a> and <a href='https://www.carbonfreeconf.com/archive-proceedings' target='_blank'>proceedings</a> (if public), "
                message += "which is a gold mine for researchers.<br><br>"
                message += "We are trying to develop <i>all the tools that help to strengthen links between all researchers and research fields</i> and "
                message += "we are happy to hear from you if you have <strong>new ideas</strong> that would be worth adding to our platform (if this is the case, just reply to this email).<br><br>"
                message += "If you would like to <strong>organize a carbon-free conference yourself</strong> (be it for 10 participants or 5000), it is very easy as all can be set-up and handled on CarbonFreeConf.com in no time!<br><br>"
                message += "We wish you a happy and fruitful time on CarbonFreeConf,<br>"
                message += "The CarbonFreeConf Team<br>"
                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                emailto = []
                emailto.append(user.email)
                email = EmailMessage(
                    subject,
                    message,
                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                    emailto,  # to
                    # getemails,  # bcc
                    # reply_to=replylist,
                    headers={'Message-From': 'www.carbonfreeconf.com'},
                )
                email.content_subtype = "html"

                email.send(fail_silently=False)
                # send_mail(subject, message, from_email, ['admin@example.com'])
                # print('email sent', email)

                userlog = authenticate(username=user_form.cleaned_data['username'],
                                       password=user_form.cleaned_data['password'])
                # print('userlog',userlog,user.username,user.password)
                if userlog:
                    login(request, userlog)
                if comingfrom == 'createconf':
                    # print('brahuser')
                    return HttpResponseRedirect(reverse('my_app:createconf'))
                elif comingfrom == 'joinconf':
                    #print('yeppio',comingfrom,linkfrom)
                    if linkfrom:
                        return HttpResponseRedirect(reverse('my_app:joinconf') + '/' + linkfrom)
                    else:
                        return HttpResponseRedirect(reverse('my_app:joinconf'))
                elif comingfrom == 'website':
                    # print('brahweb')
                    return HttpResponseRedirect(reverse('my_app:website', args=(confnum, comingfromweb)))
                elif comingfrom == 'fastregistration':
                    # print('brahweb')
                    return HttpResponseRedirect(reverse('my_app:fastregistration', args=(confnum, comingfromweb, linkcode)))
                else:
                    # print('brahwhat')
                    return render(request, 'my_app/registration.html',
                                  {'user_form': user_form,
                                   'profile_form': profile_form,
                                   'registered': registered,
                                   'comingfrom': comingfrom})
            else:
                # print(user_form.errors,profile_form.errors)
                if comingfrom == 'website':
                    # print('brahee')
                    return render(request, 'my_app/registration_website.html',
                                  {'user_form': user_form,
                                   'profile_form': profile_form,
                                   'registered': registered,
                                   'confnum': confnum,
                                   'comingfromweb': comingfromweb,
                                   'comingfrom': comingfrom})
                elif comingfrom == 'fastregistration':
                    return render(request, 'my_app/fast_registration_website.html',
                                  {'user_form': user_form,
                                   'profile_form': profile_form,
                                   'registered': registered,
                                   'confnum': confnum,
                                   'comingfromweb': comingfromweb,
                                   'comingfrom': comingfrom,
                                   'linkcode': linkcode})
                else:
                    return render(request, 'my_app/registration.html',
                                  {'user_form': user_form,
                                   'profile_form': profile_form,
                                   'registered': registered,
                                   'comingfrom': comingfrom,
                                   'linkfrom':linkfrom})
        else:
            user_form = UserForm()
            profile_form = UserProfileInfoForm(data_list=job_list, data_list2 = country_list)
            if comingfrom == 'website':
                # print('brahee')
                return render(request, 'my_app/registration_website.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               'registered': registered,
                               'confnum': confnum,
                               'comingfromweb': comingfromweb,
                               'comingfrom': comingfrom})
            elif comingfrom == 'fastregistration':
                return render(request, 'my_app/fast_registration_website.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               'registered': registered,
                               'confnum': confnum,
                               'comingfromweb': comingfromweb,
                               'comingfrom': comingfrom,
                               'linkcode': linkcode})
            else:
                return render(request, 'my_app/registration.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               'registered': registered,
                               'comingfrom': comingfrom,
                               'linkfrom':linkfrom})
    else:
        # print('brah')
        user_form = UserForm()
        profile_form = UserProfileInfoForm(data_list=job_list, data_list2 = country_list)
        if comingfrom == 'website':
            # print('brahee')
            return render(request, 'my_app/registration_website.html',
                          {'user_form': user_form,
                           'profile_form': profile_form,
                           'registered': registered,
                           'comingfrom': comingfrom})
        elif comingfrom == 'fastregistration':
            return render(request, 'my_app/fast_registration_website.html',
                          {'user_form': user_form,
                           'profile_form': profile_form,
                           'registered': registered,
                           'confnum': confnum,
                           'comingfromweb': comingfromweb,
                           'comingfrom': comingfrom,
                           'linkcode':linkcode})
        else:
            return render(request, 'my_app/registration.html',
                          {'user_form': user_form,
                           'profile_form': profile_form,
                           'registered': registered,
                           'comingfrom': comingfrom,
                           })


def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        remember_me = request.POST.get('remember_me')
        password = request.POST.get('password')
        comingfrom = request.POST.get('comingfrom')
        linkfrom = request.POST.get('linkfrom')
        linkcode = request.POST.get('linkcode','')
        confnum = request.POST.get('confnum')
        comingfromweb = request.POST.get('comingfromweb')

        #from django.utils.translation import activate
        #langua = get_language()
        #print('langua',langua)
        #path = context['request'].path
        #url_parts = resolve( path )
        #print('p',path)
        #print('urlp',url_parts)
        #print('linkcode',linkcode,comingfrom,comingfromweb)

        temp_user = User.objects.filter(username__iexact=username)
        if not temp_user.exists():
            print('not')
            temp_user = User.objects.filter(email__iexact=username)
            #print('chelou')
            if not temp_user.exists():
                print('yu')
                user=None
            else:
                #print('jack')
                user = authenticate(username=temp_user[0].username, password=password)
                print('son',user,temp_user[0].username)
                username=temp_user[0].username
        else:
            print('ok')
            user = authenticate(username=temp_user[0].username, password=password)

        #user = authenticate(username=username, password=password)
        if user:
            #check if active account
            active=UserProfileInfo.objects.filter(user__username__iexact=username).values_list('active',flat=True)[0]
            created=UserProfileInfo.objects.filter(user__username__iexact=username).values_list('created',flat=True)[0]
            #print('crea',created,active)

            time_since_insertion = datetime.now(timezone.utc) - created
            #print('crea2',datetime.now(timezone.utc) - created,datetime.now())

            toolong=0
            if time_since_insertion.days > 6:
                #print("The insertion date is older than 7 days")
                toolong=1

            if active or toolong == 0:
                if user.is_active:
                    login(request, user)
                    if user:
                        login(request, user)
                        if not remember_me:
                            request.session.set_expiry(
                                0)  # <-- Here if the remember me is False, that is why expiry is set to 0 seconds. So it will automatically close the session after the browser is closed.

                        # else browser session will be as long as the session  cookie time "SESSION_COOKIE_AGE"
                        if comingfrom == 'createconf':
                            return HttpResponseRedirect(reverse('my_app2:createconf'))
                        elif comingfrom == 'joinconf':
                            print('ll',linkfrom)
                            if linkfrom:
                                return HttpResponseRedirect(reverse('my_app2:joinconf')+linkfrom)
                            else:
                                return HttpResponseRedirect(reverse('my_app2:joinconf'))
                        elif comingfrom == 'myprofile':
                            return HttpResponseRedirect(reverse('my_app2:profile'))
                        elif comingfrom == 'myarchive':
                            return HttpResponseRedirect(reverse('my_app2:myarchive'))
                        elif comingfrom == 'archive':
                            return HttpResponseRedirect(reverse('my_app2:archive'))
                        elif comingfrom == 'archiveproc':
                            return HttpResponseRedirect(reverse('my_app2:archiveproc'))
                        elif comingfrom == 'website':
                            return HttpResponseRedirect(reverse('my_app2:website', args=(confnum, comingfromweb)))
                        elif comingfrom == 'fastregistration':
                            return HttpResponseRedirect(reverse('my_app2:fastregistration', args=(confnum, comingfromweb,linkcode)))
                        elif comingfrom == 'participations':
                            return HttpResponseRedirect(reverse('my_app2:participations'))
                        elif comingfrom == 'proceedings':
                            return HttpResponseRedirect(reverse('my_app2:proceedings'))
                        else:
                            #from django.utils import translation

                            #translation.deactivate()#(langua)
                            #translation.activate(langua)

                            #print('rev',reverse('my_app2:proceedings'))
                            #from django.urls import translate_url
                            #print('tr',translate_url('fr', 'en'))
                            #langua = get_language()
                            #print('langua',langua)
                            return HttpResponseRedirect(reverse('my_app2:home'))
                else:
                    return HttpResponse("Your account was inactive.")
            else:
                stuff_for_frontend = {'good': 3, 'username': username}
                #print('rfddsxs')
                return render(request, 'my_app/activate.html', stuff_for_frontend)
        else:
            print("Someone tried to login and failed.")
            # print("They used username: {} and password: {}".format(username,password))
            # return HttpResponse("Invalid login details given")
            if comingfrom == 'website':
                # return render(request, 'my_app/website.html' confnum 'signin', {'failed':True})
                messages.success(request, "Wrong login details given")
                return HttpResponseRedirect(reverse('my_app2:website', args=(confnum, "signin")))
            elif comingfrom == 'fastregistration':
                messages.success(request, "Wrong login details given")
                return HttpResponseRedirect(reverse('my_app2:fastregistration', args=(confnum, "signin",linkcode)))
            else:
                if comingfrom == 'joinconf':
                    print('lll',linkfrom)
                    if linkfrom:
                        print('aqa')
                        return HttpResponseRedirect(reverse('my_app2:joinconf')+linkfrom+'?q=wrong')
                    else:
                        return HttpResponseRedirect(reverse('my_app2:joinconf')+'?q=wrong')
                else:
                    return render(request, 'my_app/login.html', {'failed': True})


    else:
        return render(request, 'my_app/login.html', {})


@confirm_password
def home(request):
    sd = {
        "@context": "https://schema.org/",
        "@type": "Organization",
        "url": "https://www.carbonfreeconf.com/",
        "name": "CarbonFreeConf",
        "contactPoint": {
            "@type": "ContactPoint",
            "email": "support@carbonfreeconf.com",
            "url": "https://www.carbonfreeconf.com/contactform",
            "contactType": "Customer service"
        }
    }

    if request.is_ajax():
        # do something
        request_data = request.POST
        return HttpResponse("OK")

    #print('que')
    #web = Website.objects.filter(color_men='#22')#'#888888')
    #print('web',web)
    #for w in web:
    #    print('w',w)
    #    w.color_menu='#888888'
    #    w.save()

    #allusers = UserProfileInfo.objects.filter(codeactive='')
    #for u in allusers:
    #    u.active=True
    #    u.save()

    #cc = get_cookie_value_from_request(request, "requiredcookies")
    #if cc:
    #    print('got it')
    #else:
    #    print('nope')
    #f = slugify(str('%s' % ('trµi')))
    #print('slug',f)
    queryset = Post.objects.filter(status=1).order_by('-created_on')[0:3]
    queryset2 = CreateConf.objects.filter(Q(start_date__gte=date.today()) | Q(start_date=None)).order_by('-start_date')[
                0:3]
    # visioqueryurl = CreateVisio.objects.exclude(mp4_url=None).order_by('-date')
    visioqueryurl = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
        conference__whorecording="Everyone", testroom=False).order_by('-date')
    # visioqueryurl2 = CreateVisio.objects.exclude(vimeo_url='').filter(conference__whorecording="Everyone",testroom=False).order_by('-date')

    #testurl=urllib.request.urlopen("https://block-temporary-email.com/check/domain/").getcode()
    #print('testurl',testurl)

    #vire rectitles
    #cv=CreateVisio.objects.filter(idconf=91703396109)[0]
    #cv.rectitles=''
    #cv.save()

    #print('staticroot', settings.STATIC_ROOT)
    #print('staticurl', settings.STATIC_URL)
    #print('staticdir', settings.STATICFILES_DIRS)
    #print('staticsto', settings.STATICFILES_STORAGE)

    #try:
    #    responseapi = requests.get('https://block-temporary-email.com/check/domain/' + 'gmail.com')
    #    print('res',responseapi)
    #except:
    #    print('error')

    # video = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
    #   conference__whorecording="Everyone", testroom=False)

    # visioquerytit = CreateVisio.objects.exclude(mp4_url=None).order_by('-date').values_list('conference__title', flat=True)[0]
    # visioquerysubject = CreateVisio.objects.exclude(mp4_url=None).values_list('conference__subject', flat=True).order_by('-date')[0]

    visioqueryurlunique = visioqueryurl  # [visioqueryurl.filter(conference=item['conference']).first() for item in
    # visioqueryurl.values('conference').distinct()]

    #print('lick',slugify(str('Astrophysiciens et journalistes : l’union fait la force')))
    #print('lick2',slugify(str('Quel futur pour le patrimoine astronomique français ?')))
    #print('lick3',slugify(str("L'observatoire dans son environnement social")))

    #print('vvv', visioqueryurl)
    # print('vvv2',visioqueryurl2)

    #get all conf and create progdesign
    #allc = ProgramDesign.objects.exclude(opacity__isnull=True)
    #for a in allc:
    #    a.opacity=10
    #    a.save()

    #deactivate questions and polls for SF2A
    #allc=CreateConf.objects.filter(masterconfpass=35500015)
    #print('allc',allc)
    #for a in allc:
    #    a.activateqandp = False
    #    a.save()

    #allc=CreateConf.objects.exclude(title__isnull=True)
    #for a in allc:
    #    p, created = ProgramDesign.objects.get_or_create(
    #        conference=a,
    #        defaults={'timestart':'0','timefinish':'24','mineventheight':'100'},
    #    )
    #timestart = ProgramDesign.objects.filter(conference=objects).values_list('timestart', flat=True)[0]
    #timefinish = ProgramDesign.objects.filter(conference=objects).values_list('timefinish', flat=True)[0]
    #mineventheight = ProgramDesign.objects.filter(conference=objects).values_list('mineventheight', flat=True)[0]

    #activate everybody
    #allp=UserProfileInfo.objects.all()
    #for p in allp:
        #print('p',p.user.first_name)
    #    p.active=True
    #    p.save()

    #allc=CreateConf.objects.exclude(title__isnull=True)
    #for a in allc:
    #    print('title',a.title)
    #    print('priv',a.priv)
    #    is_uniqueeee = False
    #    while not is_uniqueeee:
    #        uniquelinkee = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
            #print('uniquelinkee',uniquelinkee)
    #        is_uniqueeee = not (CreateConf.objects.filter(fastpass=uniquelinkee).exists())
            #print('is_uniqueeee',is_uniqueeee)
    #    a.fastpass = uniquelinkee
    #    a.save()

    #get all registerconf with att only and no title
    #alltalks=RegisterConf.objects.filter(title='',type=5)
    #for all in alltalks:
    #    all.title='Attendance only'
    #    all.save()

    # get all registerconf posters
    #allposterswithvid=RegisterConf.objects.filter(mp4_url__isnull=False,type=4)
    #for all in allposterswithvid:
    #    print('title poster with video,user,conf',all.title,all.user.username,all.conference.title)
    #    all.save()

    print('qu',len(visioqueryurlunique))
    if len(visioqueryurlunique) > 5:
        print('>5')
        visioqueryurlunique = visioqueryurlunique[0:4]
        print('visiounique',visioqueryurlunique)
        #vidlength = vidlength[0:4]
        # visioquerytit=visioquerytit[0:4]
    # visioquerysubject=visioquerysubject[0:4]

    vidlength = []
    urlvim = []
    tit = []
    subj = []
    #print('vv', visioqueryurlunique)
    for visio in visioqueryurlunique:
        print('visio', visio.id)
        #if visio.mp4_url:
            #taskid2 = visio.mp4_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
            #arr = taskid2.split(',')

        if visio.vimeo_url:
            taskid3 = visio.vimeo_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
            arr2 = taskid3.split(',')

        # from pymediainfo import MediaInfo

        # milou
        maxarr=len(arr2)
        if len(arr2)>5:
            maxarr=5

        for ij in range(maxarr):
            # clip = VideoFileClip(arr[ij]+"?access_token="+utils.generateToken())

            # info = ffmpeg.probe(arr[ij]+"?access_token="+utils.generateToken())

            # print(f"duration={info['format']['duration']}")
            # clip = MediaInfo.parse(arr[ij] + "?access_token=" + utils.generateToken())
            # duration in milliseconds
            # duration_in_s = clip.tracks[0].duration*1000.

            # print(clip.duration)
            # vidlength.append(random.randint(0,int(clip.duration)))
            vidlength.append(random.randint(0, 180))
            #print('aar2', arr2, arr)
            redvimurl = arr2[ij].split('/')[2]
            #print('redvimhome', redvimurl)
            mp4_url = "https://vimeo.com/" + redvimurl
            vim_play_url = "https://player.vimeo.com/video/" + redvimurl
            urlvim.append(vim_play_url)
            tit.append(visio.conference.title)
            subj.append(visio.conference.subject)
            #print('tit', tit, subj)
        # print('lengthvideo',visio.mp4_url)

    # mp4_url = models.CharField(max_length=400,null=True,blank=True)
    ##print('url',visioqueryurl)

    currentconf = CreateConf.objects.filter(Q(start_date__lte=date.today()) & Q(end_date__gte=date.today()),
                                            status__gt=0).order_by('-start_date')

    #print('currentconf', currentconf, date.today())


    latest = blogPost.objects.order_by('-timestamp')[0:3]

    clu = utils.conf_list_user(request)
    #pl = utils.post_list(request)
    #cl = utils.conf_list(request)

    if not request.user.is_authenticated:

        stuff_for_frontend = {'url': visioqueryurlunique,
                              'vidlength': vidlength,
                              'urlvim': urlvim,
                              'sd': sd,
                              'conf_list_user': clu,
                              #'conf_list': cl,
                              #'post_list': pl,
                              'latest': latest,
                              'currentconf': currentconf,
                              'tit': tit,
                              'subj': subj
                              # 'urlsub': visioquerysubject
                              }
        #   'post_list': queryset,
        #  'conf_list': queryset2
        # }
        return render(request, 'base.html', stuff_for_frontend)
    else:
        # listconf = utils.listconffunc()
        # if listconf is not None:
        #    err=0
        #    listconf_id=list(listconf[0].values())[0]  # list(info['conferences'][0].values())[1]
        #    listconf_titles=list(listconf[0].values())[1]  # list(info['conferences'][0].values())[1]

        # else:
        #    err=1

        # https://chat.carbonfreeconf.com/home?resumeToken=Io2diAyWnsJYfHiX4rZaLMhNCvbBep6dGZ7eGnSq9FA
        #current = CreateConf.objects.filter(id=21)[0]

        #print('currentconf[0]',current,request.user)
        #res = utils.chatrock(current, request.user, 1)
        #print('res', res)

        stuff_for_frontend = {
            # 'err': err,
            # 'listconf_id': listconf_id,
            # 'listconf_titles': listconf_titles,  # list(info['conferences'][0].values())[1]
            'url': visioqueryurlunique,
            'vidlength': vidlength,
            'urlvim': urlvim,
            'sd': sd,
            'latest': latest,
            'conf_list_user': clu,
            #'conf_list': cl,
            #'post_list': pl,
            'currentconf': currentconf,
            'tit': tit,
            'subj': subj
            # 'resumetoken':restoken
            # 'urltit': visioquerytit,
            # 'urlsub': visioquerysubject
            # 'post_list': queryset,
            # 'conf_list': queryset2
        }

        return render(request, 'base.html', stuff_for_frontend)

        # return render(request,'my_app/listconf.html',stuff_for_frontend)


def schedule(request):
    api_url_base = 'http://127.0.0.1:8000/apischedule?conference=6'
    headers = {'Content-Type': 'application/json'}
    # print('herea',api_url_base)
    api_url = api_url_base  # +api_url_short
    response = requests.get(api_url, headers=headers)
    print('okiii')
    # print(response.status_code)
    # print('Response content is', response.headers.get('Content-Type'))

    if 'json' in response.headers.get('Content-Type'):
        info = response.json()
    else:
        # print('Response content is not in JSON format.',response.headers.get('Content-Type'))
        info = 'spam'
    # #print(response.content)
    info = response.json()
    # info = json.loads(response.decode("utf-8"))
    # print('iii',info)
    if info is not None:
        for item in info['data']:
            confname = item['conference']
            # print('cn',confname)

        stuff_for_frontend = {
            'file': confname  # list(createconfinfo.values())[1],
        }
    else:
        # print('[!] Request Failed')
        stuff_for_frontend = {
            'file': 'Failed',  # list(info.values())[1]'',
        }

    return render(request, 'my_app/schedule.html', stuff_for_frontend)


@csrf_exempt
def apischedule(request, confnum=None, session=None):
    if request.method == 'POST':
        # print('POST detected')
        body_unicode = request.body.decode('utf-8')
        # print(body_unicode)
        body = json.loads(body_unicode)
        data = body['data']
        action = body['action']
        # print(data['text'])
        # print('rock',data['type'])
        # print('sid',body['id'])
        conftopass = CreateConf.objects.filter(id=confnum)[0]
        # print('conn',confnum)
        #print('c',conftopass)
        # scheduleid = request.GET.get('sid', '')
        if data:
            # print('t',request.session.get('django_timezone', ''))
            tzloc = request.session['django_timezone']  # request.session.get('django_timezone', '')
            #print('tzloc',tzloc)
            # if not tzloc:
            #   tzloc=get_current_timezone()
            ##print('tzloc2',tzloc)
            local = pytz.timezone(tzloc)  # pytz.timezone("America/Los_Angeles")
            # print('local', local, data['start_date'], datetime.strptime(data['start_date'], "%Y-%m-%d %H:%M"))
            naive_start = datetime.strptime(data['start_date'],
                                            "%Y-%m-%d %H:%M")  # datetime.strptime("2001-2-3 10:11:12", "%Y-%m-%d %H:%M:%S")
            naive_end = datetime.strptime(data['end_date'],
                                          "%Y-%m-%d %H:%M")  # datetime.strptime("2001-2-3 10:11:12", "%Y-%m-%d %H:%M:%S")
            local_start = local.localize(naive_start)  # , is_dst=None)
            # shift = my_date - my_date.astimezone(local).replace(tzinfo=None)

            local_end = local.localize(naive_end)  # , is_dst=None)
            utc_start = local_start.astimezone(pytz.utc)
            utc_end = local_end.astimezone(pytz.utc)
            # print(naive_start, local_start, utc_start)

        if data and action == "updated":
            print('ref',data['important'])
            imptest = int(data['important']) == 1

            if int(body['id']) > 100000000000000:
                # print('bitt')
                obj, created = Schedule.objects.update_or_create(
                    id=body['id'],
                    defaults={'start_date': local_start, 'end_date': local_end, 'text': data['text'],
                              'speaker': data['speaker'], 'important': data['important'], 'type': data['type'], 'notpart': data['notpart'],
                              'abstract': data['abstract'], 'conference': conftopass, 'user': request.user}
                    # 'start_date': '','end_date': '',
                )
            else:
                # print('bit',body['id'])
                if Schedule.objects.filter(conference=conftopass,rand=data['rand']).values_list('id', flat=True):
                    idnew = Schedule.objects.filter(conference=conftopass,
                                                    rand=data['rand']).values_list('id', flat=True)[0]
                    # print('hhhh000',idnew)

                else:
                    print('devrait jamais venir la')
                    idnew = Schedule.objects.filter(conference=conftopass, text=data['text'], speaker=data['speaker'],
                                                    rand=data['rand']).values_list('id', flat=True)[0]
                    # print('hhhh',idnew)

                obj, created = Schedule.objects.update_or_create(
                    id=idnew,  # body['id'],
                    defaults={'start_date': local_start, 'end_date': local_end, 'text': data['text'],
                              'speaker': data['speaker'], 'rand': data['rand'], 'important': data['important'], 'notpart': data['notpart'],
                              'type': data['type'], 'abstract': data['abstract']}  # 'start_date': '','end_date': '',
                )
        if data and action == "inserted":
            idnew = 0
            if Schedule.objects.order_by('-id').values_list('id', flat=True):
                idnew = Schedule.objects.order_by('-id').values_list('id', flat=True)[0]
            idnew = idnew + 1
            # print('idtalk',request.GET.get('idtalk', ''))
            if idnew - 1 != body['id']:  # request.GET.get('idtalk', '')!=idnew-1:
                # print('idnew',idnew,body['id'])
                body['id'] = idnew
                imptest = int(data['important']) == 1
                # print('imptest',imptest)
                obj, created = Schedule.objects.update_or_create(
                    id=idnew,
                    defaults={'start_date': local_start, 'end_date': local_end, 'text': data['text'],
                              'speaker': data['speaker'], 'rand': data['rand'], 'important': data['important'],
                              'type': data['type'], 'abstract': data['abstract'], 'user': request.user, 'notpart': data['notpart'],
                              'conference': conftopass}  # 'start_date': '','end_date': '',
                )
                # return HttpResponseRedirect('%s?idtalk=%s' % (reverse('my_app:createconf'), idnew))

            # return HttpResponseRedirect(reverse('my_app:createconf'))

        if data and action == "deleted":
            if Schedule.objects.filter(conference=conftopass,rand=data['rand']).values_list('id', flat=True):
                idnew = Schedule.objects.filter(conference=conftopass,
                                                rand=data['rand']).values_list('id', flat=True)[0]#start_date=local_start, end_date=local_end,
                # print('hhhh020', idnew)

            else:
                print('devrait pas venir la...')
                idnew = Schedule.objects.filter(conference=conftopass, text=data['text'], speaker=data['speaker'],
                                                rand=data['rand']).values_list('id', flat=True)[0]
                # print('hh2hh', idnew)

            obj, created = Schedule.objects.filter(id=idnew).delete()

        # person just refers to the existing one
    ##print('ici2', request.GET.get('conference', ''))
    ##print('viens44',request.headers)

    ##print('viens',request.body)
    ##print('viens42',request.form.items())
    ##print('v',request["QUERY_STRING"])

    #print("seuioo", session)
    if session:

        ses = session.split(",")
        #print('ses', ses)
        conftopass = CreateConf.objects.filter(id__in=ses).values_list('id', flat=True)
    else:
        conftopass = CreateConf.objects.filter(id=confnum).values_list('id', flat=True)

    #print('iuio',request.session['django_timezone'])
    # confname=request.GET.get('conference', '')
    # conftopass = CreateConf.objects.filter(id=confnum).values_list('id', flat=True)
    # print('cc',confname,conftopass)
    ##print('confname',confname,CreateConf.objects.filter(user=request.user).order_by('id').values_list('id', flat=True))
    # ids=CreateConf.objects.filter(user=request.user).values_list('id', flat=True)
    objects = Schedule.objects.filter(conference__in=conftopass)
    # print('ya2',objects)
    # print('ya3', objects.values('id', 'start_date'))
    datatosendtoget = objects.values('id', 'start_date', 'end_date', 'text', 'speaker', 'rand', 'important', 'type',
                                     'abstract', 'conference', 'user','notpart')
    # print('viens2',datatosendtoget)

    local = pytz.timezone(request.session.get('django_timezone', 'UTC'))  # pytz.timezone("America/Los_Angeles")
    ##print('local', local, data['start_date'], datetime.strptime(data['start_date'], "%Y-%m-%d %H:%M"))

    # naive_start = datetime.strptime(data['start_date'],
    # "%Y-%m-%d %H:%M")  # datetime.strptime("2001-2-3 10:11:12", "%Y-%m-%d %H:%M:%S")
    # naive_end = datetime.strptime(data['end_date'],
    # "%Y-%m-%d %H:%M")  # datetime.strptime("2001-2-3 10:11:12", "%Y-%m-%d %H:%M:%S")
    # local_start = local.localize(naive_start, is_dst=None)
    # local_end = local.localize(naive_end, is_dst=None)
    # utc_start = local_start.astimezone(pytz.utc)
    # utc_end = local_end.astimezone(pytz.utc)
    ##print(naive_start, local_start, utc_start)

    # fmt = '%Y-%m-%d %H:%M'
    # utc = utctime.replace(tzinfo=pytz.UTC)
    # localtz = utc.astimezone(timezone.get_current_timezone())
    # localformatted=localtz.strftime(fmt)
    # print('loc',local)
    # berlin = pytz.timezone('Europe/Berlin')
    # local_dt = item.created_at.astimezone(berlin)
    y = []
    for r in objects:
        # print('r',r.start_date)
        r.start_date = r.start_date.astimezone(local).replace(tzinfo=None)
        # r.start_date = datetime.strptime(r.start_date, "%Y-%m-%d %H:%M")
        # print('r2',r.start_date)
        r.end_date = r.end_date.astimezone(local).replace(tzinfo=None)
        #print('r',r,r.important,int(r.important == True),str(int(r.important == True)))
        y.append({'id': r.id, 'start_date': r.start_date, 'end_date': r.end_date, 'text': r.text, 'speaker': r.speaker,
                  'rand': r.rand, 'important': str(int(r.important == True)), 'type': r.type, 'abstract': r.abstract,
                  'conference': r.conference.id, 'user': r.user.id, 'notpart': str(int(r.notpart == True))})
        # print('y',y)

    ##print('viens3',objects.values('id', 'start_date', 'end_date', 'text', 'speaker', 'important', 'type', 'abstract', 'conference', 'user'))

    # convert important to 0 or 1
    # return(JsonResponse({'data': list(datatosendtoget)}))
    return (JsonResponse({'data': y}))

    # return render(request,'my_app/schedule.html',stuff_for_frontend)

def apivideo(request):

    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        status = request.POST.get('status')
        lang = request.POST.get('lang')


        if status == '0':
            import html

            archiveurl = request.POST.get('archiveurl')
            redvimurl2 = request.POST.get('redvimurl2')
            sessiontit = request.POST.get('sessiontit')
            start = request.POST.get('start')
            end = request.POST.get('end')
            titles = request.POST.get('titles')

            conftopassmast = CreateConf.objects.filter(id=confnum).values_list('masterconf', flat=True)[0]
            print('conftopassmast',conftopassmast)
            mast=0
            if conftopassmast:
                mast=1

            print('archiveurl',archiveurl)
            print('redvimurl2,sessiontit,start,end,titles',redvimurl2,sessiontit,start,end,titles)
            print('status', status)

            newurlarchive=[]
            newredvim2=[]
            newstart=[]
            newend=[]
            newsessiontit=[]
            newtitles=[]
            if archiveurl:
                archiveurl=archiveurl.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                redvimurl2=redvimurl2.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                start=start.replace('[','').replace(']','').replace("'",'').replace(', tzinfo=&lt;UTC&gt;','')
                end=end.replace('[','').replace(']','').replace("'",'').replace(', tzinfo=&lt;UTC&gt;','')
                if sessiontit:
                    sessiontit=sessiontit.replace('[','').replace(']','')
                if titles:
                    titles=titles.replace('[','').replace(']','')

                strings=archiveurl.split(",")
                strings2=redvimurl2.split(",")
                strings3=start.split(", d")
                strings4=end.split(", d")
                if sessiontit:
                    strings5=sessiontit.split(", ")
                if titles:
                    strings6=titles.split(", ")
                #test='datetime(2021, 2, 1, 15, 3, 23)'
                #print('t',eval(test))
                tzloc = request.session['django_timezone']
                local = pytz.timezone(tzloc)
                import locale
                #print('locale',lang)
                #getstartdate = getstartdate.astimezone(local)
                print('locale.LC_ALL',locale.LC_ALL)
                if lang =='fr':
                    print('FR')
                    locale.setlocale(locale.LC_ALL, "fr_FR.UTF-8")
                print('strings',strings)
                for x in range(0, len(strings)):
                    print('x',x)
                    newurlarchive.append(strings[x])
                    newredvim2.append(strings2[x])
                    print('newurlarchive',newurlarchive)

                    if x>0:
                        #print("strings3[x].replace('atetime.','')",strings4[x].replace('atetime.',''))
                        newstart.append(eval(strings3[x].replace('atetime.','')).astimezone(local).strftime("%c"))
                        newend.append(eval(strings4[x].replace('atetime.','')).astimezone(local).strftime("%c"))#.strftime("%Y-%m-%d %H:%M")
                    else:
                        #print("strings3[x].replace('datetime.','')",strings4[x].replace('datetime.',''))
                        newstart.append(eval(strings3[x].replace('datetime.','')).astimezone(local).strftime("%c"))
                        newend.append(eval(strings4[x].replace('datetime.','')).astimezone(local).strftime("%c"))

                    if sessiontit:
                        newsessiontit.append(html.unescape(strings5[x]))
                    if titles:
                        newtitles.append(html.unescape(strings6[x]))

                    print('newtitles',newurlarchive)#%a, %A, %b, %B, %c, %p

                #print('newredvim2',newredvim2)
                #print('newstart',newstart)
                print('newsessiontit',newsessiontit)
                print('newtitles',newtitles)

            response_data = {}

            response_data['confnum'] = confnum
            response_data['mast'] = mast

            #response_data['startd'] = str(startd)
            response_data['result'] = 0
            response_data['archiveurl']=newurlarchive
            response_data['redvimurl2']=newredvim2
            response_data['start']=newstart
            response_data['end']=newend
            response_data['sessiontit']=newsessiontit
            response_data['titles']=newtitles
            #print('last',json.dumps([{'start':'2021-07-30 10:00:00','content':'ok'}]))
            #response_data['timelineinput']="{start:'2021-07-30 10:00:00',content:'ok'}"#json.dumps({'vis.Dataset': y})}
            #response_data['timelineinput']=json.dumps(list(y))#json.dumps({'vis.Dataset': y})}

            #titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
            #response_data['already'] = 0
            #if titlealready:
            #    response_data['already'] = 1

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )
        else:
            return HttpResponseRedirect(reverse('my_app:home'))

    return HttpResponseRedirect(reverse('my_app:home'))
    
def apivideoarchive(request):

    if request.method == 'POST':

        #confnum = request.POST.get('confnum')
        status = request.POST.get('status')
        lang = request.POST.get('lang')
        action = request.POST.get('num')
        firste = request.POST.get('firste')
        qval = request.POST.get('qval')

        add=2
        firsttime=6
        #print('qval',qval)
        #print('firste',firste)

        if status == '0':
            import html

            archiveurl = request.POST.get('archiveurl')
            redvimurl2 = request.POST.get('redvimurl2')
            #sessiontit = request.POST.get('sessiontit')
            start = request.POST.get('start')
            end = request.POST.get('end')
            titles = request.POST.get('titles')
            idconf = request.POST.get('idconf')
            nbviews = request.POST.get('nbviews')

            #conftopassmast = CreateConf.objects.filter(id=confnum).values_list('masterconf', flat=True)[0]
            #print('conftopassmast',conftopassmast)
            #mast=0
            #if conftopassmast:
            #    mast=1

            #print('archiveurl',archiveurl)
            #print('redvimurl2,start,end,titles',redvimurl2,start,end,titles)
            #print('status', status)
            #print('idconf', idconf)

            newurlarchive=[]
            newredvim2=[]
            newstart=[]
            newend=[]
            newidconf=[]
            newtitleconf=[]
            newnbviews=[]
            newsubconf=[]
            newurlthumbnail=[]
            newurlthumbnailplay=[]
            #newsessiontit=[]
            newtitles=[]
            if archiveurl:
                archiveurl=archiveurl.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                redvimurl2=redvimurl2.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                idconf=idconf.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                nbviews=nbviews.replace("&#x27;","'").replace('"','').replace('[','').replace(']','').replace("'",'').replace(' ','')
                start=start.replace('[','').replace(']','').replace("'",'').replace(', tzinfo=&lt;UTC&gt;','')
                end=end.replace('[','').replace(']','').replace("'",'').replace(', tzinfo=&lt;UTC&gt;','')
                #if sessiontit:
                #    sessiontit=sessiontit.replace('[','').replace(']','')
                if titles:
                    titles=titles.replace('[','').replace(']','')

                strings=archiveurl.split(",")
                strings2=redvimurl2.split(",")
                strings3=start.split(", d")
                strings4=end.split(", d")
                #if sessiontit:
                #    strings5=sessiontit.split(", ")
                if titles:
                    strings6=titles.split(", ")
                
                strings7=idconf.split(",")
                strings8=nbviews.split(",")

                #print('idconf',strings7)
                #test='datetime(2021, 2, 1, 15, 3, 23)'
                #print('t',eval(test))
                tzloc = request.session['django_timezone']
                local = pytz.timezone(tzloc)
                import locale
                #print('locale',lang)
                #getstartdate = getstartdate.astimezone(local)
                #print('locale.LC_ALL',locale.LC_ALL)
                if lang =='fr':
                    print('FR')
                    locale.setlocale(locale.LC_ALL, "fr_FR.UTF-8")
                #print('action',action,len(strings))
                
                if int(firste)<2:
                    if int(action)<=len(strings):
                        if int(firste)==1:
                            maxactionnew=firsttime
                            actionstart=0
                        else:
                            maxactionnew=int(action)+add#+firsttime
                            actionstart=int(action)-1#+firsttime
                        if maxactionnew>len(strings):
                            print('ici')
                            maxactionnew=len(strings)

                        actionnew=maxactionnew+1

                        #print('actionnew,actionstart,maxactionnew',int(action),actionstart,maxactionnew)
                        finished=0
                        #print('icik',actionstart, maxactionnew)
                        for x in range(actionstart, maxactionnew):
                            #print('x',x)
                            newurlarchive.append(strings[x])
                            newredvim2.append(strings2[x])
                            newidconf.append(strings7[x])
                            newnbviews.append(strings8[x])

                            #print("https://vimeo.com/api/oembed.json?url=https://vimeo.com/"+strings2[x])
                            with urllib.request.urlopen("https://vimeo.com/api/oembed.json?url=https://vimeo.com/"+strings2[x]) as url:
                                data = json.loads(url.read().decode())
                                #print(data['thumbnail_url'])
                                newurlthumbnail.append(data['thumbnail_url'])
                                newurlthumbnailplay.append(data['thumbnail_url_with_play_button'])
        

                            conftopasstit = CreateConf.objects.filter(id=strings7[x]).values_list('title', flat=True)[0]
                            conftopasssub = CreateConf.objects.filter(id=strings7[x]).values_list('subject', flat=True)[0]
                            newtitleconf.append(conftopasstit)
                            newsubconf.append(conftopasssub)

                            #print('newurlarchive',newurlarchive)

                            if x>0:
                                #print("strings3[x].replace('atetime.','')",strings4[x].replace('atetime.',''))
                                newstart.append(eval(strings3[x].replace('atetime.','')).astimezone(local).strftime("%c"))
                                newend.append(eval(strings4[x].replace('atetime.','')).astimezone(local).strftime("%c"))#.strftime("%Y-%m-%d %H:%M")
                            else:
                                #print("strings3[x].replace('datetime.','')",strings4[x].replace('datetime.',''))
                                newstart.append(eval(strings3[x].replace('datetime.','')).astimezone(local).strftime("%c"))
                                newend.append(eval(strings4[x].replace('datetime.','')).astimezone(local).strftime("%c"))

                            #if sessiontit:
                            #    newsessiontit.append(html.unescape(strings5[x]))
                            if titles:
                                newtitles.append(html.unescape(strings6[x]).lstrip('\"').rstrip('\"').lstrip("\'").rstrip("\'"))

                            #print('newtitles',newurlarchive)#%a, %A, %b, %B, %c, %p

                        #print('newredvim2',newredvim2)
                        #print('newstart',newstart)
                        #print('newsessiontit',newsessiontit)
                        #print('newidconf',newidconf)
                    else:
                        finished=1
                        actionnew=0
                        print('nopeee')
                else:
                    print('sorting')
                    finished=1
                    #print('icik',actionstart, maxactionnew)
                    for x in range(0, len(strings)):
                        #print('x22',x)
                        actionnew="1"
                        if strings6[x] != None and qval.lower() in strings6[x].lower():
                            newtitles.append(html.unescape(strings6[x]).lstrip('\"').rstrip('\"').lstrip("\'").rstrip("\'"))

                            newurlarchive.append(strings[x])
                            newredvim2.append(strings2[x])
                            newidconf.append(strings7[x])
                            newnbviews.append(strings8[x])

                            #print("https://vimeo.com/api/oembed.json?url=https://vimeo.com/"+strings2[x])
                            with urllib.request.urlopen("https://vimeo.com/api/oembed.json?url=https://vimeo.com/"+strings2[x]) as url:
                                data = json.loads(url.read().decode())
                                #print(data['thumbnail_url'])
                                newurlthumbnail.append(data['thumbnail_url'])
                                newurlthumbnailplay.append(data['thumbnail_url_with_play_button'])
    

                            conftopasstit = CreateConf.objects.filter(id=strings7[x]).values_list('title', flat=True)[0]
                            conftopasssub = CreateConf.objects.filter(id=strings7[x]).values_list('subject', flat=True)[0]
                            newtitleconf.append(conftopasstit)
                            newsubconf.append(conftopasssub)

                            print('newurlarchive',newurlarchive)

                            if x>0:
                                #print("strings3[x].replace('atetime.','')",strings4[x].replace('atetime.',''))
                                newstart.append(eval(strings3[x].replace('atetime.','')).astimezone(local).strftime("%c"))
                                newend.append(eval(strings4[x].replace('atetime.','')).astimezone(local).strftime("%c"))#.strftime("%Y-%m-%d %H:%M")
                            else:
                                #print("strings3[x].replace('datetime.','')",strings4[x].replace('datetime.',''))
                                newstart.append(eval(strings3[x].replace('datetime.','')).astimezone(local).strftime("%c"))
                                newend.append(eval(strings4[x].replace('datetime.','')).astimezone(local).strftime("%c"))

                       

            response_data = {}

            #response_data['confnum'] = confnum
            #response_data['mast'] = mast

            #response_data['startd'] = str(startd)
            response_data['result'] = 0
            response_data['finished'] = finished
            response_data['action'] = str(actionnew)
            response_data['archiveurl']=newurlarchive
            response_data['redvimurl2']=newredvim2
            response_data['start']=newstart
            response_data['end']=newend
            #response_data['sessiontit']=newsessiontit
            response_data['conftit']=newtitleconf
            response_data['confsub']=newsubconf
            response_data['titles']=newtitles
            response_data['thumbnail']=newurlthumbnail
            response_data['thumbnailplay']=newurlthumbnailplay
            response_data['nbview']=newnbviews
            response_data['firste']=firste

            #print('last',json.dumps([{'start':'2021-07-30 10:00:00','content':'ok'}]))
            #response_data['timelineinput']="{start:'2021-07-30 10:00:00',content:'ok'}"#json.dumps({'vis.Dataset': y})}
            #response_data['timelineinput']=json.dumps(list(y))#json.dumps({'vis.Dataset': y})}

            #titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
            #response_data['already'] = 0
            #if titlealready:
            #    response_data['already'] = 1

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )
        else:
            return HttpResponseRedirect(reverse('my_app:home'))

    return HttpResponseRedirect(reverse('my_app:home'))

def apitimeline(request):

    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        #print('title', title)
        conftopass = CreateConf.objects.filter(id=confnum)[0]

        if conftopass.masterconf:

            conftopasslen = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).count()
            conftopasses = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass)

            #print('len',conftopasslen,conftopasses)

        if conftopass.masterconf:
            objects = Schedule.objects.filter(Q(conference__masterconfpass=conftopass.masterconfpass) | Q(conference=conftopass)).order_by('start_date')
        else:
            objects = Schedule.objects.filter(conference=conftopass).order_by('start_date')

        local = pytz.timezone(request.session.get('django_timezone', 'UTC'))  # pytz.timezone("America/Los_Angeles")
        y = []
        #i=0
        if conftopass.masterconf:
            colors = []
            idcol= []
            for i in range(conftopasslen):
                colors.append('#%06X' % random.randint(0, 0xFFFFFF))
                idcol.append(conftopasses[i].id)
            #print('colors',colors,idcol)

            #print(idcol.index(127))

        startd=0
        ii=0
        for r in objects:

            # print('r',r.start_date)
            r.start_date = r.start_date.astimezone(local).replace(tzinfo=None)
            # r.start_date = datetime.strptime(r.start_date, "%Y-%m-%d %H:%M")
            # print('r2',r.start_date)
            r.end_date = r.end_date.astimezone(local).replace(tzinfo=None)

            if ii==0:
                startd=r.start_date

            ii+=1
            #urlim = static('img/avatar-1.jpg')
            #j=0
            #if i>3:
            #    j=1
            #content = '<div>'+r.text+'</div><img src="'+urlim+'" width="30px"><div><small>'+r.speaker+'</small></div>'
            # print('r',r,r.important,int(r.important == True),str(int(r.important == True)))
            #y.append({'start': str(r.start_date), 'end': str(r.end_date), 'content': content})
            if conftopass.masterconf:
                if r.conference.daughterconfstarwars == False:
                    sesname='S'+str(r.conference.masterconfdaughterposition)
                else:
                    sesname=r.conference.masterconfdaughtername

                content = '<div>' + r.text + '</div><div><small>' + r.speaker + ' (' + str(r.start_date) +')</small></div><div><small>' + sesname + '</small></div>'
                y.append({'start': str(r.start_date), 'content': content, 'title':r.abstract,'group':str(r.conference.id),'style':'border-color:'+colors[idcol.index(r.conference.id)]+';'})
            else:
                content = '<div>' + r.text + '</div><div><small>' + r.speaker + ' (' + str(r.start_date) +')</small></div>'
                y.append({'start': str(r.start_date), 'content': content, 'title':r.abstract,'group':str(r.conference.id)})

            # {start: new Date(2010,7,23,22.5,0,0), content: '<div>Conversation</div><img src="{% static 'img/avatar-1.jpg' %}" width="30px"><div><small>Quentin Kral</small></div>'},

        #print('y', y)
        #print('dump',json.dumps({'vis.Dataset': y}))
        #print('dump2',json.dumps(list(y)))
        ##print('viens3',objects.values('id', 'start_date', 'end_date', 'text', 'speaker', 'important', 'type', 'abstract', 'conference', 'user'))

        # convert important to 0 or 1
        # return(JsonResponse({'data': list(datatosendtoget)}))
        #return (JsonResponse({'vis.DataSet': y}))

        response_data = {}

        response_data['confnum'] = confnum
        response_data['startd'] = str(startd)

        #print('last',json.dumps([{'start':'2021-07-30 10:00:00','content':'ok'}]))
        #response_data['timelineinput']="{start:'2021-07-30 10:00:00',content:'ok'}"#json.dumps({'vis.Dataset': y})}
        response_data['timelineinput']=json.dumps(list(y))#json.dumps({'vis.Dataset': y})}

        #titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
        #response_data['already'] = 0
        #if titlealready:
        #    response_data['already'] = 1

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:home'))

def apinetwork(request):

    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        #print('title', title)
        conftopass = CreateConf.objects.filter(id=confnum)[0]

        if conftopass.masterconf:# or conftopass.daughterconf:

            conftopasses = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).order_by('-masterconf')
            mastconf=CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,masterconf=True)[0]
        else:
            conftopasses = CreateConf.objects.filter(id=confnum)

            #print('len',conftopasslen,conftopasses)

        #if conftopass.masterconf:
        #    objects = Schedule.objects.filter(Q(conference__masterconfpass=conftopass.masterconfpass) | Q(conference=conftopass))
        #else:
        #    objects = Schedule.objects.filter(conference=conftopass)

        local = pytz.timezone(request.session.get('django_timezone', 'UTC'))  # pytz.timezone("America/Los_Angeles")
        y = []
        edge =[]
        #i=0
        #if conftopass.masterconf:
        #    colors = []
        #    idcol= []
        #    for i in range(conftopasslen):
        #        colors.append('#%06X' % random.randint(0, 0xFFFFFF))
        #        idcol.append(conftopasses[i].id)
            #print('colors',colors,idcol)

            #print(idcol.index(127))

        i=0
        print('co',conftopasses)
        for r in conftopasses:

            # print('r',r.start_date)
            #r.start_date = r.start_date.astimezone(local).replace(tzinfo=None)
            # r.start_date = datetime.strptime(r.start_date, "%Y-%m-%d %H:%M")
            # print('r2',r.start_date)
            #r.end_date = r.end_date.astimezone(local).replace(tzinfo=None)
            #urlim = static('img/avatar-1.jpg')
            urlim=''
            if r.room_logo:
                urlim=r.room_logo.url
            #j=0
            #if i>3:
            #    j=1
            #content = '<div>'+r.text+'</div><img src="'+urlim+'" width="30px"><div><small>'+r.speaker+'</small></div>'
            # print('r',r,r.important,int(r.important == True),str(int(r.important == True)))
            #y.append({'start': str(r.start_date), 'end': str(r.end_date), 'content': content})
            if conftopass.masterconf or conftopass.daughterconf:
                if r.daughterconfstarwars == False:
                    sesname='S'+str(r.masterconfdaughterposition)
                else:
                    sesname=r.masterconfdaughtername

                #content = '<div>' + r.text + '</div><div><small>' + r.speaker + '</small></div><div><small>' + sesname + '</small></div>'

                #print('self',request.get_full_path())
                if urlim:
                    y.append({'id': str(i), 'shape': "image", 'image':urlim,'label':'<b>'+r.title+'</b>'+' ('+sesname+')','url':'/join-conference/'+str(r.id),'url2': '/website/' + str(r.id) + '/home','title':'Click once to Join the conference now or double click to see the associated website \n\n Abstract:'+r.abstract,'font':{'multi':'html','color':"#000000"}})
                else:
                    y.append({'id': str(i), 'shape': "ellipse",'label':' <b>'+r.title+'</b>'+' ('+sesname+') ','url':'/join-conference/'+str(r.id),'url2': '/website/' + str(r.id) + '/home','title':'Click once to Join the conference now or double click to see the associated website \n\n Abstract:'+r.abstract,'font':{'multi':'html'}})


                if r.coffeebreak:

                    y.append(
                        {'id': str(i)+'c', 'shape': "box", 'label': '<b>' + 'Coffee break room' + '</b>' + ' (' + sesname + ')',
                         'url': '/join-conference/' + str(r.id)+'?cb=1',
                         'title': 'Join coffee break room now', 'font': {'multi': 'html'},'color': {'background': '#A5270C'}})
                    edge.append({'from': str(i), 'to': str(i)+'c','color':'#A5270C'})

                if r.poster and not conftopass.masterconf:
                    posters=RegisterConf.objects.filter(conference=r,status=1,type=4)
                    if posters:
                        #from sorl.thumbnail import get_thumbnail

                        y.append(
                            {'id': str(i) + 'p', 'shape': "box", 'label': '<b>' + 'Posters' + '</b>',
                             'url': '/website/' + str(r.id) + '/posters',
                             'title': "Check out the poster's page", 'font': {'multi': 'html'},
                             'color': {'background': '#A527FF'}})
                        #edge.append({'from': str(i), 'to': str(i) + 'p','length':500})
                        edge.append({'from': str(i), 'to': str(i) + 'p','color':'#A527FF'})

                        j=0
                        for p in posters:
                            print('uirt',p)
                            if p.slides:# too long to load in 30s the thumbnails should presave them...
                                #ima = get_thumbnail(p.slides, '10x10', crop='center', quality=19)

                                #y.append(
                                #    {'id': str(i)+'-'+str(j), 'shape': "image", 'image': ima.url, 'label': '<b>' + 'Poster by ' + p.user.first_name +' '+ p.user.last_name + '</b>\n\n Title: '+p.title,
                                #     'url': '/website/' + str(r.id)+'/posters#PosterID'+str(p.id),#http://127.0.0.1:8000/website/136/posters#PosterID371
                                #     'title': "Check out "+p.user.first_name +' '+ p.user.last_name+"'s poster",
                                #     'font': {'multi': 'html','color':"#000000"},'size':100,'color': {'border': "#A527FF"}})
                                y.append(
                                    {'id': str(i) + '-' + str(j), 'shape': "box",
                                     'label': '<b>' + 'Poster by ' + p.user.first_name + ' ' + p.user.last_name + '</b>\n\n Title: ' + p.title,
                                     'url': '/website/' + str(r.id) + '/posters#PosterID' + str(p.id),
                                     'title': "Check out " + p.user.first_name + ' ' + p.user.last_name + "'s poster",
                                     'font': {'multi': 'html'},
                                     'color': {'background': '#A527FF'}})
                            else:
                                y.append(
                                    {'id': str(i)+'-'+str(j), 'shape': "box", 'label': '<b>' + 'Poster in progress by ' + p.user.first_name +' '+ p.user.last_name + '</b>\n\n Title: '+p.title,
                                     'title': p.user.first_name +' '+ p.user.last_name+" is still working on their poster", 'font': {'multi': 'html'},
                                     'color': {'background': '#A527FF'}})

                            edge.append({'from': str(i)+'p', 'to': str(i)+'-'+str(j),'color':'#A527FF'})
                            j+=1

                if not r.masterconf and not conftopass.daughterconf:
                    edge.append({'from': str(i), 'to': 0,'value':10})#,'label': "Access website",'font':{'align':'middle'},'font':'12px'})

            else:
                #content = '<div>' + r.text + '</div><div><small>' + r.speaker + '</small></div>'
                #y.append({'id': str(i), 'shape': "image", 'image':urlim,'label':'<b>'+r.title+'</b>','url':'/join-conference/'+str(r.id),'title':'Join conference now \n\n Abstract:'+r.abstract,'font':{'multi':'html'}})

                if urlim:
                    y.append({'id': str(i), 'shape': "image", 'image':urlim,'label':'<b>'+r.title+'</b>','url':'/join-conference/'+str(r.id),'url2': '/website/' + str(r.id) + '/home','title':'Click once to Join the conference now or double click to see the associated website \n\n Abstract:'+r.abstract,'font':{'multi':'html','color':"#000000"}})
                else:
                    y.append({'id': str(i), 'shape': "ellipse",'label':' <b>'+r.title+'</b> ','url':'/join-conference/'+str(r.id),'url2': '/website/' + str(r.id) + '/home','title':'Click once to Join the conference now or double click to see the associated website \n\n Abstract:'+r.abstract,'font':{'multi':'html'}})


                if r.coffeebreak:

                    y.append(
                        {'id': str(i)+'c', 'shape': "box", 'label': '<b>' + 'Coffee break room' + '</b>',
                         'url': '/join-conference/' + str(r.id)+'?cb=1',
                         'title': 'Join coffee break room now', 'font': {'multi': 'html'},'color': {'background': '#A5270C'}})
                    edge.append({'from': str(i), 'to': str(i)+'c','color':'#A5270C'})

                if r.poster:
                    posters=RegisterConf.objects.filter(conference=r,status=1,type=4)
                    if posters:
                        #from sorl.thumbnail import get_thumbnail

                        y.append(
                            {'id': str(i) + 'p', 'shape': "box", 'label': '<b>' + 'Posters' + '</b>',
                             'url': '/website/' + str(r.id) + '/posters',
                             'title': "Check out the poster's page", 'font': {'multi': 'html'},
                             'color': {'background': '#A527FF'}})
                        #edge.append({'from': str(i), 'to': str(i) + 'p','length':500})
                        edge.append({'from': str(i), 'to': str(i) + 'p','color':'#A527FF'})

                        j=0
                        for p in posters:
                            print('ui',p)
                            if p.slides:
                                #ima = get_thumbnail(p.slides, '151x151', crop='center', quality=99)

                                #y.append(
                                #    {'id': str(i)+'-'+str(j), 'shape': "image", 'image': ima.url, 'label': '<b>' + 'Poster by ' + p.user.first_name +' '+ p.user.last_name + '</b>\n\n Title: '+p.title,
                                #     'url': '/website/' + str(r.id)+'/posters#PosterID'+str(p.id),#http://127.0.0.1:8000/website/136/posters#PosterID371
                                #     'title': "Check out "+p.user.first_name +' '+ p.user.last_name+"'s poster",
                                #     'font': {'multi': 'html','color':"#000000"},'size':100,'color': {'border': "#A527FF"}})
                                y.append(
                                    {'id': str(i) + '-' + str(j), 'shape': "box",
                                     'label': '<b>' + 'Poster by ' + p.user.first_name + ' ' + p.user.last_name + '</b>\n\n Title: ' + p.title,
                                     'url': '/website/' + str(r.id) + '/posters#PosterID' + str(p.id),
                                     'title': "Check out "+p.user.first_name +' '+ p.user.last_name+"'s poster",
                                     'font': {'multi': 'html'},
                                     'color': {'background': '#A527FF'}})
                            else:
                                y.append(
                                    {'id': str(i)+'-'+str(j), 'shape': "box", 'label': '<b>' + 'Poster in progress by ' + p.user.first_name +' '+ p.user.last_name + '</b>\n\n Title: '+p.title,
                                     'title': p.user.first_name +' '+ p.user.last_name+" is still working on their poster", 'font': {'multi': 'html'},
                                     'color': {'background': '#A527FF'}})

                            edge.append({'from': str(i)+'p', 'to': str(i)+'-'+str(j),'color':'#A527FF'})
                            j+=1

            i+=1
            # {start: new Date(2010,7,23,22.5,0,0), content: '<div>Conversation</div><img src="{% static 'img/avatar-1.jpg' %}" width="30px"><div><small>Quentin Kral</small></div>'},

        #print('y', y)
        #print('dump',json.dumps({'vis.Dataset': y}))
        #print('dump2',json.dumps(list(y)))
        ##print('viens3',objects.values('id', 'start_date', 'end_date', 'text', 'speaker', 'important', 'type', 'abstract', 'conference', 'user'))

        # convert important to 0 or 1
        # return(JsonResponse({'data': list(datatosendtoget)}))
        #return (JsonResponse({'vis.DataSet': y}))

        response_data = {}

        response_data['confnum'] = confnum

        #print('last',json.dumps([{'start':'2021-07-30 10:00:00','content':'ok'}]))
        #response_data['timelineinput']="{start:'2021-07-30 10:00:00',content:'ok'}"#json.dumps({'vis.Dataset': y})}
        response_data['networkinput']=json.dumps(list(y))#json.dumps({'vis.Dataset': y})}
        response_data['networkedge']=json.dumps(list(edge))#json.dumps({'vis.Dataset': y})}

        #titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
        #response_data['already'] = 0
        #if titlealready:
        #    response_data['already'] = 1

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:home'))

def stats(request,confnum):
    if CreateConf.objects.filter(id=confnum).exists():
        conftopass=CreateConf.objects.filter(id=confnum)[0]
        stuff_for_frontend={'conftopass':conftopass}

        if conftopass.poster:
            bestposters=RegisterConf.objects.filter(type=4,conference=conftopass,status=1)
            oldvote=0
            oldview=0
            newpos=''
            newview=''
            newposview=0
            bestvo=0
            for b in bestposters:
                #view=PosterView.objects.filter(poster=b).values_list('number',flat=True)[0]
                view = PosterView.objects.filter(poster=b).count()

                if view>oldview:
                    oldview=view
                    newview=b
                    bestvo=b.votes.count()
                    print('bestview',bestvo,b.title,oldview)
                vote=b.votes.count()
                if vote>oldvote:
                    oldvote=vote
                    newpos=b
                    newposview=view

            stuff_for_frontend.update({
                'bestposter': newpos,
                'votes':oldvote,
                'view':newposview,
                'bestviewpos':newview,
                'bestview':oldview,
                'bestvotes': bestvo,
            })

        print('confnum',confnum)

        start_date = conftopass.start_date

        timeover = False
        if start_date < date.today():
            timeover = True

        usersacc = RegisterConf.objects.filter(Q(conference=conftopass, role=3) | Q(conference=conftopass, socloc=2))
        #print('usersacc', usersacc, request.user.id)
        access = 0

        for us in usersacc:
            #print('us', us.user.id, request.user.id)
            if us.user.id == request.user.id:
                access = 1

        if access == 1 or request.user.is_superuser:
            print('you have access2')

            #Number of participants
            peopleall = RegisterConf.objects.filter(conference=conftopass, status=1)
            # Query against the full list to return a list of objects
            item_list = [peopleall.filter(user=item['user']).values_list('user',flat=True).first() for item in
                         peopleall.values('user').distinct()]
            #print('il',item_list)
            nbparts = len(item_list)

            peopleallevensubm = RegisterConf.objects.filter(conference=conftopass)
            # Query against the full list to return a list of objects
            item_listevensubm = [peopleallevensubm.filter(user=item['user']).values_list('user',flat=True).first() for item in
                         peopleallevensubm.values('user').distinct()]
            nbpartsevensubm = len(item_listevensubm)
            #number of talks
            #TYPE = (
            #(6, "Talk"),
            #(1, "Invited Talk"),
            #(2, "Discussion"),
            #(3, "Review"),
            #(4, "Poster"),
            #(5, "Attendance only"),

            talks = RegisterConf.objects.filter(conference=conftopass, status=1, type__in=[1,2,3,6])
            usert=[]
            for t in talks:
                usert.append(t.user)

            nbtalks = talks.count()

            #number of CO2 offset
            prepeuro1, offseteuro1 = utils.price(conftopass.id)
            CO2=offseteuro1#in kg (because 1 euro equals 1kg

            #Number of recorded videos: (if rec)
            visio = CreateVisio.objects.filter(conference=conftopass, testroom=False)
            # getnumberofdays = abs(end - start).days + 1
            countv=0
            nbhourzoom=0.
            countvview=0.
            countvduration=0.

            if visio.exists():
                headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                           'content-type': 'application/json'}


                conn = http.client.HTTPSConnection("api.zoom.us")

            nbpart=0
            nbparttot=0
            for iu in visio:
                #total number hours of zoom
                #print('iu',iu.duration,iu.duration/60.)
                if iu.duration != 1:
                    nbhourzoom+=iu.duration/60.
                if iu.idconf:
                    # number of people on zoom  https: // marketplace.zoom.us / docs / api - reference / zoom - api / reports / reportmeetingparticipants < / li >

                    # import http.client


                    # conn.request("GET", "/v2/users?page_size=300&status=active", headers=headers)

                    pagesize=300
                    conn.request("GET", "/v2/report/meetings/" + str(iu.idconf) + "/participants?page_size="+str(pagesize),headers=headers)

                    res = conn.getresponse()
                    data = res.read()
                    #print('decode', data.decode("utf-8"))
                    print('status',res.status)

                    if res.status==200:
                        nbpages = json.loads(data)['page_count']
                        nbparttot = json.loads(data)['total_records']
                        #print('decode', data.decode("utf-8"), nbpersons, nbpages)

                        participantnames=[]
                        #nloop = min(pagesize, nbpersons)

                        for page in range(nbpages):
                            #print('p', page)
                            nextpagetoken = json.loads(data)['next_page_token']
                            #print('next', nextpagetoken)

                            nloop=len(json.loads(data)['participants'])
                            for nb in range(nloop):
                                participantnames.append(json.loads(data)['participants'][nb]['name'])
                                #print('name',json.loads(data)['participants'][nb]['name'])


                            conn.request("GET", "/v2/report/meetings/" + str(iu.idconf) + "/participants?page_size="+str(pagesize)+"&next_page_token="+nextpagetoken,headers=headers)
                            res = conn.getresponse()
                            data = res.read()

                        #get number of unique participants names
                        if participantnames:
                            myset = set(participantnames)
                            #print(myset,len(myset))
                            nbpart=len(myset)

                if iu.vimeo_url:
                    #print('iu',iu.vimeo_url,len(iu.vimeo_url))#should count number of '
                    #print('gh',iu.vimeo_url.count("'"))#ca marche
                    countv+=int(iu.vimeo_url.count("'")/2.)
                    countvview+=1
                    taskid3 = iu.vimeo_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
                    arr2 = taskid3.split(',')
                    #print('arr2',arr2)

                    import vimeo

                    client = vimeo.VimeoClient(
                        token='ad1e934c05fe16362aebbeac14a3bee6',
                        key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                        secret=settings.SECRETVIMEO
                    )

                    #response = client.get('/me')  # ,params={"fields": "uri"})
                    # print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                    # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                    #stats.plays=how many time viewed
                    #duration=how long

                    for i in range(len(arr2)):
                        redvimurl = arr2[i].split('/')[2]

                        response = client.get('/videos/' + redvimurl, params={"fields": "uri,status,duration,stats"})
                        # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                        if response.status_code == 200:

                            #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                            # print('ffnkjv', response.json()['status'])

                            #videostatus = response.json()['status']
                            videodur = response.json()['duration']#in seconds
                            videonbvie = response.json()['stats']
                            videonbview=videonbvie['plays']
                            
                            #print('oooo',videonbvie,videonbview)
                            countvview+=videonbview
                            countvduration+=videodur/60./60.#in hour

                        #print('vidstat',videostatus)
                        #print('viddur',videodur)
                        #print('vidnbview',videonbview)
            countvview=int(countvview)
            countvduration=round(countvduration,2)
            nbhourzoom=round(nbhourzoom,1)
            #Number of hours videos watched

            #number of chat rooms
            posters = RegisterConf.objects.filter(conference=conftopass, status=1, type=4)

            with sessions.Session() as session2:
                # log-in

                try:
                    rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                        server_url='https://chat.carbonfreeconf.com', session=session2)
                except:
                    # time.sleep(20)
                    # rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                    # server_url='https://chat.carbonfreeconf.com', session=session2)
                    subject = "Nooooooooo Rocket chat what????"
                    message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                    # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                    emailto = []
                    emailto.append("quentin.kral@gmail.com")
                    emailto.append("carbonfreeconf@gmail.com")

                    email = EmailMessage(
                        subject,
                        message,
                        'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                        emailto,  # to
                        # getemails,  # bcc
                        # reply_to=replylist,
                        headers={'Message-From': 'www.carbonfreeconf.com'},
                    )
                    email.content_subtype = "html"

                    #email.send(fail_silently=False)

                nbroom=0
                nbmes=0
                
                if conftopass.title_extra:
                    slugtitleconf = slugify(str('%s' % (conftopass.title+' '+conftopass.title_extra)))
                    slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title+' '+conftopass.title_extra)))
                    slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title+' '+conftopass.title_extra)))
                else:
                    slugtitleconf = slugify(str('%s' % (conftopass.title)))
                    slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title)))
                    slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title)))

                # create room for organizers
                contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                # print('c', contentroom)

                if contentroom['success'] == True:
                    nbroom+=1
                    keyroom = contentroom['group']['_id']
                    #print('keyroom',keyroom)
                    channelmess = rocket.groups_history(room_id=keyroom).json()
                    #channelmess = rocket.channels_history(room_name=slugtitleconf).json()
                    nbmes+=len(channelmess['messages'])
                    #print('channelmess',len(channelmess['messages']))

                contentroomo = rocket.groups_info(room_name=slugtitleconforg).json()
                # print('c', contentroom)
                if contentroomo['success'] == True:
                    nbroom += 1
                    keyroomo = contentroomo['group']['_id']
                    #print('keyroomo', keyroomo)
                    channelmesso = rocket.groups_history(room_id=keyroomo).json()
                    #print('channelmesso', channelmesso)
                    nbmes += len(channelmesso['messages'])
                    #print('channelmesso', len(channelmesso['messages']))

                contentroomc = rocket.groups_info(room_name=slugtitleconfcafe).json()
                # print('c', contentroom)
                if contentroomc['success'] == True:
                    nbroom += 1
                    keyroomc = contentroomc['group']['_id']
                    #print('keyroomc', keyroomc)
                    channelmessc = rocket.groups_history(room_id=keyroomc).json()
                    #print('channelmessc', channelmessc)
                    nbmes += len(channelmessc['messages'])
                    #print('channelmessc', len(channelmessc['messages']))
                # print('slug', slugtitleconf)
                #list = rocket.groups_list_all().json()
                #print('l', list)
                # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                #contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                # print('c', contentroom)
                #if contentroom['success'] == True:
                #    keyroom = contentroom['group']['_id']

                #    contentuser = rocket.users_info(username=user.username).json()
                #    key = contentuser['user']['_id']
                    # print('keyo',key,keyroom)

                canalconf=ChatCanal.objects.filter(conference=conftopass)
                if canalconf:
                    nbextracanal=canalconf.count()
                    nbroom+=nbextracanal
                    for c in canalconf:
                        if conftopass.title_extra:
                            slugtitleconfextra = slugify(str('%s' % (conftopass.title+ '-' + c.titleg+' '+conftopass.title_extra)))
                        else:
                            slugtitleconfextra = slugify(str('%s' % (conftopass.title + '-' + c.titleg)))
                        contentroome = rocket.groups_info(room_name=slugtitleconfextra).json()
                        # print('c', contentroom)

                        if contentroome['success'] == True:
                            keyroome = contentroome['group']['_id']
                            #print('keyroome', keyroome)
                            channelmesse = rocket.groups_history(room_id=keyroome).json()
                            # channelmess = rocket.channels_history(room_name=slugtitleconf).json()
                            #print('channelmesse', channelmesse['messages'])
                            nbmes += len(channelmesse['messages'])
                            #print('channelmesse', len(channelmesse['messages']))
                #number discussion on chat about posters
                nbmespo=0
                for po in posters:

                    slugtitleconfposter = slugify(str('%s' % (
                        'poster_' + po.user.first_name + ' ' + po.user.last_name + '_' + po.title)))
                    contentroompo = rocket.groups_info(room_name=slugtitleconfposter).json()
                    # print('c', contentroom)

                    if contentroompo['success'] == True:
                        keyroompo = contentroompo['group']['_id']
                        # print('keyroom',keyroom)
                        channelmesspo = rocket.groups_history(room_id=keyroompo).json()
                        # channelmess = rocket.channels_history(room_name=slugtitleconf).json()
                        nbmespo += len(channelmesspo['messages'])
            #number of posters

            userp = []
            nbviewp=0
            for p in posters:
                userp.append(p.user)
                nbviewp+=PosterView.objects.filter(poster=p).count()

            nbposters = posters.count()



            #number of attendance only (no poster, no talk)
            attonly = RegisterConf.objects.filter(conference=conftopass, status=1, type=5)
            natt = 0
            for att in attonly:
                if att.user not in usert and att.user not in userp:
                    natt += 1



            #Number of posts, engagements and impressions on twitter tagging# ...
            api = utils.startapi()

            #removehashtag = conftopass.twitterhashtag.split('#')
            #tweet_user = []
            #tweet_screenuser = []
            #tweet_text = []
            #tweet_image = []
            #tweet_id = []
            #tweet_date = []
            #tweet_retweet = []
            #tweet_retweetcount = []
            #tweet_count = 0

            query = conftopass.twitterhashtag  # '#science'
            nbposts='0'
            apirateexc = False
            if query != '#':
                max_tweets = 100  # 1000
                try:
                    searched_tweets = [status for status in tweepy.Cursor(api.search, q=query, include_entities=True,
                                                                      tweet_mode="extended").items(max_tweets)]
                except:
                    apirateexc=True
                    #print('except')
                #searched_tweets2 = [status for status in tweepy.Cursor(api.search, q=query, include_entities=False).items(max_tweets)]

                if apirateexc==False:
                    # for tweet in api.search(q="carbon-neutral",rpp=25):#conftopass[0].twitterhashtag):
                    #print('searched tweets',len(searched_tweets))
                    nbposts=str(len(searched_tweets))
                    if len(searched_tweets)==max_tweets:
                        nbposts = '> '+str(len(searched_tweets))
                else:
                    nbposts="We couldn't get the value, try again later"
                    #nb engagements or impressions can only be gotten with paying api

                    #for tweet in searched_tweets:
                    #    status = api.get_status(tweet.id, tweet_mode="extended")
                    #    try:
                            # print('t',status.retweeted_status.full_text)
                    #        tweet_text.append(status.retweeted_status.full_text)
                    #        print('text',status.retweeted_status.full_text)

                    #    except AttributeError:  # Not a Retweet
                            # print('r',status.full_text)
                    #        tweet_text.append(status.full_text)
                    #        print('text2',status.full_text)

                    #    tweet_user.append(tweet.user.name)
                    #    tweet_screenuser.append(tweet.user.screen_name)
                    #    tweet_date.append(tweet.created_at.strftime("%b. %d, %Y, %-I:%M %p"))
                    #    print('date',tweet.created_at.strftime("%b. %d, %Y, %-I:%M %p"))
                    #    tweet_retweet.append(tweet.retweeted)
                    #    tweet_retweetcount.append(tweet.retweet_count)
                    #    tweet_id.append(tweet.id)

                        # tweet_text.append(tweet.full_text)
                    #    tweet_count = tweet_count + 1

            stuff_for_frontend.update({
                'nbparts':nbparts,
                'nbpartsevensubm':nbpartsevensubm,
                'nbattonly': natt,
                'nbtalks':nbtalks,
                'nbposters': nbposters,
                'nbviewp':nbviewp,
                'countv':countv,
                'nbroom':nbroom,
                'nbmes':nbmes,
                'nbmespo': nbmespo,
                'nbhourzoom':nbhourzoom,
                'CO2':CO2,
                'timeover':timeover,
                'countvview':countvview,
                'countvduration':countvduration,
                'nbposts':nbposts,
                'nbpart':nbpart,
                'nbparttot': nbparttot
            })

            if conftopass.masterconf:
                print('mast')

                #make zoom links
                visio=CreateVisio.objects.filter(Q(conference__masterconfpass=conftopass.masterconfpass,conference__acceptconf=True,testroom=False) | Q(conference__masterconfpass=conftopass.masterconfpass, conference__masterconf=True,testroom=False)).order_by('date')
                print('visio',visio)

                hostacc=[]
                if visio:
                    headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                               'content-type': 'application/json'}

                    conn = http.client.HTTPSConnection("api.zoom.us")

                for v in visio:
                    if v.idconf:
                        conn.request("GET", "/v2/meetings/" + str(v.idconf), headers=headers)


                        res = conn.getresponse()
                        data = res.read()
                        print('decode', data.decode("utf-8"))
                        print('status', res.status)

                        if res.status == 200:
                            hoste = json.loads(data)['host_email']
                            hostacc.append(hoste)

                stuff_for_frontend.update({'visio':visio,'hostacc':hostacc})

                prevstat=StatsMaster.objects.filter(conference=conftopass,user=request.user).order_by('timestamp').last()
                print('prevstat',prevstat)
                now = datetime.now(timezone.utc)
                now_minus_10 = now - timedelta(minutes=10)

                notinclou=False

                if prevstat:
                    if prevstat.timestamp>now_minus_10 and prevstat.finished:
                        print('dans les clous',prevstat.timestamp,now_minus_10)
                        print('tyr',prevstat.nbpartsm)
                        notinclou = False
                        stuff_for_frontend.update({
                            'nbpartsm': prevstat.nbpartsm,
                            'nbpartsevensubmm': prevstat.nbpartsevensubmm,
                            'bestposter': prevstat.bestposter,
                            'votes': prevstat.votes,
                            'view':prevstat.view,
                            'bestposter2': prevstat.bestposter2,
                            'votes2': prevstat.votes2,
                            'view2': prevstat.view2,
                            'nbattonlym': prevstat.nbattonlym,
                            'nbattonlynonaccm':prevstat.nbattonlynonaccm,
                            'nbtalksm': prevstat.nbtalksm,
                            'nbpostersm': prevstat.nbpostersm,
                            'nbviewpm': prevstat.nbviewpm,
                            'countvm': prevstat.countvm,
                            'nbroomm': prevstat.nbroomm,
                            'nbmesm': prevstat.nbmesm,
                            'nbmespom': prevstat.nbmespom,
                            'nbhourzoomm': prevstat.nbhourzoomm,
                            'CO2m': prevstat.CO2m,
                            'timeoverm': prevstat.timeoverm,
                            'countvviewm': prevstat.countvviewm,
                            'countvdurationm': prevstat.countvdurationm,
                            'nbpostsm': prevstat.nbpostsm,
                            'nbpartm': prevstat.nbpartm,
                            'nbparttotm': prevstat.nbparttotm,
                            'nbdiffm': prevstat.nbdiffm,
                            'ready':True,
                            'mastconf': True,
                            'statmastid':prevstat.id
                        })
                    else:
                        print("pas dans les clous")
                        notinclou=True
                else:
                    notinclou=True

                if notinclou==True:
                    if 'ON_HEROKU' in os.environ:

                        #print('rty')
                        a = 100000000
                        b = 999999999
                        n = random.randint(a, b)
                        #print('g')
                        #print('r',request.user)
                        #print('e',conftopass)
                        #print('now',timezone.now())
                        #print('strn',n,str(n))

                        obj, created = StatsMaster.objects.get_or_create(
                            user=request.user,
                            conference=conftopass,
                            timestamp=timezone.now(),
                            number=str(n),
                        )
                        #print('qa')
                        #print('aq',obj)
                        prepeuro1, offseteuro1 = utils.price(conftopass.id)
                        CO2 = round(offseteuro1 * 1.5, 1)

                        #print('CO2',CO2)
                        #print('CO2',obj.id)

                        x=asynchronouscheckstats.delay(confnum,obj.id,CO2)

                        obj.celery_task_id = x.task_id
                        obj.save()

                        #print('created',created)
                        statmastid=obj.id
                        stuff_for_frontend.update({
                            'statmastid': statmastid,
                            'ready': False,
                            'mastconf': True
                        })
                #record task id to check if finished later
                #visio[iu].celery_task_id = x.task_id

                #visio[iu].save()

        else:
            stuff_for_frontend.update(
                {'notexist': True})
    else:
        stuff_for_frontend = {
            'status': '6',
        }
    #print('ok7')

    return render(request, 'my_app/stats.html', stuff_for_frontend)

def confvideos(request,confnum):

    if CreateConf.objects.filter(id=confnum).exists():
        objects=CreateConf.objects.filter(id=confnum)[0]
        stuff_for_frontend={'conftopass':objects}

        if objects.recording:
            cansee = 0

            if objects.whorecording == "Only conference participants":

                #oliver
                cansee = 2
                if request.user.is_authenticated:

                    if objects.masterconf or objects.daughterconf:
                        parses = CreateConf.objects.filter(masterconfpass=objects.masterconfpass,
                                                           masterconf=True).values_list('parsession', flat=True)[0]

                        if parses:
                            alloweduserstoseevideo = RegisterConf.objects.filter(conference__masterconfpass=objects.masterconfpass, user=request.user,
                                                                             status=1)
                        else:
                            alloweduserstoseevideo = RegisterConf.objects.filter(conference=objects,
                                                                                 user=request.user,
                                                                                 status=1)
                    else:
                        print('iciii')
                        alloweduserstoseevideo = RegisterConf.objects.filter(conference=objects, user=request.user,
                                                                         status=1)
                    if alloweduserstoseevideo:
                        cansee = 0

                    #alloweduserstoseevideo = RegisterConf.objects.filter(conference=objects, user=request.user, status=1)
                    #if alloweduserstoseevideo:
                    #    cansee = 0

            stuff_for_frontend.update({'cansee': cansee})

            #print('visio', objects.id)  # inayu
            if objects.masterconf:
                visio = CreateVisio.objects.filter(conference__masterconfpass=objects.masterconfpass, testroom=False)
            else:
                visio = CreateVisio.objects.filter(conference_id=objects.id, testroom=False)
            #visio = CreateVisio.objects.filter(conference_id=objects.id, testroom=False)
            # getnumberofdays = abs(end - start).days + 1
            mp4downloadurl = []
            url = []
            dateday = []
            start = []
            end = []
            tabid = []
            tabnum = []
            titles = []
            session=[]
            nbviews=[]

            #print('len', len(visio))
            passla = 0
            visiotest = 0
            lentot = 0
            for i in range(len(visio)):
                #print('nopi', i)
                idconf = visio[i].idconf
                idrec = visio[i].recidconf
                mp4 = visio[i].mp4_url
                starte = visio[i].recstart
                ende = visio[i].recend

                if visio[i].vimeo_url:
                    #print('nopiz', i, visio[i].vimeo_url, mp4)

                    visiotest = 1
                    # mp4new = mp4.replace('[', '').replace(']', '').replace("'","")
                    # arr = mp4new.split(',')
                    #print('ici check', visio[i].vimeo_url)
                    vimurl2 = visio[i].vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                    arr2 = vimurl2.split(',')

                    #print('arr2', arr2)

                    startnew = starte.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                    arrs = startnew.split(',')
                    endnew = ende.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                    arre = endnew.split(',')

                    #print('mp4,idrec,idconf', mp4, idrec, idconf)
                    #print('arre,arrs', arre, arrs, starte, startnew)
                    lentot = lentot + len(arr2)
                    print('lr',lentot,visio[i].rectitles)
                    print('ju',idconf,idrec)
                    if visio[i].rectitles:
                        text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'",
                                                                                             "")  # .replace(" ","")
                        titles2 = text2.split(',')
                        print('tr',titles2)
                        for k in range(len(titles2)):
                            titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'"))
                            #print('tit',titles)
                    elif not visio[i].rectitles and titles:
                        print('fd',visio[i].id)
                        for k in range(len(arr2)):
                            titles.append('')
                    else:
                        titles = [''] * lentot
                        print('ik')

                    for ij in range(len(arr2)):

                        if arr2[ij]:
                            redvimurl = arr2[ij].split('/')[2]
                            import vimeo

                            client = vimeo.VimeoClient(
                                token='ad1e934c05fe16362aebbeac14a3bee6',
                                key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                                secret=settings.SECRETVIMEO
                            )

                            response = client.get('/videos/' + redvimurl,
                                                  params={"fields": "uri,status,duration,stats"})
                            if response.status_code == 200:
                                # print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                # print('ffnkjv', response.json()['status'])

                                # videostatus = response.json()['status']
                                # videodur = response.json()['duration']  # in seconds
                                videonbvie = response.json()['stats']
                                videonbview = videonbvie['plays']
                                nbviews.append(videonbview)
                                # print('oooo',videonbvie,videonbview)
                                # countvduration += videodur / 60. / 60.  # in hour

                            #print('redvim', redvimurl)
                            mp4_url = "https://vimeo.com/" + redvimurl
                            vim_play_url = "https://player.vimeo.com/video/" + redvimurl

                        dated = visio[i].date.strftime("%d-%m-%Y")  # https://player.vimeo.com/video/438127510
                        # gerer la front end car la on en passe qu'un
                        if idconf:
                            # api_url, headers = utils.connection('conferences/3e889798e61c')
                            # print('iiiii',idconf)
                            if idrec:
                                # print('recording',idrec)
                                # url.append('https://www.bigmarker.com/recordings/'+str(idrec)+'?width=400&height=600')
                                url.append(vim_play_url)
                                session.append(visio[i].conference.title)
                                tabid.append(idconf)  # json_list = simplejson.dumps(list)
                                tabnum.append(str(ij))
                                start.append(parse_datetime(arrs[ij]))
                                end.append(parse_datetime(arre[ij]))
                                #print('tab', tabid, tabnum)
                                #print('ola', parse_datetime(arrs[ij]), parse_datetime(arre[ij]))
                                #print('start', arrs[ij], arre[ij])
                                # start.append(datetime.strptime(arrs[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())
                                # end.append(datetime.strptime(arre[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())

                                # end.append(arre[ij])
                                mp4downloadurl.append(mp4_url)
                                ##print('gg',info['conference']['title'])
                                title = objects.title  # info['conference']['title']
                                dateday.append(dated)
                                #start_time = start_date  # info['conference']['start_time']
                                # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                                # start_time = start_time.strftime("%d %B %Y at %H:%M")
                                status = '0'
                                # import vimeo

                               

                                # response = client.get('/me')  # ,params={"fields": "uri"})
                                # print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                                # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                                # response = client.get('/videos/' + redvimurl, params={"fields": "uri,status"})
                                # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                                # print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                # print('ffnkjv', response.json()['status'])

                                passla = 1
                                # videostatus = response.json()['status']

                            # from django.utils import simplejson
                            # print('lasttab', tabid, tabnum, url, start, end, videostatus, titles)
                            # videostatus='avalaible'#finished
                            stuff_for_frontend.update({
                                'status': status,
                                'archiveurl': url,
                                'sessiontit':session,
                                'tabid': tabid,  # json.dumps(tab),
                                'tabnum': tabnum,
                                'mp4downloadurl': mp4downloadurl,
                                'start_time': dateday,
                                'createvisioid': visio[0].id,
                                'title': title,
                                'titles': titles,
                                # 'videostatus': videostatus,
                                'start': start,
                                'end': end,
                                'nbviews':nbviews
                            })

                        elif mp4 and not idrec and passla == 0:
                            #print('hjjk')
                            #print('mp4,idrec,idconf2', mp4, idrec, idconf)

                            # from celery.result import AsyncResult
                            # res = AsyncResult(x.task_id)
                            # res.ready()
                            # print('res', res, res.status, res.state)

                            stuff_for_frontend.update({
                                'status': '2c',
                                'title': objects.title,
                                'createvisioid': visio[i].id
                            })
                        elif passla == 0:
                            #print('rrr')
                            if status != '2b':
                                # print('pourtant0')
                                stuff_for_frontend.update({
                                    'status': '2',
                                    'title': objects.title
                                })
                        else:
                            #print('pourtant')
                            stuff_for_frontend.update({
                                'status': '3',
                                'title': objects.title
                            })

                else:
                    if mp4:
                        visiotest = 1
                        #print('ah I see 5')
                        stuff_for_frontend.update({
                            'status': '2c',
                            'createvisioid': visio[i].id,
                            'title': objects.title
                        })
                    else:
                        #print('right')
                        if visiotest == 0:
                            #print('ah I see 2')
                            stuff_for_frontend.update({
                                'status': '2',
                                'createvisioid': visio[i].id,
                                'title': objects.title
                            })
                if url and i == len(visio) - 1:
                    # url=
                    # session
                    # start
                    # myList = [1, 2, 3, 100, 5]
                    # asorted = sorted(range(len(start)), key=start.__getitem__)

                    B = sorted(range(len(start)), key=lambda x: start[x])
                    asorted = sorted(range(len(start)), key=lambda x: B[x])

                    # print('indices',C)
                    #print('myl', asorted)
                    #print('start1', start)
                    # url = url[asorted]
                    url = [x for _, x in sorted(zip(asorted, url))]
                    # session = [x for _, x in sorted(zip(asorted, session))]
                    # print('end', end)
                    # print('zip(asorted, end)',list(zip(asorted, end)))
                    # print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                    # qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                    # les end sont pas bons de base, verifiez pk
                    # end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                    end = [x for y, x in sorted(zip(asorted, end))]

                    titles = [x for _, x in sorted(zip(asorted, titles))]
                    session = [x for _, x in sorted(zip(asorted, session))]

                    print('thgf',titles)

                    tabid = [x for _, x in sorted(zip(asorted, tabid))]
                    tabnum = [x for _, x in sorted(zip(asorted, tabnum))]

                    # sorted_arr2 = arr2[arr1inds[::-1]]
                    #print('url', url)
                    # print('session', session)
                    #print('end', end)
                    #print('titles', titles)
                    #print('tabid', tabid)
                    #print('tabnum', tabnum)

                    start.sort()

                    # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                    #print('start2', start)
                    stuff_for_frontend.update({
                        'archiveurl': url,
                        'sessiontit': session,
                        'titles': titles,
                        'tabid': tabid,
                        'tabnum': tabnum,
                        # 'videostatus': videostatus,
                        'start': start,
                        'end': end
                    })
        else:
            stuff_for_frontend.update({
                'status': '5',
                'title': objects.title
            })
    else:
        stuff_for_frontend={
            'status': '6',
        }

    return render(request, 'my_app/confvideos.html', stuff_for_frontend)


def new_search(request):
    if request.method == 'POST':
        # print('post')
        search_terms = request.POST.get('search')
        # print(search_terms)
        res = search.Search_ela(search_terms)
        # print('ressss',res)
        res1 = res[0]
        res2 = res[1]
        # res['ST']=search_terms
        # for hit in res1['hits']['hits']:
        # print('hit',hit)
        # hit['good_summary']='….'.join(hit['highlight']['content'][1:])

        # print('res',res)

        suggestion = search.Search_suggestion(search_terms)
        # print('suggestion',suggestion)

        stuff_for_frontend = {
            'search': search_terms,
            'res1': res1,
            'lenr1': len(res1),
            'res2': res2,
            'lenr2': len(res2)
        }
        return render(request, 'my_app/new_search.html', stuff_for_frontend)
    else:
        # print('what')
        stuff_for_frontend = {
            'search': 'No research',
        }
        return render(request, 'my_app/new_search.html', stuff_for_frontend)


def new_suggestion(request):
    search_terms = request.GET.get('term')
    # print('get',search_terms)

    suggestion = search.Search_suggestion(search_terms)
    # print('suggestionn',suggestion)

    return JsonResponse(suggestion, safe=False)  # suggestion


def hostconf(request,sorting=None):
    if 1==1:
        print('ui2')
        newconf = "0"
        failedbig = "0"
        if request.method == 'POST':
            if request.POST.get('conf'):
                print('je change')
                confidchange = request.POST.get('conf')
                # print('yooooo',conftitlechange)
                request.session['confid'] = confidchange
            newconf = request.POST.get('newconf', '0')

        # print('cconfe',newconf)
        ##print('dt',request.visitor.country)
        todayy = datetime.today()

        # if not request.session['django_timezone']:
        #   ses=pytz.common_timezones[0]
        # else:
        #   ses=request.session['django_timezone']
        email = request.GET.get("email", "False")
        # print('email',eval(email))
        mastconfdontexist = 0
        mastconfdate = 0
        alpaid = 0

        clu=utils.conf_list_user(request)
        sortingtem=''
        if sorting:
            sortingtem=sorting


        stuff_for_frontend = {
            'sortingtem':sortingtem,
            'email2': eval(email),
            'conffailed': 0,
            'mastconfdontexist': 0,
            'alpaid': 0,
            'mastconfdate': 0,
            'emailalready': 0,
            'conf_list_user':clu,
            'timezones': pytz.common_timezones,
            'currenttz': request.session.get('django_timezone', ''),  # request.session['django_timezone'],#ses,
            'today': todayy
        }
        #        todayy = datetime.today()

        createdconf = False

        # if not objects or newconf=="1":
        createdconf2 = False
        if 1 == 1:

            subject_list = (
                'Astrophysics', 'Mathematics', 'Physics', 'Biology', 'Medicine', 'Informatics', 'Statistics',
                'Engineering')
            
            print('ui12',request.method,request.POST.get('updateconf'),request.POST.get('progform'))

            if request.method == 'POST' and not request.POST.get('updateconf') and not request.POST.get('progform'):
                # form = FormForm(data_list=country_list)
                print('ui1')
                                      

               
            else:
                print('io3')
                createconf_form = CreateConfForm(data_list=subject_list)
                # regtalk_form = RegisterConfForm(
                #   initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography})

                stuff_for_frontend.update({
                'createconf_form': createconf_form,
                'COST_PER_PARTICIPANT': settings.COST_PER_PARTICIPANT,
                # 'createconf_form_update': createconf_form_update,
                #'createdconf': createdconf,
            })

    return render(request, 'my_app/hostconf.html', stuff_for_frontend)


@confirm_password
def createconf(request,sorting=None):
    if not request.user.is_authenticated:
        stuff_for_frontend = {
            'comingfrom': 'createconf',
            'linkfrom': '',
            'confnum': 0
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)
    else:
        newconf = "0"
        failedbig = "0"
        if request.method == 'POST':
            if request.POST.get('conf'):
                print('je change')
                #conftitlechange = request.POST.get('conf')
                confidchange = request.POST.get('conf')
                # print('yooooo',conftitlechange)
                #request.session['conftit'] = conftitlechange
                request.session['confid'] = confidchange
            newconf = request.POST.get('newconf', '0')

        # print('cconfe',newconf)
        ##print('dt',request.visitor.country)
        todayy = datetime.today()

        # if not request.session['django_timezone']:
        #   ses=pytz.common_timezones[0]
        # else:
        #   ses=request.session['django_timezone']
        email = request.GET.get("email", "False")
        # print('email',eval(email))
        mastconfdontexist = 0
        mastconfdate = 0
        alpaid = 0

        clu=utils.conf_list_user(request)
        #            'conf_list_user':clu,

        sortingtem=''
        if sorting:
            sortingtem=sorting


        stuff_for_frontend = {
            'sortingtem':sortingtem,
            'email2': eval(email),
            'conffailed': 0,
            'mastconfdontexist': 0,
            'alpaid': 0,
            'mastconfdate': 0,
            'emailalready': 0,
            'conf_list_user':clu,
            'timezones': pytz.common_timezones,
            'currenttz': request.session.get('django_timezone', ''),  # request.session['django_timezone'],#ses,
            'today': todayy
        }
        #        todayy = datetime.today()

        createdconf = False

        # if not objects or newconf=="1":
        createdconf2 = False
        if 1 == 1:

            subject_list = (
                'Astrophysics', 'Mathematics', 'Physics', 'Biology', 'Medicine', 'Informatics', 'Statistics',
                'Engineering')

            if request.method == 'POST' and not request.POST.get('updateconf') and not request.POST.get('progform')  and not request.POST.get('changeconfnow') and not request.POST.get('heroid') and not request.POST.get('savedconf'):
                print('in createconf')
                

                # form = FormForm(data_list=country_list)

                createconf_form = CreateConfForm(request.POST, data_list=subject_list)
                # print('brahh',createconf_form,createconf_form['title'])
                if createconf_form.is_valid():
                    # print('brahh2')
                    # users = User.objects.filter(username=request.user)
                    createconff = createconf_form.save(commit=False)

                    #check if title already exists
                    nbsametitle=CreateConf.objects.filter(title__icontains=createconff.title).count()
                    print('nbsametitle',nbsametitle)
                    if nbsametitle>0:
                        createconff.title_extra=str(nbsametitle)

                    createconff.user = request.user
                    idcftouse = createconff.id
                    # print('user',request.user,idcftouse)
                    # createconff.user(users)

                    # print('dates',createconff.start_date,createconff.end_date)
                    # if createconff.start_date>createconff.end_date:
                    #    messages.error(request, 'End date must be greater than or equal to start date.', extra_tags='date')
                    #    return HttpResponseRedirect(reverse('my_app:createconf'))

                    # {{createconf_form.masterconf | as_crispy_field}}

                    # {{createconf_form.daughterconf | as_crispy_field}}

                    # {{createconf_form.masterconfpass | as_crispy_field}}

                    createconff.submitparticipations=True
                    createconff.daughterconfstarwars=False
                    createconff.subtomastautomatic=False
                    createconff.activateqandp=True
                    createconff.coffeebreak=True
                    createconff.coffeebreakgames=True
                    if createconf_form.cleaned_data['fee_currency_unique']:
                        currency=createconf_form.cleaned_data['fee_currency_unique']
                        if currency == '':
                            currency = 'EUR'
                        if currency == 'Euros':
                            currency = 'EUR'
                        if currency == 'US Dollars':
                            currency = 'USD'
                        if currency == 'GB Pounds':
                            currency = 'GBP'

                        if currency != 'EUR':
                            try:
                                convcost = convert_money(Money(settings.COST_PER_PARTICIPANT, 'EUR'), currency)

                                convcost = str(round(convcost.amount, 2))

                                convcost = convcost.split('.')[0] + '.' + convcost.split('.')[1][0:2]
                                print('convcost',convcost)

                                createconff.fee_amount_unique = convcost
                            except:
                                createconff.fee_amount_unique = settings.COST_PER_PARTICIPANT
                        else:
                            createconff.fee_amount_unique=settings.COST_PER_PARTICIPANT

                    is_uniqueee = False
                    while not is_uniqueee:
                        uniquelinke = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                        is_uniqueee = not (CreateConf.objects.filter(fastpass=uniquelinke).exists())
                    createconff.fastpass = uniquelinke

                    if createconff.priv == "Public":
                        is_uniquee = False
                        while not is_uniquee:
                            uniquelink = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                            is_uniquee = not (CreateConf.objects.filter(privpass=uniquelink).exists())
                        createconff.privpass = uniquelink

                    if createconff.masterconf:
                        is_unique = False
                        while not is_unique:
                            idran = random.randint(10000000, 99999999)  # 10 digits
                            is_unique = not (CreateConf.objects.filter(masterconfpass=idran).exists())

                        #print('ju', idran)
                        createconff.masterconfpass = idran
                        createconff.masterconfdaughtername = 'Plenaries'
                        createconff.masterconfdaughterposition = 0
                        #print('ju2', idran)

                    if createconff.daughterconf:

                        if createconff.masterconfpass != None:
                            #print('different', createconff.masterconfpass)
                            confexist = CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                                  masterconf=True).exists()

                            if confexist:
                                createconff.daughterconfstarwars = CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,masterconf=True).values_list('daughterconfstarwars',flat=True)[0]
                                createconff.subtomastautomatic = CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,masterconf=True).values_list('subtomastautomatic',flat=True)[0]


                                payinonego = CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                                       masterconf=True).values_list('payingatonce',
                                                                                                    flat=True)[0]
                                #print('payinonego', payinonego)
                                if payinonego:
                                    # alors put same price for daughter conf
                                    createconff.fee = \
                                    CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                              masterconf=True).values_list('fee', flat=True)[0]
                                    createconff.fee_amount = \
                                        CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                              masterconf=True).values_list('fee_amount', flat=True)[0]
                                    createconff.fee_currency = \
                                    CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                              masterconf=True).values_list('fee_currency', flat=True)[0]
                                    createconff.fee_to_carbon = \
                                    CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                              masterconf=True).values_list('fee_to_carbon', flat=True)[
                                        0]
                                    createconff.fee_variable = \
                                        CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                                  masterconf=True).values_list('fee_variable',
                                                                                               flat=True)[
                                            0]

                                    payal = CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,
                                                                      masterconf=True).values_list('status', flat=True)[
                                        0]
                                    #print('payal', payal)
                                    if payal == 2:
                                        alpaid = 1
                                        stuff_for_frontend.update({
                                            'mastconfalreadypaid': 1,
                                        })

                            if not confexist:
                                mastconfdontexist = 1
                                stuff_for_frontend.update({
                                    'mastconfdontexist': mastconfdontexist,
                                })

                            elif (confexist and alpaid == 0):
                                #print('yoan')
                                createconff.masterconfidfordaughter = \
                                CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,masterconf=True).values_list('id',
                                                                                                                 flat=True)[
                                    0]
                                # give a value, first, second session?
                                number = CreateConf.objects.filter(
                                    masterconfidfordaughter=createconff.masterconfidfordaughter)
                                #print('tuvois', number)
                                createconff.masterconfdaughterposition = len(number)+1
                                #print('number', number, len(number))
                                createconff.masterconfdaughtername = utils.starwarsplanets(len(number))
                                start_date_mast = \
                                    CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,masterconf=True).values_list(
                                    'start_date', flat=True)[0]
                                end_date_mast = \
                                CreateConf.objects.filter(masterconfpass=createconff.masterconfpass,masterconf=True).values_list(
                                    'end_date', flat=True)[0]

                                if ((createconff.start_date >= start_date_mast) and (
                                        createconff.end_date <= end_date_mast) and (
                                        createconff.start_date <= end_date_mast) and (
                                        createconff.end_date >= start_date_mast)):

                                    stuff_for_frontend.update({
                                        'mastconftitle': CreateConf.objects.filter(
                                            masterconfpass=createconff.masterconfpass,masterconf=True).values_list('title', flat=True)[
                                            0],
                                    })

                                else:
                                    mastconfdate = 1
                                    stuff_for_frontend.update({
                                        'mastconfdate': mastconfdate,
                                    })
                        else:
                            mastconfdontexist = 1
                            stuff_for_frontend.update({
                                'mastconfdontexist': mastconfdontexist,
                            })

                    if mastconfdontexist == 0 and mastconfdate == 0 and alpaid == 0:
                        # createconff.user.set(users)
                        #print('georges')
                        # nowplusonehour=datetime.now().strftime('%H:%M:%S') + timedelta(days=0, hours=1).strftime('%H:%M:%S')
                        # start_time = datetime.combine(createconff.start_date, nowplusonehour)
                        start_time = datetime.combine(createconff.start_date, datetime.min.time())

                        start_time_str = start_time.strftime("%Y-%m-%d %H:%M")

                        # start_time=datetime.strptime(createconff.start_date,'%m/%d/%y')#put midnight local time for now
                        # print('start', start_time_str)

                        # add timezone to data for bigmarker when it is sorted
                        # how many days?

                        getnumberofdays = abs(createconff.end_date - createconff.start_date).days + 1
                        # print('nb days', getnumberofdays, createconff.start_date, createconff.end_date)

                        idconfs = []
                        dateday = []
                        passzoom = []
                        starturlzoom = []
                        joinurlzoom = []
                        #for coffee break room
                        idconfs2 = []
                        passzoom2 = []
                        starturlzoom2 = []
                        joinurlzoom2 = []

                        for i in range(getnumberofdays):
                            start_time2 = datetime.combine(createconff.start_date, datetime.min.time()) + timedelta(
                                hours=23, minutes=59, days=i)
                            start_time2_str = start_time2.strftime("%Y-%m-%d %H:%M")
                            tzloc = request.session['django_timezone']
                            local = pytz.timezone(tzloc)
                            shift = start_time2.astimezone(local).replace(tzinfo=None) - start_time2.replace(
                                tzinfo=None)

                            dateday.append(start_time2 - shift)

                            if createconff.roomtype == "Big Marker":
                                data = {"channel_id": CHANNEL_ID, "title": createconff.title,
                                        "start_time": start_time2_str,
                                        "review_emails": False, "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                        "send_reminder_emails_to_presenters": False,
                                        "registration_conf_emails": False, "send_cancellation_email": False,
                                        "show_reviews": False,
                                        "review_emails": False, "privacy": "private",
                                        "who_can_watch_recording": "channel_admin_only",
                                        "auto_invite_all_channel_members": False,
                                        "registration_required_to_view_recording": False}

                                data = json.dumps(data)
                                # print('dat', data)
                                createconfinfo = utils.createconffunc(data)
                            else:
                                alphabet = string.ascii_letters + string.digits
                                passwordzoom = ''.join(secrets.choice(alphabet) for ij in range(7))
                                start_time2_strz = start_time2.strftime("%Y-%m-%dT%H:%M:%SZ")
                                passzoom.append(passwordzoom)

                                alphabet2 = string.ascii_letters + string.digits
                                passwordzoom2 = ''.join(secrets.choice(alphabet2) for ij in range(7))
                                passzoom2.append(passwordzoom2)

                                #print('starttimezoom', start_time2_str, start_time2_strz, '2020-12-07T11:00:00Z')
                                # duration
                                data = {"topic": createconff.title, "type": 2,
                                        "start_time": start_time2_strz, "duration": "30",
                                        "password": passwordzoom, "agenda": createconff.title, "timezone": "UTC",
                                        "settings": {"host_video": True, "participant_video": True,
                                                     "hd_video": True, "waiting_room": False, "join_before_host": True,
                                                     "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                     "approval_type": "2", "audio": "both", "auto_recording": "none",
                                                     "meeting_authentification": False,
                                                     "registrants_email_notification": False}}

                                # data = {"title": createconff.title,
                                #        "start_time": start_time2_str,
                                #        "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                #        }

                                data = json.dumps(data)
                                #print('dat', data)

                                datacoffeebreak = {"topic": 'Coffee break room for: '+createconff.title, "type": 2,
                                        "start_time": start_time2_strz, "duration": "30",
                                        "password": passwordzoom2, "agenda": 'Coffee break room for: '+createconff.title, "timezone": "UTC",
                                        "settings": {"host_video": True, "participant_video": True,
                                                     "hd_video": True, "waiting_room": False, "join_before_host": True,
                                                     "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                     "approval_type": "2", "audio": "both", "auto_recording": "none",
                                                     "meeting_authentification": False,
                                                     "registrants_email_notification": False}}

                                # data = {"title": createconff.title,
                                #        "start_time": start_time2_str,
                                #        "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                #        }

                                datacoffeebreak = json.dumps(datacoffeebreak)

                                createconfinfo = utils.createconffunczoom(data)
                                createconfinfocoffeebreak = utils.createconffunczoom(datacoffeebreak)

                            #print('sisenor')
                            if createconfinfo:
                                #print('sisenor2')
                                idconfs.append(createconfinfo['id'])
                                starturlzoom.append(createconfinfo['start_url'])
                                joinurlzoom.append(createconfinfo['join_url'])

                                #print('sisenor3')

                            if createconfinfo is None:
                                # print('createnone')
                                #print('sisenor4')
                                failedbig = "1"
                                stuff_for_frontend.update({
                                    'conffailed': 1,
                                })

                            if createconfinfocoffeebreak:
                                #print('sisenor2')
                                idconfs2.append(createconfinfocoffeebreak['id'])
                                starturlzoom2.append(createconfinfocoffeebreak['start_url'])
                                joinurlzoom2.append(createconfinfocoffeebreak['join_url'])

                                #print('sisenor3')

                            if createconfinfocoffeebreak is None:
                                # print('createnone')
                                #print('sisenor4')
                                failedbig = "1"
                                stuff_for_frontend.update({
                                    'conffailed': 1,
                                })

                        if createconfinfo is not None:
                            #print('sisenor5')
                            createconff.save()
                            #print('sisenor6')
                            # Create Programdesign Clement
                            # allc=CreateConf.objects.exclude(title__isnull=True)
                            # for a in allc:
                            p, created = ProgramDesign.objects.get_or_create(
                                    conference=createconff,
                                    defaults={'timestart':'0','timefinish':'24','mineventheight':'100','heighthr':2,'minieventtime':10,'opacity':10},
                            )

                            createdconf2 = True
                            createdconf = True
                            #request.session['conftit'] = createconff.title
                            request.session['confid'] = createconff.id

                            
                            '''
                            Question(models.Model, HitCountMixin):
                            """Model class to contain every question in the forum"""
                            slug = models.SlugField(max_length=200)
                            title = models.CharField(max_length=200, blank=False)
                            description = MarkdownField()
                            pub_date = models.DateTimeField('date published', auto_now_add=True)
                            tags = TaggableManager()
                            reward = models.IntegerField(default=0)
                            user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
                            closed = models.BooleanField(default=False)
                            positive_votes = models.IntegerField(default=0)
                            negative_votes = models.IntegerField(default=0)
                            total_points = models.IntegerField(default=0)
                            confid = models.IntegerField(default=0)
                            '''

                            #q1=Question.objects.filter()
                            q1 = Question.objects.create(title="What should be my next book and why?",user=request.user,confid=createconff.id)
                            q1.tags.add("book")
                            #print('q1',q1)
                            q2 = Question.objects.create(title="What good recipe can I make tonight?",
                                                         user=request.user, confid=createconff.id)
                            q2.tags.add("food")
                            q3 = Question.objects.create(title="What is a song you like I should listen to right now?",
                                                         user=request.user, confid=createconff.id)
                            q3.tags.add("music")
                            q4 = Question.objects.create(title="When you were a kid, what did you want to be when you grew up?",
                                                         user=request.user, confid=createconff.id)
                            q4.tags.add("life")
                            q5 = Question.objects.create(
                                title="What show are you binge watching right now?",
                                user=request.user, confid=createconff.id)
                            q5.tags.add("show")
                            q6 = Question.objects.create(
                                title="What’s the coolest thing you’re working on right now? ",
                                user=request.user, confid=createconff.id)
                            q6.tags.add("cool")
                            q7 = Question.objects.create(
                                title="Do you believe in aliens?",
                                user=request.user, confid=createconff.id)
                            q7.tags.add("aliens")
                            for i in range(getnumberofdays):
                                if createconff.roomtype == "Big Marker":
                                    visio, visiocrea = CreateVisio.objects.get_or_create(conference=createconff,
                                                                                         date=dateday[i],
                                                                                         idconf=idconfs[i], duration=1,
                                                                                         defaults={})
                                else:
                                    #finishzoomsession.apply_async((idconfs[i],),eta=datetime(2020, 12, 22, 14, 45))
                                    if 'ON_HEROKU' in os.environ:

                                        taskfin=finishzoomsession.apply_async((idconfs[i],),eta=dateday[i]+timedelta(hours=1))
                                        taskidl=taskfin.task_id
                                        taskfin2 = finishzoomsession.apply_async((idconfs2[i],), eta=dateday[i]+timedelta(hours=1))
                                        taskidl2 = taskfin2.task_id
                                        #print('taskidfin', taskfin.task_id)

                                    else:
                                        taskidl=""
                                        taskidl2=""
                                    #from celery.task.control import revoke

                                    #revoke(taskfin.task_id, terminate=True)

                                    visio, visiocrea = CreateVisio.objects.get_or_create(conference=createconff,
                                                                                         date=dateday[i],
                                                                                         passzoom=passzoom[i],
                                                                                         idconf=idconfs[i],
                                                                                         starturlzoom=starturlzoom[i],
                                                                                         joinurlzoom=joinurlzoom[i],
                                                                                         duration=1,
                                                                                         celery_task_id_fin=taskidl,
                                                                                         idconfcb=idconfs2[i],
                                                                                         starturlzoomcb=starturlzoom2[i],
                                                                                         joinurlzoomcb=joinurlzoom2[i],
                                                                                         celery_task_id_fin_cb=taskidl2,
                                                                                         passzoomcb=passzoom2[i],
                                                                                         defaults={})

                                visio.save()

                else:
                    print('brahh3')
                    print(createconf_form.errors)
                

            else:
                createconf_form = CreateConfForm(data_list=subject_list)
                # regtalk_form = RegisterConfForm(
                #   initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography})

            # if not objects or newconf == "1":

            if createdconf2 == True:

                if createconfinfo is None:
                    # print('createnone')
                    stuff_for_frontend.update({
                        'conffailed': 1,
                    })

                # idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                ##print('idcfbg',idcf)
                idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('id',flat=True)[0]
                # print('idcfbg2',idcf)
                conftopass = CreateConf.objects.filter(id=idcf)[0]

                if createconfinfo is not None:
                    #print('idcf', idcf)
                    #print(CreateConf.objects.filter(id=idcf))
                    # CreateConf.objects.filter(id=idcf).update(idconf=createconfinfo['id'])
                    # CreateConf.objects.filter(id=idcf).update(status=2)
                    # conftopass=CreateConf.objects.filter(id=idcf)[0]
                    # let's create the first people and regconf with the organizer
                    # tbb
                    regtalk, regtalkcrea = RegisterConf.objects.get_or_create(conference=conftopass, user=request.user,
                                                                              defaults={})
                    # regtalk = RegisterConf.objects.filter(user=request.user)[0]#], conference=conftopass)[0]
                    regtalk.role = 3  # superuser=moderator++
                    regtalk.title = 'Introductory Talk'
                    regtalk.type = 6
                    regtalk.abstract = 'I will kickstart the conference!'
                    regtalk.biography = ''
                    regtalk.status = 1
                    regtalk.socloc = 2
                    regtalk.save()
                    peoplechef, peoplechefcrea = People.objects.get_or_create(conference=conftopass, user=request.user,
                                                                              defaults={})
                    # peoplechef=People.objects.filter(user=request.user, conference=conftopass)[0]
                    peoplechef.firstname = request.user.first_name
                    peoplechef.lastname = request.user.last_name
                    peoplechef.email = request.user.email
                    peoplechef.save()

                    userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conftopass, user=request.user,
                                                                            defaults={'mainuser': request.user})
                    # userlink.mainuser=request.user
                    userlink.save()

                    daugh = CreateConf.objects.filter(id=idcf, daughterconf=True)
                    if daugh:  # then add master conf creator to the daughter conf with attendance only
                        #print('dddrr', daugh)
                        masterconfcreatorid = CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass,
                                                                        masterconf=True).values_list('user', flat=True)[
                            0]

                        masterconfcreator = User.objects.filter(id=masterconfcreatorid)[0]

                        #print('user', masterconfcreator, masterconfcreator.first_name)
                        regtalkm, regtalkcream = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                    user=masterconfcreator, defaults={})
                        # regtalk = RegisterConf.objects.filter(user=request.user)[0]#], conference=conftopass)[0]
                        regtalkm.role = 3  # superuser=moderator++
                        regtalkm.title = 'Attendance Only'
                        regtalkm.type = 5
                        regtalkm.status = 1
                        regtalkm.socloc = 2
                        regtalkm.save()
                        peoplechefm, peoplechefcream = People.objects.get_or_create(conference=conftopass,
                                                                                    user=masterconfcreator, defaults={})
                        # peoplechef=People.objects.filter(user=request.user, conference=conftopass)[0]
                        peoplechefm.firstname = masterconfcreator.first_name
                        peoplechefm.lastname = masterconfcreator.last_name
                        peoplechefm.email = masterconfcreator.email
                        peoplechefm.save()

                        userlinkm, userlinkcream = UserLink.objects.get_or_create(conference=conftopass,
                                                                                  user=masterconfcreator,
                                                                                  defaults={'mainuser': request.user})
                        userlinkm.save()

                        #find superusers of masterconf
                        superuseri=RegisterConf.objects.filter(conference__masterconfpass=daugh[0].masterconfpass,conference__masterconf=True,role=3).values_list('user', flat=True)

                        for su in superuseri:
                            suu=User.objects.filter(id=su)[0]
                            if suu != masterconfcreator:
                                createsupuser = RegisterConf.objects.create(user=suu, conference=daugh[0],status=1, type=5, role=3)
                                userlinkm, userlinkcream = UserLink.objects.get_or_create(conference=daugh[0],
                                                                                      user=suu,defaults={'mainuser': request.user})
                                userlinkm.save()

                        #print('created man')
                    # from requests import sessions
                    # from pprint import pprint
                    # from rocketchat_API.rocketchat import RocketChat

                    with sessions.Session() as session:
                        # log-in

                        try:
                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                server_url='https://chat.carbonfreeconf.com',
                                                session=session)
                        except:
                            subject = "Nooooooooo Rocket chat what????"
                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                            emailto = []
                            emailto.append("quentin.kral@gmail.com")
                            emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            #email.send(fail_silently=False)

                        # create room for participants
                        if conftopass.title_extra:
                            slugtitleconf = slugify(str('%s' % (conftopass.title+' '+conftopass.title_extra)))
                        else:
                            slugtitleconf = slugify(str('%s' % (conftopass.title)))
                        #print('slug', slugtitleconf)
                        crearoom = rocket.groups_create(slugtitleconf).json()

                        # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                        if crearoom['success']:
                            contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                            #print('f', contentroom)
                            keyroom = contentroom['group']['_id']
                            #print('keyroom', keyroom)
                            contentuser = rocket.users_info(username=request.user.username).json()
                            key = contentuser['user']['_id']
                            pprint(
                                rocket.groups_set_description(room_id=keyroom, description=conftopass.abstract).json())
                            pprint(rocket.groups_set_topic(room_id=keyroom, topic=conftopass.subject).json())
                            pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())
                            modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()

                            textmes = 'Welcome to the conference entitled: ' + conftopass.title + '. This room can be used by all the conference participants. You can introduce yourself before the ' \
                                                                                                  'conference starts and ask questions to organizers if needed (for technical questions, go ' \
                                                                                                  'to the help desk channel). We wish you a wonderful and prosperous conference.'

                            pprint(rocket.chat_post_message(text=textmes, room_id=keyroom).json())
                            if conftopass.daughterconf:  # or conftopass.masterconf:

                                # find mast conf room
                                # tbbbbbbbbbbbbbbbbbbbbbbbbbb
                                confmast = \
                                    CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,
                                                              masterconf=True)[0]
                                contentusermast = rocket.users_info(username=conftopass.user.username).json()
                                keymast = contentusermast['user']['_id']
                                # invite master
                                pprint(rocket.groups_invite(room_id=keyroom, user_id=keymast).json())
                                #pprint(rocket.groups_invite(room_id=keyroomorg, user_id=keymast).json())

                                if confmast.title_extra:
                                    slugtitleconfmast = slugify(str('%s' % (confmast.title+' '+confmast.title_extra)))
                                else:
                                    slugtitleconfmast = slugify(str('%s' % (confmast.title)))

                                contentroommast = rocket.groups_info(room_name=slugtitleconfmast).json()
                                if contentroommast['success'] == True:
                                    keyroommast = contentroommast['group']['_id']
                                    #print('keyroommast', keyroommast)

                                    pprint(rocket.groups_invite(room_id=keyroommast, user_id=key).json())


                        # create room for organizers
                        if conftopass.title_extra:
                            slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title+' '+conftopass.title_extra)))
                        else:
                            slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title)))
                        #print('slug', slugtitleconforg)
                        crearoomorg = rocket.groups_create(slugtitleconforg).json()

                        if crearoomorg['success']:
                            # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                            contentroomorg = rocket.groups_info(room_name=slugtitleconforg).json()
                            keyroomorg = contentroomorg['group']['_id']
                            #print('keyroomorg', keyroomorg)
                            contentuser = rocket.users_info(username=request.user.username).json()
                            key = contentuser['user']['_id']

                            pprint(rocket.groups_set_description(room_id=keyroomorg,
                                                                 description='This is a room dedicated to the organizers of the conference entitled: ' + conftopass.title + '.').json())
                            pprint(rocket.groups_set_topic(room_id=keyroomorg, topic=conftopass.subject).json())
                            pprint(rocket.groups_invite(room_id=keyroomorg, user_id=key).json())
                            modoorg = rocket.groups_add_moderator(room_id=keyroomorg, user_id=key).json()

                            if conftopass.daughterconf:  # or conftopass.masterconf:

                                # find mast conf room
                                # tbbbbbbbbbbbbbbbbbbbbbbbbbb
                                confmast = \
                                    CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,
                                                              masterconf=True)[0]
                                contentusermast = rocket.users_info(username=conftopass.user.username).json()
                                keymast = contentusermast['user']['_id']
                                # invite master
                                #pprint(rocket.groups_invite(room_id=keyroom, user_id=keymast).json())
                                pprint(rocket.groups_invite(room_id=keyroomorg, user_id=keymast).json())


                            textmesorg = 'Welcome to the room dedicated to organizers for the conference entitled: ' + conftopass.title + '. ' \
                                                                                                                                          'You can use this chat to communicate with the whole group organizing this conference, including the panel members.'

                            pprint(rocket.chat_post_message(text=textmesorg, room_id=keyroomorg).json())

                        # create room for organizers
                        if conftopass.title_extra:
                            slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title+' '+conftopass.title_extra)))
                        else:
                            slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title)))
                        #print('slug', slugtitleconfcafe)
                        crearoomcafe = rocket.groups_create(slugtitleconfcafe).json()

                        if crearoomcafe['success']:
                            # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                            contentroomcafe = rocket.groups_info(room_name=slugtitleconfcafe).json()
                            keyroomcafe = contentroomcafe['group']['_id']
                            #print('keyroomcafe', keyroomcafe)
                            pprint(rocket.groups_set_description(room_id=keyroomcafe,
                                                                 description='This is a room for the coffee breaks of the conference entitled: ' + conftopass.title + '.').json())
                            pprint(rocket.groups_set_topic(room_id=keyroomcafe, topic=conftopass.subject).json())

                            contentuser = rocket.users_info(username=request.user.username).json()
                            key = contentuser['user']['_id']
                            #print('keyo', key, keyroom)
                            #aqui

                            pprint(rocket.groups_invite(room_id=keyroomcafe, user_id=key).json())

                            # add moderators to a room
                            modocafe = rocket.groups_add_moderator(room_id=keyroomcafe, user_id=key).json()

                            #print(modo)
                            #print(modoorg)
                            #print(modocafe)
                            textmescafe = 'Welcome to the room dedicated to coffee breaks for the conference entitled: ' + conftopass.title + '. ' \
                                                                                                                                          'You can use this chat to communicate with all the participants during breaks.'

                            pprint(rocket.chat_post_message(text=textmescafe, room_id=keyroomcafe).json())



                        rocket.logout()

                    # #print("Here's your info: ")
                    ##print(list(info['channels'][1].values())[1])
                    # print(createconfinfo)
                    ##print(info.items())
                    # for j,details in enumerate(info):
                    #   #print('Channel number: '.format(j))
                    #  #print(j,details)
                    # for k, v in createconfinfo.items():
                    # print('{0}:{1}'.format(k, v))
                    ##print('yo',details.items())

                    createconflight_form = CreateConfLightForm(
                        initial={'payingatonce': conftopass.payingatonce, 'poster': conftopass.poster,
                                 'recording': conftopass.recording, 'dialin': conftopass.dialin,'submitparticipations': conftopass.submitparticipations,
                                 'daughterconfstarwars': conftopass.daughterconfstarwars,'subtomastautomatic':conftopass.subtomastautomatic,
                                 'youtuberecording': conftopass.youtuberecording,'activateqandp': conftopass.activateqandp,
                                 'whorecording': conftopass.whorecording,'coffeebreak': conftopass.coffeebreak,'coffeebreakgames': conftopass.coffeebreakgames,
                                 'messagetoall': conftopass.messagetoall, 'twitterhashtag': conftopass.twitterhashtag,'parsession': conftopass.parsession,'closing_date': conftopass.closing_date})

                    stuff_for_frontend.update({
                        'title': list(createconfinfo.values())[1],
                        'createdconf': createdconf,
                        'conftopass': conftopass,
                        'confnum': idcf,  # list(createconfinfo.values())[0]
                        'initially': "ini",
                        'createconflight_form': createconflight_form
                    })#raphi

                    print('raphi')



                    tzloc = request.session['django_timezone']
                    local = pytz.timezone(tzloc)  # pytz.timezone("America/Los_Angeles")
                    # my_date = datetime.now(local)
                    my_date = start_time  # .astimezone(local)
                    # print('start_time',start_time)
                    # print('my_date',my_date)
                    my_date = my_date + timedelta(days=0, hours=9)  # datetime.now(local)
                    # print('my_date2',my_date)
                    my_date = my_date  # .astimezone(local)#.replace(tzinfo=None)
                    # print('local',local)
                    shift = my_date - my_date.astimezone(local).replace(tzinfo=None)
                    # print('my_date3',my_date,shift,my_date+shift)
                    my_date = my_date + shift
                    # print('mydate4',my_date)
                    my_date_end = my_date + timedelta(days=0, hours=2)
                    # if(my_date.date() != my_date_end.date()):
                    #   my_date = my_date + timedelta(days=0, hours=16)
                    #  my_date_end = my_date + timedelta(days=0, hours=2)

                    my_date2 = my_date_end
                    my_date2_end = my_date2 + timedelta(days=0, hours=2)

                    # if (my_date2.date() != my_date2_end.date()):
                    #   my_date2 = my_date2 + timedelta(days=0, hours=16)
                    #  my_date2_end = my_date2 + timedelta(days=0, hours=2)

                    my_date6 = my_date2_end  # + timedelta(days=1, hours=1)
                    my_date6_end = my_date6 + timedelta(days=0, hours=1)

                    my_date3 = my_date2_end + timedelta(days=0, hours=1)
                    my_date3_end = my_date3 + timedelta(days=0, hours=3)

                    # if (my_date3.date() != my_date3_end.date()):
                    #   my_date3 = my_date3 + timedelta(days=0, hours=16)
                    #  my_date3_end = my_date3 + timedelta(days=0, hours=3)

                    my_date4 = my_date + timedelta(days=1, hours=1)
                    my_date4_end = my_date4 + timedelta(days=0, hours=5)

                    my_date5 = my_date4_end  # + timedelta(days=1, hours=1)
                    my_date5_end = my_date5 + timedelta(days=0, hours=2)

                    # if (my_date4.date() != my_date4_end.date()):
                    #   my_date4 = my_date4 + timedelta(days=0, hours=15)
                    #  my_date4_end = my_date4 + timedelta(days=0, hours=5)

                    # my_date=my_date.strftime("%Y-%m-%d %H:%M")
                    # my_date_end=my_date_end.strftime("%Y-%m-%d %H:%M")

                    # print('mydate',my_date,my_date_end)
                    # print('local', local)

                    if Schedule.objects.filter().last():
                        idnew = Schedule.objects.order_by('-id').values_list('id', flat=True)[0]
                        idnew = idnew + 1
                    else:
                        idnew = 0
                    # {key: 0, label: "Tak"},
                    # {key: 1, label: "Invited Talk"},
                    # {key: 2, label: "Discussion"},
                    # {key: 3, label: "Review"},
                    # {key: 4, label: "Poster"},
                    # {key: 5, label: "Attendance Only"}
                    # ]},
                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew,  # too large for heroku database...
                        defaults={'start_date': my_date, 'end_date': my_date_end, 'text': "First Review Talk",
                                  'speaker': "Speaker1", 'important': False, 'type': 3, 'rand': rand, 'notpart': False, # tbb
                                  'abstract': "Example for Abstract 1", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew + 1,
                        defaults={'start_date': my_date2, 'end_date': my_date2_end, 'text': "Regular Talk",
                                  'speaker': "Speaker2", 'important': False, 'type': 6, 'rand': rand,'notpart': False,
                                  'abstract': "Example for Abstract 2", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew + 2,
                        defaults={'start_date': my_date3, 'end_date': my_date3_end, 'text': "Invited Talk",
                                  'speaker': "Speaker3", 'important': False, 'type': 1, 'rand': rand,'notpart': False,
                                  'abstract': "Example for Abstract 3", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew + 3,
                        defaults={'start_date': my_date4, 'end_date': my_date4_end, 'text': "Discussion",
                                  'speaker': "Speaker4", 'important': False, 'type': 2, 'rand': rand,  'notpart': False,
                                  'abstract': "Example for Abstract 4", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew + 4,
                        defaults={'start_date': my_date5, 'end_date': my_date5_end, 'text': "Snack time",
                                  'speaker': "", 'important': False, 'type': 7, 'rand': rand,  'notpart': False,
                                  'abstract': "Snack time", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    rand = random.randint(100, 10000000)

                    obj, created = Schedule.objects.update_or_create(
                        id=idnew + 5,
                        defaults={'start_date': my_date6, 'end_date': my_date6_end, 'text': "Lunch time",
                                  'speaker': "", 'important': False, 'type': 7, 'rand': rand,  'notpart': False,
                                  'abstract': "Lunch time", 'conference': conftopass, 'user': request.user}
                        # 'start_date': '','end_date': '',
                    )

                    # print('je passe ici 1')
                else:
                    # print('[!] Request Failed')
                    createdconf2 = False
                    createdconf = False
                    stuff_for_frontend.update({
                        'title': 'Failed',  # list(info.values())[1]'',
                        'confnum': idcf,
                        'createdconf': createdconf
                    })
            stuff_for_frontend.update({
                'createconf_form': createconf_form,
                # 'createconf_form_update': createconf_form_update,
                'createdconf': createdconf,
            })

        # print('je passe ici 2')

        # objects=CreateConf.objects.filter(user=request.user).last()
        # objects=CreateConf.objects.latest('id')

        main = 0
        objects = False
        #print('conftit')
        #if request.session.get('conftit', ''):
        if request.session.get('confid', ''):

            #print('conftit')

            #if CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')):
            if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):

                objects = CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).last()
                #print('testhjklm')
            else:
                if request.user.is_superuser:
                    querysetother = RegisterConf.objects.filter()  # tbb
                    #print('tttrrezddd', querysetother)
                else:
                    querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb
                    #print('conftitr')

                querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item in
                                       querysetother.values('conference').distinct()]
                mainusers = []
                if request.user.is_superuser:
                    for i in range(len(querysetotherunique)):
                        if CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                     id=request.session.get('confid', '')):
                            objects = CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                                id=request.session.get('confid', '')).last()
                            #print('testhjklmgfdklm')
                            mainuserchosen = querysetotherunique[i].conference.user.id
                            #print('main', mainuserchosen)
                            main = 1

                else:
                    for i in range(len(querysetotherunique)):
                        #print('i', i, querysetotherunique[i].conference)
                        if UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user):
                            mainuser = UserLink.objects.filter(conference=querysetotherunique[i].conference,
                                                               user=request.user).values_list('mainuser', flat=True)[0]
                            if mainuser != request.user.id:
                                querysetotherconf = CreateConf.objects.filter(user=mainuser, id=querysetotherunique[
                                    i].conference.id).order_by('-start_date')
                                #print('rrez', i, mainuser, querysetotherconf)
                                mainusers.append(mainuser)

                    if len(mainusers) > 0:
                        for i in range(len(mainusers)):
                            if CreateConf.objects.filter(user__id=mainusers[i],
                                                         id=request.session.get('confid', '')):
                                objects = CreateConf.objects.filter(user__id=mainusers[i],
                                                                    id=request.session.get('confid', '')).last()
                                #print('testhjksdezedzlmgfdklm')
                                mainuserchosen = mainusers[i]
                                main = 1

        else:
            objects = CreateConf.objects.filter(user=request.user).last()
            #print('ya2', objects)

        if objects:
            if main == 1:
                requser = mainuserchosen
            else:
                requser = request.user.id

            if request.session.get('confid', '') and CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).exists():
                title = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'title', flat=True)[0]
                # print('ya', objects)
                # print('title', title)
                start_date = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'start_date', flat=True)[0]
                end_date = \
                    CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'end_date', flat=True)[0]

                idconf = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list('id',
                                                                                                                  flat=True)[
                    0]

                room_logo = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'room_logo', flat=True)[0]
                # print('idconf', idconf)
                # print('room', room_logo)
                todo = CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', ''))[0]
                status = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'status', flat=True)[0]
                daughter = \
                CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                    'daughterconf', flat=True)[0]
                if daughter:
                    mastconfid = \
                    CreateConf.objects.filter(user__id=requser, id=request.session.get('confid', '')).values_list(
                        'masterconfidfordaughter', flat=True)[0]
                    mastconftitle=''
                    if CreateConf.objects.filter(id=mastconfid).exists():
                        mastconftitle = CreateConf.objects.filter(id=mastconfid).values_list('title', flat=True)[0]
                        mastconfall = CreateConf.objects.filter(id=mastconfid)[0]


            else:
                title = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('title', flat=True)[0]
                start_date = \
                CreateConf.objects.filter(user=request.user).order_by('-id').values_list('start_date', flat=True)[0]
                end_date = \
                CreateConf.objects.filter(user=request.user).order_by('-id').values_list('end_date', flat=True)[0]

                # print('ya', objects)
                # print('title', title)
                idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                # print('idconf', idconf)
                room_logo = \
                CreateConf.objects.filter(user=request.user).order_by('-id').values_list('room_logo', flat=True)[0]
                # print('room2', room_logo)
                todo = CreateConf.objects.filter(user=request.user).order_by('-id')[0]
                status = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('status', flat=True)[
                    0]
                daughter = \
                CreateConf.objects.filter(user=request.user).order_by('-id').values_list('daughterconf', flat=True)[0]
                if daughter:
                    mastconfid = \
                    CreateConf.objects.filter(user=request.user).order_by('-id').values_list('masterconfidfordaughter',
                                                                                             flat=True)[0]
                    mastconftitle = ''
                    if CreateConf.objects.filter(id=mastconfid).exists():
                        mastconftitle = CreateConf.objects.filter(id=mastconfid).values_list('title', flat=True)[0]
                        mastconfall = CreateConf.objects.filter(id=mastconfid)[0]

        # conftitlecontent = []
        # for conf in objects.values():
        #   conftitlecontent.append(conf)

        if objects:
            # print('des confs des confs', objects)
            if newconf == "0" and failedbig == "0" and mastconfdontexist == 0 and alpaid == 0 and mastconfdate == 0:
                createdconf = True
            # if initially == "ini":
            #   ini="ini"
            start_date = start_date.strftime("%Y-%m-%d")

            currency = CreateConf.objects.filter(id=idconf).values_list('fee_currency', flat=True)[0]

            if currency == "US Dollars":
                curr = 'USD'
            elif currency == "GB Pounds":
                curr = 'GBP'
            else:
                curr = 'EUR'

            #print('currencyconf', currency, curr)
            # if curr != 'EUR':
            # convcost = convert_money(Money(costconfperparticipant, curr), currency)
            # print('convcost', convcost)

            # convcost = str(round(convcost.amount, 2))
            # print('convcost2', convcost)

            # convcost = convcost.split('.')[0] + '.' + convcost.split('.')[1][0:2]

            timeover = False
            if end_date < date.today():
                timeover = True

            notselected = False
            if objects.daughterconf:
                if not objects.acceptconf:
                    notselected = True

            if daughter:
                if mastconftitle:
                    stuff_for_frontend.update({
                        'mastconftitle': mastconftitle,
                        'mastconfall': mastconfall,
                    })

            if objects.masterconf:
                conf_list_session_dau = CreateConf.objects.filter(masterconfpass=objects.masterconfpass,
                                                                  daughterconf=True)
                #print('conf_lllllllllllll2', conf_list_session_dau)
                stuff_for_frontend.update({'conf_list_session_dau': conf_list_session_dau})

            if objects.masterconf and objects.payingatonce:
                # find all daughter conf+master conf and loop over
                # allconf=CreateConf.objects.filter(masterconfidfordaughter=objects.id)
                allconf = CreateConf.objects.filter(Q(masterconfidfordaughter=objects.id) | Q(id=objects.id))

                totpaid = 0.

                totuser = 0.

                for conf in allconf:
                    userpaid = RegisterConf.objects.filter(conference=conf, haspaid=True)
                    userpaidunique = [userpaid.filter(user=item['user']).first() for item in
                                      userpaid.values('user').distinct()]

                    for i in range(len(userpaidunique)):
                        #print('uni', i, userpaidunique[0].user, conf)
                        amount = Transac.objects.filter(conference=conf, user=userpaidunique[i].user,
                                                        isparticipantfee=True).values_list('amount', flat=True)[0]
                        currencypaid = Transac.objects.filter(conference=conf, user=userpaidunique[i].user,
                                                              isparticipantfee=True).values_list('currency', flat=True)[
                            0]

                        #print('ac', amount)
                        convamount = convert_money(Money(amount, currencypaid), curr)

                        totpaid = totpaid + float(round(convamount.amount, 2))
                        totuser = totuser + len(userpaidunique)
            else:
                userpaid = RegisterConf.objects.filter(conference=objects, haspaid=True)
                userpaidunique = [userpaid.filter(user=item['user']).first() for item in
                                  userpaid.values('user').distinct()]

                totpaid = 0.
                totuser = 0.
                for i in range(len(userpaidunique)):
                    amount = Transac.objects.filter(conference=objects, user=userpaidunique[i].user,
                                                    isparticipantfee=True).values_list('amount', flat=True)[0]
                    currencypaid = Transac.objects.filter(conference=objects, user=userpaidunique[i].user,
                                                          isparticipantfee=True).values_list('currency', flat=True)[0]

                    #print('a', amount)
                    convamount = convert_money(Money(amount, currencypaid), curr)

                    totpaid = totpaid + float(round(convamount.amount, 2))/100.
                    totuser = len(userpaidunique)

            #fields = ('timestart', 'timefinish', 'mineventheight')
            timestart=ProgramDesign.objects.filter(conference=objects).values_list('timestart',flat=True)[0]
            timefinish=ProgramDesign.objects.filter(conference=objects).values_list('timefinish',flat=True)[0]
            mineventheight=ProgramDesign.objects.filter(conference=objects).values_list('mineventheight',flat=True)[0]
            heighthr=ProgramDesign.objects.filter(conference=objects).values_list('heighthr',flat=True)[0]
            minieventtime = ProgramDesign.objects.filter(conference=objects).values_list('minieventtime',flat=True)[0]
            opacity = ProgramDesign.objects.filter(conference=objects).values_list('opacity',flat=True)[0]
            fastpass = CreateConf.objects.filter(id=objects.id).values_list('fastpass', flat=True)[0]

            #johnny
            tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
            if tzloc:
                local = pytz.timezone(tzloc)
            else:
                local = pytz.timezone('UTC')

            if timefinish != 24 and timestart != 0:

                utc = pytz.utc
                utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
                utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

                # yesterday = datetime.today()
                # yesterday = yesterday.replace(hour=10)
                print('utcnow', utc_now_s, utc_now_f)

                # convert to UTC
                utc_date_time_s = utc_now_s.astimezone(local)
                # get time
                utc_time_s = utc_date_time_s.time()
                timestart = utc_date_time_s.hour

                utc_date_time_f = utc_now_f.astimezone(local)
                # get time
                utc_time_f = utc_date_time_f.time()
                timefinish = utc_date_time_f.hour

                if timestart > timefinish:
                    timestart = 0
                    timefinish = 24

                print('ts2', timestart, timefinish)
            starttimeline = []
            visioo = CreateVisio.objects.filter(conference=objects, testroom=False).order_by('date')
            tzloc = request.session.get('django_timezone', 'UTC')  # request.session['django_timezone']
            local = pytz.timezone(tzloc)
            shift = visioo[0].date.astimezone(local).replace(tzinfo=None) - visioo[0].date.replace(tzinfo=None)
            for v in visioo:
                start_date_timeline = (v.date + shift).strftime("%Y-%m-%d")  # strftime("%x %X")[:-3]
                # print('r',start_date_timeline)
                starttimeline.append(start_date_timeline)

            print('s', starttimeline)

            stuff_for_frontend.update({
                'createdconf': createdconf,
                'COST_PER_PARTICIPANT': settings.COST_PER_PARTICIPANT,
                'starttimeline': starttimeline,
                'title': title,
                'fastpass':fastpass,
                'conftopass': objects,
                'confnum': idconf,
                'room_logo': room_logo,
                'background': todo.background,
                'todo': todo,
                'status': status,
                'timeover': timeover,
                'notselected': notselected,
                'initially': "notini",
                'start_date': start_date,
                'paidnum': int(totuser),
                'paidamount': totpaid,
                'mineventheight':mineventheight,
                'timestart':timestart,
                'timefinish':timefinish,
                'heighthr':heighthr,
                'minieventtime': minieventtime,
                'opacity': opacity/10.
            })

        if objects or createdconf2 == True:
            # print('je passe ici 3')
            createpeople_form = PeopleForm()
            form = ExcelPeopleForm()

            peopleaccepted = RegisterConf.objects.filter(
                Q(conference=objects, status=1) | Q(conference=objects, role=3) | Q(conference=objects,
                                                                                    socloc__in=[1, 2]))
            #print('i', peopleaccepted)
            pe = []
            for i in range(len(peopleaccepted)):
                pe.append(peopleaccepted[i].user.id)
            peopacc = User.objects.filter(id__in=pe).distinct()
            chatform = ChatForm(people=peopacc)

            if request.method == 'POST' and not request.POST.get('conf') and request.POST.get('updateconf') and not request.POST.get('progform'):

                #print('cnum', request.POST.get('confnum'))
                print('createconfup')
                createconfup = CreateConf.objects.filter(id=request.POST.get('confnum'))[0]

                oldstartdate = createconfup.start_date
                oldenddate = createconfup.end_date
                oldtitle = createconfup.title
                oldtitleextra = createconfup.title_extra
                olddescr = createconfup.abstract
                oldsub = createconfup.subject
                oldpriv = createconfup.priv
                oldcuru = createconfup.fee_currency_unique

                createconf_form_update = CreateConfForm(request.POST, data_list=subject_list)
                # print('brahh',createconf_form,createconf_form['title'])
                if createconf_form_update.is_valid():
                    # print('brahh2')
                    # users = User.objects.filter(username=request.user)
                    # createconffup = createconf_form_update.save()
                    # createconffup.user = request.user

                    createconfup.title = createconf_form_update.cleaned_data['title']

                    nbsametitle=CreateConf.objects.filter(title__icontains=createconfup.title).count()
                    print('nbsametitleup',nbsametitle)
                    if nbsametitle>0:
                        createconfup.title_extra=str(nbsametitle)

                    createconfup.abstract = createconf_form_update.cleaned_data['abstract']
                    createconfup.priv = createconf_form_update.cleaned_data['priv']
                    createconfup.justtools = createconf_form_update.cleaned_data['justtools']
                    createconfup.feeunique = createconf_form_update.cleaned_data['feeunique']
                    createconfup.fee_currency_unique = createconf_form_update.cleaned_data['fee_currency_unique']
                    createconfup.fee = createconf_form_update.cleaned_data['fee']
                    createconfup.fee_amount = createconf_form_update.cleaned_data['fee_amount']
                    createconfup.fee_currency = createconf_form_update.cleaned_data['fee_currency']
                    createconfup.fee_to_carbon = createconf_form_update.cleaned_data['fee_to_carbon']
                    createconfup.fee_variable = createconf_form_update.cleaned_data['fee_variable']
                    createconfup.size = createconf_form_update.cleaned_data['size']
                    createconfup.start_date = createconf_form_update.cleaned_data['start_date']
                    createconfup.end_date = createconf_form_update.cleaned_data['end_date']
                    createconfup.hybrid = createconf_form_update.cleaned_data['hybrid']
                    createconfup.proceedin = createconf_form_update.cleaned_data['proceedin']
                    createconfup.subject = createconf_form_update.cleaned_data['subject']

                    if oldcuru != createconfup.fee_currency_unique:
                        currency = createconfup.fee_currency_unique
                        if currency == '':
                            currency = 'EUR'
                        if currency == 'Euros':
                            currency = 'EUR'
                        if currency == 'US Dollars':
                            currency = 'USD'
                        if currency == 'GB Pounds':
                            currency = 'GBP'

                        if currency != 'EUR':
                            try:
                                convcost = convert_money(Money(settings.COST_PER_PARTICIPANT, 'EUR'), currency)

                                convcost = str(round(convcost.amount, 2))

                                convcost = convcost.split('.')[0] + '.' + convcost.split('.')[1][0:2]
                                print('convcostup', convcost)

                                createconfup.fee_amount_unique = convcost
                            except:
                                createconfup.fee_amount_unique = settings.COST_PER_PARTICIPANT
                        else:
                            createconfup.fee_amount_unique = settings.COST_PER_PARTICIPANT

                    if createconfup.priv == 'Public' and oldpriv == 'Private':
                        is_uniquee = False
                        while not is_uniquee:
                            uniquelink = ''.join(
                                random.choice(string.ascii_letters + string.digits) for _ in range(30))
                            is_uniquee = not (CreateConf.objects.filter(privpass=uniquelink).exists())
                        createconfup.privpass = uniquelink

                    if createconfup.masterconf:

                        if createconfup.masterconfpass != None:
                            #print('different', createconfup.masterconfpass)

                            payinonego = \
                            CreateConf.objects.filter(id=createconfup.id).values_list('payingatonce', flat=True)[0]
                            #print('payinonego', payinonego)
                            if payinonego:
                                # alors put same price for daughter conf
                                daugconf = CreateConf.objects.filter(masterconfpass=createconfup.masterconfpass,
                                                                     daughterconf=True)
                                if daugconf:
                                    for daug in daugconf:
                                        #print('daug', daug)
                                        CreateConf.objects.filter(id=daug.id).update(fee=createconfup.fee,
                                                                                     fee_amount=createconfup.fee_amount,
                                                                                     fee_currency=createconfup.fee_currency,
                                                                                     fee_variable=createconfup.fee_variable,
                                                                                     fee_to_carbon=createconfup.fee_to_carbon)

                                        # createconfup.fee=CreateConf.objects.filter(masterconfpass=createconfup.masterconfpass,masterconf=True).values_list('fee',flat=True)[0]
                                        # createconfup.fee_amount=CreateConf.objects.filter(masterconfpass=createconfup.masterconfpass,masterconf=True).values_list('fee_amount',flat=True)[0]
                                        # createconfup.fee_currency=CreateConf.objects.filter(masterconfpass=createconfup.masterconfpass,masterconf=True).values_list('fee_currency',flat=True)[0]

                    if ((createconfup.title != oldtitle) or (createconfup.abstract != olddescr) or (
                            createconfup.subject != oldsub)):
                        with sessions.Session() as session:
                            # log-in

                            try:
                                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                    server_url='https://chat.carbonfreeconf.com',
                                                    session=session)
                            except:
                                subject = "Nooooooooo Rocket chat what????"
                                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                emailto = []
                                emailto.append("quentin.kral@gmail.com")
                                emailto.append("carbonfreeconf@gmail.com")

                                email = EmailMessage(
                                    subject,
                                    message,
                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                    emailto,  # to
                                    # getemails,  # bcc
                                    # reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                email.content_subtype = "html"

                                #email.send(fail_silently=False)

                            #print('old',oldtitle)

                            if oldtitleextra:
                                oldslugtitleconf = slugify(str('%s' % (oldtitle+' '+oldtitleextra)))
                            else:
                                oldslugtitleconf = slugify(str('%s' % (oldtitle)))
                            #print('old2',oldslugtitleconf)

                            contentroom = rocket.groups_info(room_name=oldslugtitleconf).json()
                            pprint(contentroom)

                            if contentroom['success']:
                                keyroom = contentroom['group']['_id']

                            if oldtitleextra:
                                oldslugtitleconforg = slugify(str('%s' % ('organization of ' + oldtitle+' '+oldtitleextra)))
                            else:
                                oldslugtitleconforg = slugify(str('%s' % ('organization of ' + oldtitle)))

                            contentroomorg = rocket.groups_info(room_name=oldslugtitleconforg).json()
                            if contentroomorg['success']:
                                keyroomorg = contentroomorg['group']['_id']

                            if oldtitleextra:
                                oldslugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' +oldtitle+' '+oldtitleextra)))
                            else:
                                oldslugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + oldtitle)))

                            contentroomcafe = rocket.groups_info(room_name=oldslugtitleconfcafe).json()
                            if contentroomcafe['success']:

                                keyroomcafe = contentroomcafe['group']['_id']

                            if createconfup.title != oldtitle:
                                if createconfup.title_extra:
                                    slugtitleconf = slugify(str('%s' % (createconfup.title+' '+createconfup.title_extra)))
                                    slugtitleconforg = slugify(str('%s' % ('organization of ' + createconfup.title+' '+createconfup.title_extra)))
                                    slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + createconfup.title+' '+createconfup.title_extra)))

                                else:
                                    slugtitleconf = slugify(str('%s' % (createconfup.title)))
                                    slugtitleconforg = slugify(str('%s' % ('organization of ' + createconfup.title)))
                                    slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + createconfup.title)))

                                # inaya
                                #print('slug', slugtitleconf, oldslugtitleconf)
                                pprint(rocket.groups_rename(room_id=keyroom, name=slugtitleconf).json())
                                pprint(rocket.groups_rename(room_id=keyroomorg, name=slugtitleconforg).json())
                                pprint(rocket.groups_rename(room_id=keyroomcafe, name=slugtitleconfcafe).json())
                                pprint(rocket.groups_set_description(room_id=keyroomorg,
                                                                     description='This is a room dedicated to the organizers of the conference entitled: ' + createconfup.title + '.').json())
                                pprint(rocket.groups_set_description(room_id=keyroomcafe,
                                                                     description='This is a room for the coffee breaks of the conference entitled: ' + createconfup.title + '.').json())

                            # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                            # contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                            # keyroom = contentroom['group']['_id']
                            # print('keyroom', keyroom)
                            if createconfup.abstract != olddescr:
                                pprint(rocket.groups_set_description(room_id=keyroom,
                                                                     description=createconfup.abstract).json())

                            if createconfup.subject != oldsub:
                                pprint(rocket.groups_set_topic(room_id=keyroom, topic=createconfup.subject).json())
                                pprint(rocket.groups_set_topic(room_id=keyroomorg, topic=createconfup.subject).json())
                                pprint(rocket.groups_set_topic(room_id=keyroomcafe, topic=createconfup.subject).json())

                            rocket.logout()



                    gooddaughter = 0
                    if createconfup.daughterconf:

                        start_date_mast = \
                        CreateConf.objects.filter(id=createconfup.masterconfidfordaughter).values_list('start_date',
                                                                                                       flat=True)[0]
                        end_date_mast = \
                        CreateConf.objects.filter(id=createconfup.masterconfidfordaughter).values_list('end_date',
                                                                                                       flat=True)[0]
                        print('aqui')
                        if ((createconfup.start_date >= start_date_mast) and (
                                createconfup.end_date <= end_date_mast) and (
                                createconfup.start_date <= end_date_mast) and (
                                createconfup.end_date >= start_date_mast)):
                            gooddaughter = 0
                        else:
                            gooddaughter = 1

                    if gooddaughter == 0:
                        createconfup.save()
                        request.session['confid'] = createconfup.id

                        #print('brahhty saved')
                        start_date = createconf_form_update.cleaned_data['start_date'].strftime("%Y-%m-%d")

                        objsaved = CreateConf.objects.filter(id=request.POST.get('confnum'))[0]
                        stuff_for_frontend.update({
                            'title': createconf_form_update.cleaned_data['title'],
                            'conftopass': objsaved,
                            'start_date': start_date
                        })

                        if oldenddate != createconfup.end_date or oldstartdate != createconfup.start_date:
                            start_time = datetime.combine(createconfup.start_date, datetime.min.time())

                            start_time_str = start_time.strftime("%Y-%m-%d %H:%M")

                            # start_time=datetime.strptime(createconff.start_date,'%m/%d/%y')#put midnight local time for now
                            # print('start', start_time_str)

                            # add timezone to data for bigmarker when it is sorted
                            # how many days?

                            timeover = False
                            if createconfup.end_date < date.today():
                                timeover = True

                            stuff_for_frontend.update({
                                'timeover': timeover,
                            })

                            visioold = CreateVisio.objects.filter(conference=objsaved, testroom=False)

                            oldnumberdays = len(visioold)
                            #print('oldnumberdays', oldnumberdays)
                            getdiffstartdates = createconfup.start_date - oldstartdate
                            #print('getdiff', getdiffstartdates)

                            getnumberofdays = abs(createconfup.end_date - createconfup.start_date).days + 1
                            # print('nb days', getnumberofdays, createconff.start_date, createconff.end_date)

                            # before deleting, need to gather what was copied before and add it back to new conf
                            # get slides
                            slides = RegisterConf.objects.filter(conference=objsaved, status=1).exclude(
                                slides__isnull=True).exclude(slides='')
                            slidesvid = RegisterConf.objects.filter(conference=objsaved, status=1).exclude(
                                mp4_url__isnull=True).exclude(mp4_url='')

                            dataadd = []
                            dataadd2 = []
                            for sl in slides:
                                dataadd.append(sl.slides.url)

                            for slv in slidesvid:
                                dataadd2.append(slv.mp4_url)

                            visio = CreateVisio.objects.filter(conference=objsaved, testroom=False)

                            for vis in visio:
                                if createconfup.roomtype == "Big Marker":
                                    delconfinfo = utils.delconffunc(vis.idconf)  # mila
                                else:
                                    gettaskid = CreateVisio.objects.filter(idconf=vis.idconf).values_list('celery_task_id_fin',
                                                                                              flat=True)[0]
                                    if 'ON_HEROKU' in os.environ:

                                        app.control.revoke(gettaskid, terminate=True)

                                    delconfinfo = utils.delconffunczoom(vis.idconf)  # mila

                                # delconfinfo = utils.delconffunc(vis.idconf)  # mila
                                vis.delete()

                            # if oldnumberdays>
                            idconfs = []
                            dateday = []
                            passzoom = []
                            starturlzoom = []
                            joinurlzoom = []
                            idconfs2 = []
                            passzoom2 = []
                            starturlzoom2 = []
                            joinurlzoom2 = []

                            for i in range(getnumberofdays):
                                start_time2 = datetime.combine(createconfup.start_date,
                                                               datetime.min.time()) + timedelta(
                                    hours=23, minutes=59, days=i)
                                start_time2_str = start_time2.strftime("%Y-%m-%d %H:%M")
                                tzloc = request.session['django_timezone']
                                local = pytz.timezone(tzloc)
                                shift = start_time2.astimezone(local).replace(tzinfo=None) - start_time2.replace(
                                    tzinfo=None)

                                dateday.append(start_time2 - shift)
                                if createconfup.roomtype == "Big Marker":
                                    data = {"channel_id": CHANNEL_ID, "title": createconfup.title,
                                            "start_time": start_time2_str,
                                            "review_emails": False,
                                            "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                            "send_reminder_emails_to_presenters": False,
                                            "registration_conf_emails": False, "send_cancellation_email": False,
                                            "show_reviews": False, "privacy": "private",
                                            "who_can_watch_recording": "channel_admin_only",
                                            "review_emails": False,
                                            "auto_invite_all_channel_members": False,
                                            "registration_required_to_view_recording": False}

                                    data = json.dumps(data)
                                    # print('dat', data)
                                    createconfinfo = utils.createconffunc(data)
                                else:
                                    alphabet = string.ascii_letters + string.digits
                                    passwordzoom = ''.join(secrets.choice(alphabet) for ij in range(7))
                                    start_time2_strz = start_time2.strftime("%Y-%m-%dT%H:%M:%SZ")
                                    passzoom.append(passwordzoom)

                                    alphabet2 = string.ascii_letters + string.digits
                                    passwordzoom2 = ''.join(secrets.choice(alphabet2) for ij in range(7))
                                    passzoom2.append(passwordzoom2)

                                    #print('starttimezoom', start_time2_str, start_time2_strz, '2020-12-07T11:00:00Z')
                                    # duration
                                    data = {"topic": createconfup.title, "type": 2,
                                            "start_time": start_time2_strz, "duration": "30",
                                            "password": passwordzoom, "agenda": createconfup.title, "timezone": "UTC",
                                            "settings": {"host_video": True, "participant_video": True,
                                                         "hd_video": True, "waiting_room": False,
                                                         "join_before_host": True,
                                                         "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                         "approval_type": "2", "audio": "both",
                                                         "auto_recording": "none",
                                                         "meeting_authentification": False,
                                                         "registrants_email_notification": False}}

                                    datacoffeebreak = {"topic": 'Coffee break room for: '+createconfup.title, "type": 2,
                                            "start_time": start_time2_strz, "duration": "30",
                                            "password": passwordzoom2, "agenda": 'Coffee break room for: '+createconfup.title, "timezone": "UTC",
                                            "settings": {"host_video": True, "participant_video": True,
                                                         "hd_video": True, "waiting_room": False,
                                                         "join_before_host": True,
                                                         "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                         "approval_type": "2", "audio": "both",
                                                         "auto_recording": "none",
                                                         "meeting_authentification": False,
                                                         "registrants_email_notification": False}}

                                    # data = {"title": createconff.title,
                                    #        "start_time": start_time2_str,
                                    #        "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                    #        }

                                    data = json.dumps(data)
                                    # print('dat', data)
                                    createconfinfo = utils.createconffunczoom(data)

                                    datacoffeebreak = json.dumps(datacoffeebreak)
                                    # print('dat', data)
                                    createconfinfocoffeebreak = utils.createconffunczoom(datacoffeebreak)

                                if createconfinfo:
                                    idconfs.append(createconfinfo['id'])
                                    starturlzoom.append(createconfinfo['start_url'])
                                    joinurlzoom.append(createconfinfo['join_url'])

                                else:
                                    print('oopsie')

                                if createconfinfocoffeebreak:
                                    idconfs2.append(createconfinfocoffeebreak['id'])
                                    starturlzoom2.append(createconfinfocoffeebreak['start_url'])
                                    joinurlzoom2.append(createconfinfocoffeebreak['join_url'])

                                else:
                                    print('oopsiecoffeebreak')

                            for i in range(getnumberofdays):

                                if createconfup.roomtype == "Big Marker":
                                    visio, visiocrea = CreateVisio.objects.get_or_create(conference=objsaved,
                                                                                         date=dateday[i],
                                                                                         idconf=idconfs[i], duration=1,
                                                                                         defaults={})
                                else:
                                    if 'ON_HEROKU' in os.environ:

                                        taskfin=finishzoomsession.apply_async((idconfs[i],),eta=dateday[i]+timedelta(hours=1))
                                        taskidl=taskfin.task_id
                                        taskfin2 = finishzoomsession.apply_async((idconfs2[i],), eta=dateday[i]+timedelta(hours=1))
                                        taskidl2 = taskfin2.task_id
                                        #print('taskidfin', taskfin.task_id)

                                    else:
                                        taskidl=""
                                        taskidl2=""

                                    #taskfin = finishzoomsession.apply_async((idconfs[i],), eta=dateday[i])



                                    #revoke(gettaskid, terminate=True)
                                    #print('taskidfin', taskfin.task_id)

                                    visio, visiocrea = CreateVisio.objects.get_or_create(conference=objsaved,
                                                                                         date=dateday[i],
                                                                                         passzoom=passzoom[i],
                                                                                         idconf=idconfs[i],
                                                                                         starturlzoom=starturlzoom[i],
                                                                                         joinurlzoom=joinurlzoom[i],
                                                                                         duration=1,
                                                                                         celery_task_id_fin=taskidl,
                                                                                         passzoomcb=passzoom2[i],
                                                                                         idconfcb=idconfs2[i],
                                                                                         starturlzoomcb=starturlzoom2[i],
                                                                                         joinurlzoomcb=joinurlzoom2[i],
                                                                                         celery_task_id_fin_cb=taskidl2,
                                                                                         defaults={})

                                visio.save()

                            sch = Schedule.objects.filter(conference=objsaved)
                            for sc in sch:
                                #print('sc', sc.text, sc.start_date, sc.end_date)
                                sc.start_date = sc.start_date + timedelta(days=getdiffstartdates.days)
                                sc.end_date = sc.end_date + timedelta(days=getdiffstartdates.days)
                                sc.save()

                            # data = {"file_url": regtalk2.slides.url}
                            #print('datat', dataadd, len(dataadd))
                            visio2 = CreateVisio.objects.filter(conference=objsaved, testroom=False)

                            if objsaved.roomtype == "Big Marker":

                                # for i in range(len(dataadd)):
                                for sl in slides:

                                    dataadduno = {"file_url": sl.slides.url}
                                    #print('dataf', dataadduno)

                                    dataaddun = json.dumps(dataadduno)
                                    #print('data', dataaddun)
                                    sliid = []
                                    for vis in visio2:
                                        addslidesinf2 = utils.addslidesfunc(dataaddun, vis.idconf)
                                        #print('ire', addslidesinf2)
                                        sliid.append(addslidesinf2['id'])

                                    sl.slidesid = str(sliid)
                                    sl.save()

                                for slv in slidesvid:

                                    dataaddunov = {"file_url": slv.mp4_url}
                                    #print('datafv', dataaddunov)

                                    dataaddunv = json.dumps(dataaddunov)
                                    #print('datav', dataaddunv)
                                    sliidv = []
                                    for vis in visio2:
                                        addslidesinf2v = utils.addslidesfunc(dataaddunv, vis.idconf)
                                        #print('irev', addslidesinf2v)
                                        if addslidesinf2v:
                                            sliidv.append(addslidesinf2v['id'])

                                    slv.recid = str(sliidv)
                                    slv.save()


                    else:
                        # message pas bonne dates
                        messages.error(request,
                                       'The dates were not modified because they do not fit in between the dates set-up for the master conference.',
                                       extra_tags='dates')

                    # conff.privacy = createconflight_form.cleaned_data['privacy']  # change field

                    createconf_form_update = CreateConfForm(
                        initial={'title': createconfup.title, 'abstract': createconfup.abstract,
                                 'priv': createconfup.priv,'justtools': createconfup.justtools, 'feeunique': createconfup.feeunique,'fee_currency_unique': createconfup.fee_currency_unique, 'fee': createconfup.fee,
                                 'fee_amount': createconfup.fee_amount, 'fee_currency': createconfup.fee_currency,
                                 'fee_to_carbon': createconfup.fee_to_carbon,'fee_variable': createconfup.fee_variable, 'size': createconfup.size,
                                 'start_date': createconfup.start_date, 'end_date': createconfup.end_date,'hybrid': createconfup.hybrid,
                                 'proceedin': createconfup.proceedin, 'subject': createconfup.subject},
                        data_list=subject_list)

                    # regtalk_form = RegisterConfForm(
                    #   initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography})

                    stuff_for_frontend.update({
                        'createconf_form_update': createconf_form_update,
                        # 'createdconf': createdconf,
                    })

                else:
                    #print('brahhty')
                    print(createconf_form_update.errors)

            else:
                if request.session.get('confid', ''):
                    confup = CreateConf.objects.filter(user__id=requser,
                                                       id=request.session.get('confid', ''))[0]
                    # print('idff',idcf)
                else:
                    confup = CreateConf.objects.filter(user=request.user).order_by('-id')[0]

                createconf_form_update = CreateConfForm(
                    initial={'title': confup.title, 'abstract': confup.abstract, 'priv': confup.priv, 'justtools': confup.justtools, 'feeunique': confup.feeunique, 'fee': confup.fee,
                             'fee_amount': confup.fee_amount, 'fee_currency': confup.fee_currency, 'fee_currency_unique': confup.fee_currency_unique,
                             'fee_to_carbon': confup.fee_to_carbon,'fee_variable': confup.fee_variable, 'size': confup.size,
                             'start_date': confup.start_date, 'end_date': confup.end_date,'hybrid': confup.hybrid,
                             'proceedin': confup.proceedin, 'subject': confup.subject}, data_list=subject_list)

                # regtalk_form = RegisterConfForm(
                #   initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography})

                stuff_for_frontend.update({
                    'createconf_form_update': createconf_form_update,
                    # 'createdconf': createdconf,
                })
            if request.method == 'POST' and request.POST.get('savedconf') and not request.POST.get('conf') and not request.POST.get('updateconf') and not request.POST.get('progform'):
                createconflight_form = CreateConfLightForm(request.POST)

                # print('iciiii')
                if createconflight_form.is_valid():
                    # print('iciiii222',request.session.get('conftit', ''))
                    if request.session.get('confid', ''):
                        idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=requser,
                                #                         title=request.session.get('conftit', '')).values_list('id',flat=True)[0]
                    else:
                        idcf = \
                            CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    conff = CreateConf.objects.get(id=idcf)
                    # print('rrrr',idcf,conff,CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True))
                    conff.poster = createconflight_form.cleaned_data['poster']  # change field
                    conff.payingatonce = createconflight_form.cleaned_data['payingatonce']  # change field
                    conff.dialin = createconflight_form.cleaned_data['dialin']  # change field
                    conff.submitparticipations = createconflight_form.cleaned_data['submitparticipations']  # change field
                    conff.daughterconfstarwars = createconflight_form.cleaned_data['daughterconfstarwars']  # change field
                    conff.subtomastautomatic = createconflight_form.cleaned_data['subtomastautomatic']  # change field
                    conff.recording = createconflight_form.cleaned_data['recording']  # change field
                    conff.youtuberecording = createconflight_form.cleaned_data['youtuberecording']  # change field
                    conff.whorecording = createconflight_form.cleaned_data['whorecording']  # change field
                    conff.twitterhashtag = createconflight_form.cleaned_data['twitterhashtag']  # change field
                    conff.parsession = createconflight_form.cleaned_data['parsession']  # change field
                    conff.closing_date = createconflight_form.cleaned_data['closing_date']  # change field
                    conff.activateqandp = createconflight_form.cleaned_data['activateqandp']  # change field
                    conff.coffeebreak = createconflight_form.cleaned_data['coffeebreak']  # change field
                    conff.coffeebreakgames = createconflight_form.cleaned_data['coffeebreakgames']  # change field


                    # conff.room_logo = createconflight_form.cleaned_data['room_logo']  # change field
                    if 'room_logo' in request.FILES:
                        # print('found it')
                        conff.room_logo = request.FILES['room_logo']
                    if 'background' in request.FILES:
                        # print('found it')
                        conff.background = request.FILES['background']

                    if conff.room_logo:
                        logor = conff.room_logo
                        stuff_for_frontend.update({
                            'logor': logor,
                        })
                    if conff.background:
                        logob = conff.background
                        stuff_for_frontend.update({
                            'logob': logob,
                        })

                    conff.messagetoall = createconflight_form.cleaned_data['messagetoall']  # change field

                    if conff.masterconf:
                        if conff.masterconfpass != None:
                            #print('different', conff.masterconfpass)
                            if CreateConf.objects.filter(masterconfpass=conff.masterconfpass,
                                                                 daughterconf=True).exists():
                                daugconf = CreateConf.objects.filter(masterconfpass=conff.masterconfpass,
                                                                 daughterconf=True)

                                for d in daugconf:
                                    print('closing_date')
                                    d.closing_date=conff.closing_date

                                    d.daughterconfstarwars=conff.daughterconfstarwars
                                    d.subtomastautomatic=conff.subtomastautomatic


                                    d.save()

                            # payinonego=CreateConf.objects.filter(id=createconfup.id).values_list('payingatonce',flat=True)[0]
                            # print('payinonego',payinonego)
                            if conff.payingatonce:
                                # alors put same price for daughter conf

                                if CreateConf.objects.filter(masterconfpass=conff.masterconfpass,
                                                             daughterconf=True).exists():
                                    for daug in daugconf:
                                        #print('daug', daug)
                                        CreateConf.objects.filter(id=daug.id).update(fee=conff.fee,
                                                                                     fee_amount=conff.fee_amount,
                                                                                     fee_currency=conff.fee_currency,
                                                                                     fee_variable=conff.fee_variable,
                                                                                     fee_to_carbon=conff.fee_to_carbon)

                    conff.save()  # this will update only
                    # createconflight_form = CreateConfLightForm(initial={'privacy': 'Public','recording':'No','dialin':'No','youtuberecording':'No','whorecording':'Everyone'})
                    conflight = 1
                    #print('kil')
                    if Website.objects.filter(conference=conff):
                        web = Website.objects.get(conference=conff)
                        #print('kil1')

                        website_form = WebsiteForm(
                            initial={'titleurl': web.titleurl,'showprogram': web.showprogram,'showdoc': web.showdoc, 'homecontent': web.homecontent,
                                     'rationale': web.rationale, 'guidelines': web.guidelines,
                                     'onlypprogram': web.onlypprogram, 'onlypabstract': web.onlypabstract,
                                     'onlypposter': web.onlypposter,'onlypdoc': web.onlypdoc, 'color_background': web.color_background,
                                     'color_text': web.color_text, 'color_men': web.color_men, 'share': web.share})
                        
                        if web.hero:
                            print('web.hero.id',web.hero.id)
                            stuff_for_frontend.update({
                                'heroidselected': web.hero.id,
                            })
                    else:
                        website_form = WebsiteForm()

                        print('kil2')

                    stuff_for_frontend.update({
                        'conftopass': conff,
                        'website_form': website_form
                    })
                    objects=conff

                else:
                    print(createconflight_form.errors)
            else:
                # print('joejk',request.session.get('conftit', ''))
                if request.session.get('confid', ''):
                    #print('quent',request.session.get('conftit', ''),requser)
                    idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=requser, title=request.session.get('conftit', '')).values_list(
                        #'id', flat=True)[0]
                    # print('idff',idcf)
                else:
                    idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    # print('idff2',idcf)

                conff = CreateConf.objects.get(id=idcf)

                #print('avant', conff.whorecording, conff.payingatonce, conff.twitterhashtag)
                createconflight_form = CreateConfLightForm(
                    initial={'payingatonce': conff.payingatonce, 'poster': conff.poster, 'recording': conff.recording,
                             'dialin': conff.dialin, 'submitparticipations':conff.submitparticipations, 'daughterconfstarwars':conff.daughterconfstarwars,
                             'subtomastautomatic':conff.subtomastautomatic,'coffeebreakgames': conff.coffeebreakgames,'coffeebreak': conff.coffeebreak,'youtuberecording': conff.youtuberecording,
                             'whorecording': conff.whorecording, 'messagetoall': conff.messagetoall,'activateqandp':conff.activateqandp,
                             'twitterhashtag': conff.twitterhashtag,'parsession': conff.parsession,'closing_date': conff.closing_date})
                #print('apres')
                stuff_for_frontend.update({
                    'conftopass': conff
                })

            stuff_for_frontend.update({
                'createconflight_form': createconflight_form,
            })

            #print('raghj')
            # for conf in objects:
            #   #print(conf)

            #print('nhjkfndkjgndfjlgndl')

            if objects.activateqandp:#helene
                p=[]
                qp_choices=[]
                qp_choices_len=[]
                qp_votetot=[]
                qp_votetotal=[]
                qp_voteper = []
                qp_max = []

                if CreatePoll.objects.filter(conference_id=objects.id).exists():
                    polls=True
                    p=CreatePoll.objects.filter(conference_id=objects.id).order_by('created')
                    for po in p:
                        #print('i',po.question)
                        choices = ChoicePoll.objects.filter(poll=po).order_by('created')
                        choice = []
                        idch = []
                        voteschoices = []
                        sumvotes = 0
                        for ch in choices:
                            choice.append(ch.choice_text)
                            idch.append(int(ch.id))
                            voteschoices.append(ch.votes.count())
                            sumvotes += ch.votes.count()

                        #qp_idq.append(idch)

                        qp_choices.append(choice)
                        qp_choices_len.append(len(choice))
                        qp_votetot.append(voteschoices)
                        qp_votetotal.append(sumvotes)

                        voteschoicesper = [0.] * len(voteschoices)
                        for i in range(len(voteschoices)):
                            if sumvotes != 0.:
                                voteschoicesper[i] = round(voteschoices[i] / sumvotes * 100, 2)

                        qp_voteper.append(voteschoicesper)
                        m = max(voteschoices)
                        maxi = [ig for ig, jg in enumerate(voteschoices) if jg == m]
                        # print('m',m,maxi)
                        qpmaxper = ['0'] * len(voteschoices)
                        for i in range(len(voteschoices)):
                            if i in maxi:
                                qpmaxper[i] = '1'
                            else:
                                qpmaxper[i] = '0'

                        qp_max.append(qpmaxper)

                else:
                    #no polls
                    polls=False

                q=[]
                voteq=[]
                if CreateQuestion.objects.filter(conference_id=objects.id).exists():
                    questions=True
                    q=CreateQuestion.objects.filter(conference_id=objects.id).order_by('created')
                    for qu in q:
                        voteq.append(qu.votes.count())
                        #print('i',qu.question)
                else:
                    #no polls
                    questions=False

                stuff_for_frontend.update({
                    'p': p,
                    'polls':polls,
                    'qp_choices': qp_choices,
                    'qp_choices_len': qp_choices_len,
                    'qp_votetot': qp_votetot,
                    'qp_votetotal': qp_votetotal,
                    'qp_voteper': qp_voteper,
                    'qp_max': qp_max,
                    'q':q,
                    'voteq':voteq,
                    'questions':questions,
                })

            if objects.recording:
                #print('visio', objects.id)  # inayu
                if objects.masterconf:
                    visio = CreateVisio.objects.filter(conference__masterconfpass=objects.masterconfpass, testroom=False)
                else:
                    visio = CreateVisio.objects.filter(conference_id=objects.id, testroom=False)

                # getnumberofdays = abs(end - start).days + 1
                mp4downloadurl = []
                url = []
                dateday = []
                start = []
                end = []
                tabid = []
                tabnum = []
                titles = []
                session = []
                redvimurl2 = []

                #print('len', len(visio))
                passla = 0
                visiotest = 0
                lentot = 0
                for i in range(len(visio)):
                    #print('nopi', i)
                    idconf = visio[i].idconf
                    idrec = visio[i].recidconf
                    mp4 = visio[i].mp4_url
                    starte = visio[i].recstart
                    ende = visio[i].recend

                    if visio[i].vimeo_url:
                        #print('nopiz', i, visio[i].vimeo_url, mp4)

                        visiotest = 1
                        # mp4new = mp4.replace('[', '').replace(']', '').replace("'","")
                        # arr = mp4new.split(',')
                        #print('ici check', visio[i].vimeo_url)
                        vimurl2 = visio[i].vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                        arr2 = vimurl2.split(',')

                        #print('arr2',arr2)

                        startnew = starte.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arrs = startnew.split(',')
                        endnew = ende.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arre = endnew.split(',')

                        #print('mp4,idrec,idconf', mp4, idrec, idconf)
                        #print('arre,arrs', arre, arrs, starte, startnew)
                        lentot = lentot + len(arr2)
                        if visio[i].rectitles:
                            text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'",
                                                                                                 "")  # .replace(" ","")
                            titles2 = text2.split(',')
                            print('tr', titles2)
                            for k in range(len(titles2)):
                                titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'"))
                                # print('tit',titles)
                        elif not visio[i].rectitles and titles:
                            print('fd', visio[i].id)
                            for k in range(len(arr2)):
                                titles.append('')
                        else:
                            titles = [''] * lentot
                            print('ik')

                        '''    
                        if visio[i].rectitles:
                            text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'",
                                                                                                 "")  # .replace(" ","")
                            titles2 = text2.split(',')
                            for k in range(len(titles2)):
                                titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'"))
                        else:
                            titles = [''] * lentot
                        '''

                        for ij in range(len(arr2)):

                            if arr2[ij]:
                                redvimurl = arr2[ij].split('/')[2]
                                #print('redvim', redvimurl)
                                mp4_url = "https://vimeo.com/" + redvimurl
                                vim_play_url = "https://player.vimeo.com/video/" + redvimurl

                            dated = visio[i].date.strftime("%d-%m-%Y")  # https://player.vimeo.com/video/438127510
                            # gerer la front end car la on en passe qu'un
                            if idconf:
                                # api_url, headers = utils.connection('conferences/3e889798e61c')
                                # print('iiiii',idconf)
                                if idrec:
                                    # print('recording',idrec)
                                    # url.append('https://www.bigmarker.com/recordings/'+str(idrec)+'?width=400&height=600')
                                    url.append(vim_play_url)
                                    redvimurl2.append(redvimurl)
                                    session.append(visio[i].conference.title)
                                    tabid.append(idconf)  # json_list = simplejson.dumps(list)
                                    tabnum.append(str(ij))
                                    start.append(parse_datetime(arrs[ij]))
                                    end.append(parse_datetime(arre[ij]))
                                    #print('tab', tabid, tabnum)
                                    #print('ola', parse_datetime(arrs[ij]), parse_datetime(arre[ij]))
                                    #print('start', arrs[ij], arre[ij])
                                    # start.append(datetime.strptime(arrs[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())
                                    # end.append(datetime.strptime(arre[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())

                                    # end.append(arre[ij])
                                    mp4downloadurl.append(mp4_url)
                                    ##print('gg',info['conference']['title'])
                                    title = objects.title  # info['conference']['title']
                                    dateday.append(dated)
                                    #start_time = start_date  # info['conference']['start_time']
                                    # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                                    # start_time = start_time.strftime("%d %B %Y at %H:%M")
                                    status = '0'
                                    

                                    #response = client.get('/me')  # ,params={"fields": "uri"})
                                    #print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                                    # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                                    #response = client.get('/videos/' + redvimurl, params={"fields": "uri,status"})
                                    # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                                    #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                    #print('ffnkjv', response.json()['status'])

                                    passla = 1
                                    #videostatus = response.json()['status']

                                # from django.utils import simplejson
                                #print('lasttab', tabid, tabnum, url, start, end, videostatus, titles)
                                # videostatus='avalaible'#finished
                                stuff_for_frontend.update({
                                    'status': status,
                                    'archiveurl': url,
                                    'redvimurl2':redvimurl2,
                                    'sessiontit': session,
                                    'tabid': tabid,  # json.dumps(tab),
                                    'tabnum': tabnum,
                                    'mp4downloadurl': mp4downloadurl,
                                    'start_time': dateday,
                                    'createvisioid': visio[0].id,
                                    'title': title,
                                    'titles': titles,
                                    #'videostatus': videostatus,
                                    'start': start,
                                    'end': end
                                })



                            elif mp4 and not idrec and passla == 0:
                                #print('hjjk')
                                #print('mp4,idrec,idconf2', mp4, idrec, idconf)

                                # from celery.result import AsyncResult
                                # res = AsyncResult(x.task_id)
                                # res.ready()
                                # print('res', res, res.status, res.state)

                                stuff_for_frontend.update({
                                    'status': '2c',
                                    'title': objects.title,
                                    'createvisioid': visio[i].id
                                })
                            elif passla == 0:
                                #print('rrr')
                                if status != '2b':
                                    # print('pourtant0')
                                    stuff_for_frontend.update({
                                        'status': '2',
                                        'title': objects.title
                                    })
                            else:
                                #print('pourtant')
                                stuff_for_frontend.update({
                                    'status': '3',
                                    'title': objects.title
                                })


                    else:

                        if mp4:

                            visiotest = 1

                            #print('ah I see 5')

                            stuff_for_frontend.update({

                                'status': '2c',

                                'createvisioid': visio[i].id,

                                'title': objects.title

                            })

                        else:

                            #print('right')

                            if visiotest == 0:
                                #print('ah I see 2')

                                stuff_for_frontend.update({

                                    'status': '2',

                                    'createvisioid': visio[i].id,

                                    'title': objects.title

                                })
                    #print('url', url, i, len(visio))
                    if url and i == len(visio) - 1:
                        # url=
                        # session
                        # start
                        # myList = [1, 2, 3, 100, 5]
                        # asorted = sorted(range(len(start)), key=start.__getitem__)

                        B = sorted(range(len(start)), key=lambda x: start[x])
                        asorted = sorted(range(len(start)), key=lambda x: B[x])

                        # print('indices',C)
                        #print('myl', asorted)
                        #print('start1', start)
                        # url = url[asorted]
                        url = [x for _, x in sorted(zip(asorted, url))]
                        session = [x for _, x in sorted(zip(asorted, session))]
                        redvimurl2 = [x for _, x in sorted(zip(asorted, redvimurl2))]
                        #print('end', end)
                        # print('zip(asorted, end)',list(zip(asorted, end)))
                        # print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                        # qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                        # les end sont pas bons de base, verifiez pk
                        # end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                        end = [x for y, x in sorted(zip(asorted, end))]

                        titles = [x for _, x in sorted(zip(asorted, titles))]

                        tabid = [x for _, x in sorted(zip(asorted, tabid))]
                        tabnum = [x for _, x in sorted(zip(asorted, tabnum))]

                        # sorted_arr2 = arr2[arr1inds[::-1]]
                        #print('url', url)
                        #print('session', session)
                        #print('end', end)
                        #print('titles', titles)
                        #print('tabid', tabid)
                        #print('tabnum', tabnum)

                        start.sort()

                        # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                        #print('start2', start)
                        stuff_for_frontend.update({
                            'archiveurl': url,
                            'redvimurl2':redvimurl2,
                            'sessiontit': session,
                            'titles': titles,
                            'tabid': tabid,
                            'tabnum': tabnum,
                            # 'videostatus': videostatus,
                            'start': start,
                            'end': end
                        })
            from django.db.models.functions import Lower

            #milaya
            sortmeth = Lower('lastname')

            sortmeth2 = Lower('user__last_name')
            '''
            if sorting:
                if sorting=='dated':
                    sortmeth2 = '-created'
                    print('date sorting d')
                elif sorting=='dateu':
                    sortmeth2 = 'created'
                    print('date sorting u')
                elif sorting=='type':
                    print('type sorting')
                    sortmeth2 = 'type'
                elif sorting == 'status':
                    print('status sorting')
                    sortmeth2 = 'status'
                else:
                    print('other')
            '''
            firstnames = People.objects.filter(conference=objects).order_by(sortmeth).values_list('firstname', flat=True)
            lastnames = People.objects.filter(conference=objects).order_by(sortmeth).values_list('lastname', flat=True)
            emails = People.objects.filter(conference=objects).order_by(sortmeth).values_list('email', flat=True)
            #print('****************************************************', firstnames, lastnames, objects)
            liststatus = []
            listnumber = []
            listnumber2 = []
            listnumberu = 0
            listsoc = []
            listrole = []
            listupdated = []
            listp = []
            listt = []
            listi = []
            listr = []
            listd = []
            listtype = []
            listdate = []
            instt=0
            instdate=datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)
            emails2=[]

            for em in emails:
                # print('em',em)
                if User.objects.filter(email__iexact=em):
                    userr = User.objects.filter(email__iexact=em)[0]
                    #print('userrrrrrrrrrrrrrrrrrrrr', userr, objects,
                          #RegisterConf.objects.filter(user=userr, conference=objects))
                    if RegisterConf.objects.filter(user=userr, conference=objects):
                        #print('que')
                        instance = RegisterConf.objects.filter(user=userr, conference=objects)
                        #print('in',instance[0].title,instance[0].status,instance[0].type)
                        save = '0'
                        nb = 0
                        nb2 = 0
                        nbu = 0
                        nbt=0
                        nbi=0
                        nbr=0
                        nbd=0
                        nbp=0
                        updated = '0'
                        instt = instance[0].type
                        instdate = instance[0].created
                        for i in range(len(instance)):
                            # print('inst',instance)

                            if instance[i].status == 1:
                                save = '1'  # liststatus.append('0')
                                nb = nb + 1
                            if instance[i].status == 0:
                                nb2 = nb2 + 1
                            if instance[i].type == 4:#poster
                                nbp+=1
                            if instance[i].type == 1 or instance[i].type == 2 or instance[i].type == 3 or instance[i].type == 6:  # talk
                                nbt+=1
                                print('j',nbt)
                            if instance[i].type == 1:  # invited talk
                                nbi+=1
                                print('ji',nbi)
                            if instance[i].type == 2:  # discussion
                                nbd+=1
                                print('jd',nbd)
                            if instance[i].type == 3:  # review talk
                                nbr += 1
                                print('jr', nbr)
                            #if UserUpdateL.objects.filter(user=request.user, conference=objects).exists():
                            if not UserUpdateL.objects.filter(user=request.user, conference=objects).exists():
                                updated = '1'
                                nbu = nbu + 1
                                listnumberu += 1
                            elif instance[i].updated > UserUpdateL.objects.filter(user=request.user, conference=objects).values_list('lastlogintimepanel',flat=True)[0]:
                                updated = '1'
                                nbu=nbu+1
                                listnumberu+=1

                            #(6, "Talk"),
                            #(1, "Invited Talk"),
                            #(2, "Discussion"),
                            #(3, "Review"),
                            #(4, "Poster"),
                            #(5, "Attendance only"),
                            if instance[i].type != 5:
                                instt=instance[i].type
                                instdate=instance[i].created
                            # elif instance[i].status==1:
                            # liststatus.append('1')
                            # else:
                            # liststatus.append('2')
                        liststatus.append(save)
                        listp.append(nbp)
                        listt.append(nbt)
                        listi.append(nbi)
                        listr.append(nbr)
                        listd.append(nbd)
                        listnumber.append(nb)
                        listnumber2.append(nb2)
                        listupdated.append(updated)
                        #listnumberu.append(nbu)
                        listtype.append(instt)
                        listdate.append(instdate)
                        listsoc.append(str(instance[0].socloc))
                        listrole.append(str(instance[0].role))

                    else:
                        listtype.append(0)
                        listdate.append(datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc))
                        liststatus.append('3')
                        listnumber.append(0)
                        listp.append(0)
                        listt.append(0)
                        listi.append(0)
                        listr.append(0)
                        listd.append(0)
                        listnumber2.append(0)
                        listupdated.append('0')
                        listsoc.append('9')
                        listrole.append('9')

                else:
                    listtype.append(0)
                    listdate.append(datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc))
                    liststatus.append('3')
                    listnumber.append(0)
                    listp.append(0)
                    listt.append(0)
                    listi.append(0)
                    listr.append(0)
                    listd.append(0)
                    listnumber2.append(0)
                    listupdated.append('0')
                    listsoc.append('9')
                    listrole.append('9')

            notsorting=0
            if sorting:
                if sorting=='dateu':
                    print('date sorting2 u')
                    BB = sorted(range(len(listdate)), key=lambda x: listdate[x])
                    asorted = sorted(range(len(listdate)), key=lambda x: BB[x])
                elif sorting == 'dated':
                    print('date sorting2 d')
                    BB = sorted(range(len(listdate)), reverse=True, key=lambda x: listdate[x])
                    asorted = sorted(range(len(listdate)), key=lambda x: BB[x])

                elif sorting=='typeu':

                    print('type sorting2 u')
                    BB = sorted(range(len(listtype)), key=lambda x: listtype[x])
                    asorted = sorted(range(len(listtype)), key=lambda x: BB[x])

                elif sorting=='typed':

                    print('type sorting2 d')
                    BB = sorted(range(len(listtype)), reverse=True, key=lambda x: listtype[x])
                    asorted = sorted(range(len(listtype)), key=lambda x: BB[x])

                elif sorting == 'statusu':
                    print('status sorting2 u')

                    #print('status',liststatus)
                    BB = sorted(range(len(liststatus)), key=lambda x: liststatus[x])
                    asorted = sorted(range(len(liststatus)), key=lambda x: BB[x])

                elif sorting == 'statusd':
                    print('status sorting2 d')

                    # print('status',liststatus)
                    BB = sorted(range(len(liststatus)), reverse=True, key=lambda x: liststatus[x])
                    asorted = sorted(range(len(liststatus)), key=lambda x: BB[x])

                elif sorting == 'named':
                    print('status sorting2 d')

                    # print('status',liststatus)
                    BB = sorted(range(len(lastnames)), reverse=True, key=lambda x: lastnames[x].lower())
                    asorted = sorted(range(len(lastnames)), key=lambda x: BB[x])

                    #urll = [x for _, x in sorted(zip(asorted, urll), reverse=True)]

                    #print('status2',liststatus)

                else:
                    print('other2')
                    notsorting=1

                if notsorting==0:
                    liststatus = [x for _, x in sorted(zip(asorted, liststatus))]
                    listp = [x for _, x in sorted(zip(asorted, listp))]
                    listt = [x for _, x in sorted(zip(asorted, listt))]
                    listi = [x for _, x in sorted(zip(asorted, listi))]
                    listr = [x for _, x in sorted(zip(asorted, listr))]
                    listd = [x for _, x in sorted(zip(asorted, listd))]
                    listnumber = [x for _, x in sorted(zip(asorted, listnumber))]
                    listnumber2 = [x for _, x in sorted(zip(asorted, listnumber2))]
                    listupdated = [x for _, x in sorted(zip(asorted, listupdated))]
                    listsoc = [x for _, x in sorted(zip(asorted, listsoc))]
                    listrole = [x for _, x in sorted(zip(asorted, listrole))]
                    firstnames = [x for _, x in sorted(zip(asorted, firstnames))]
                    lastnames = [x for _, x in sorted(zip(asorted, lastnames))]
                    emails = [x for _, x in sorted(zip(asorted, emails))]




            # print('list',liststatus)
            # print('je passe ici',firstnames,listrole)
            peoplefirstnameslength=[]
            nperpage=100
            if firstnames:
                firstnames = list(firstnames)
                # print('firstnames',firstnames[0])
                lastnames = list(lastnames)
                emails = list(emails)
                emails2 = list(emails)

                peoplefirstnameslength = len(firstnames)

                # paginator = Paginator(firstnames, 10)
                page = request.GET.get('page', 1)

                print('page', page)

                paginator = Paginator(firstnames, nperpage)

                try:
                    firstnames = paginator.page(page)
                except PageNotAnInteger:
                    firstnames = paginator.page(1)
                except EmptyPage:
                    firstnames = paginator.page(paginator.num_pages)

                paginator = Paginator(lastnames, nperpage)

                try:
                    lastnames = paginator.page(page)
                except PageNotAnInteger:
                    lastnames = paginator.page(1)
                except EmptyPage:
                    lastnames = paginator.page(paginator.num_pages)

                paginator = Paginator(emails, nperpage)

                try:
                    emails = paginator.page(page)
                except PageNotAnInteger:
                    emails = paginator.page(1)
                except EmptyPage:
                    emails = paginator.page(paginator.num_pages)

                paginator = Paginator(liststatus, nperpage)

                try:
                    liststatus = paginator.page(page)
                except PageNotAnInteger:
                    liststatus = paginator.page(1)
                except EmptyPage:
                    liststatus = paginator.page(paginator.num_pages)

                paginator = Paginator(listp, nperpage)

                try:
                    listp = paginator.page(page)
                except PageNotAnInteger:
                    listp = paginator.page(1)
                except EmptyPage:
                    listp = paginator.page(paginator.num_pages)

                paginator = Paginator(listt, nperpage)

                try:
                    listt = paginator.page(page)
                except PageNotAnInteger:
                    listt = paginator.page(1)
                except EmptyPage:
                    listt = paginator.page(paginator.num_pages)

                paginator = Paginator(listi, nperpage)

                try:
                    listi = paginator.page(page)
                except PageNotAnInteger:
                    listi = paginator.page(1)
                except EmptyPage:
                    listi = paginator.page(paginator.num_pages)

                paginator = Paginator(listr, nperpage)

                try:
                    listr = paginator.page(page)
                except PageNotAnInteger:
                    listr = paginator.page(1)
                except EmptyPage:
                    listr = paginator.page(paginator.num_pages)

                paginator = Paginator(listd, nperpage)

                try:
                    listd = paginator.page(page)
                except PageNotAnInteger:
                    listd = paginator.page(1)
                except EmptyPage:
                    listd = paginator.page(paginator.num_pages)

                paginator = Paginator(listnumber, nperpage)

                try:
                    listnumber = paginator.page(page)
                except PageNotAnInteger:
                    listnumber = paginator.page(1)
                except EmptyPage:
                    listnumber = paginator.page(paginator.num_pages)

                paginator = Paginator(listnumber2, nperpage)

                try:
                    listnumber2 = paginator.page(page)
                except PageNotAnInteger:
                    listnumber2 = paginator.page(1)
                except EmptyPage:
                    listnumber2 = paginator.page(paginator.num_pages)
            # get people that subscribed but not invited

                paginator = Paginator(listupdated, nperpage)

                try:
                    listupdated = paginator.page(page)
                except PageNotAnInteger:
                    listupdated = paginator.page(1)
                except EmptyPage:
                    listupdated = paginator.page(paginator.num_pages)

                paginator = Paginator(listsoc, nperpage)

                try:
                    listsoc = paginator.page(page)
                except PageNotAnInteger:
                    listsoc = paginator.page(1)
                except EmptyPage:
                    listsoc = paginator.page(paginator.num_pages)

                paginator = Paginator(listrole, nperpage)

                try:
                    listrole = paginator.page(page)
                except PageNotAnInteger:
                    listrole = paginator.page(1)
                except EmptyPage:
                    listrole = paginator.page(paginator.num_pages)

            liststatussub = []
            listpsub = []
            listtsub = []
            listisub = []
            listrsub = []
            listdsub = []
            listnumbersub = []
            listnumbersub2 = []
            listnumbersubu = 0
            listupdatedsub = []
            listsocsub = []
            listrolesub = []
            listtypesub = []
            listdatesub = []
            listnamessub = []
            subpeopleunique = []
            subpeopleftf = []
            subpeopleftfunique = []
            subpeoplenotftf = []
            subpeoplenotftfunique = []
            instt2 = 0
            instdate2 = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)

            # print('quuu',objects,RegisterConf.objects.filter(conference=objects))
            if RegisterConf.objects.filter(conference=objects):
                if objects.hybrid:
                    subpeopleftf = RegisterConf.objects.filter(conference=objects,status=1,facetoface=True)
                    # print('subpeople',subpeople)
                    # print('rt',subpeople.values('user').order_by().distinct())
                    # subpeople=RegisterConf.objects.filter(conference=objects).exclude(user__email__in=emails)
                    subpeopleftfunique = [subpeopleftf.filter(user=item['user']).first() for item in
                                       subpeopleftf.values('user').distinct()]
                    emailftf=[]
                    for sub in subpeopleftfunique:
                        emailftf.append(sub.user.email)
                    #print('emailftf',emailftf)
                    #print('subpeopleftfunique',subpeopleftfunique)
                    subpeoplenotftf = RegisterConf.objects.filter(conference=objects, status=1, facetoface=False).exclude(user__email__in=emailftf)
                    #print('subpeoplenotftf',subpeoplenotftf)
                    # print('rt',subpeople.values('user').order_by().distinct())
                    # subpeople=RegisterConf.objects.filter(conference=objects).exclude(user__email__in=emails)
                    subpeoplenotftfunique = [subpeoplenotftf.filter(user=item['user']).first() for item in
                                          subpeoplenotftf.values('user').distinct()]
                # print('objjjj',objects)
                lookup = Q()
                for em in emails2:
                    lookup |= Q(user__email__iexact=em)
                print('so',sortmeth2)
                subpeople = RegisterConf.objects.filter(conference=objects).exclude(lookup).order_by(sortmeth2)
                #print('subpeople',subpeople)
                #print('rt',subpeople.values('user').order_by().distinct())
                #subpeople=RegisterConf.objects.filter(conference=objects).exclude(user__email__in=emails)
                subpeopleunique = [subpeople.filter(user=item['user']).first() for item in
                                   subpeople.values('user').distinct()]
                #print('subpeopleunique',subpeopleunique)

                if subpeopleunique:
                    for i in range(len(subpeopleunique)):
                        save = "0"
                        nb = 0
                        nb2 = 0
                        nbu = 0
                        nbp=0
                        nbt=0
                        nbi=0
                        nbd=0
                        nbr=0
                        updated = '0'
                        lookup2 = Q()
                        for em in emails2:
                            lookup2 |= Q(user__email__iexact=em)
                        ta = RegisterConf.objects.filter(conference=objects, user=subpeopleunique[i].user).exclude(
                            lookup2)
                        # ta=RegisterConf.objects.filter(conference=objects,user=subpeopleunique[i].user).exclude(user__email__in=emails)
                        instt2 = ta[0].type
                        instdate2 = ta[0].created
                        for j in range(len(ta)):
                            print('created',ta[j].created)

                            if ta[j].status == 1:
                                save = '1'  # liststatus.append('0')
                                nb = nb + 1
                            if ta[j].status == 0:
                                nb2 = nb2 + 1
                            if ta[j].type == 4:#poster
                                nbp+=1
                            if ta[j].type == 1 or ta[j].type == 2 or ta[j].type == 3 or ta[j].type == 6:  # talk
                                nbt+=1
                            if ta[j].type == 1:  # invited talk
                                nbi+=1
                                #print('ji',nbi)
                            if ta[j].type == 2:  # discussion
                                nbd+=1
                                #print('jd',nbd)
                            if ta[j].type == 3:  # review talk
                                nbr += 1
                                #print('jr', nbr)
                            if not UserUpdateL.objects.filter(user=request.user, conference=objects).exists():
                                updated = '1'
                                nbu = nbu + 1
                                listnumbersubu += 1

                            elif ta[j].updated > UserUpdateL.objects.filter(user=request.user, conference=objects).values_list('lastlogintimepanel',flat=True)[0]:
                                updated = '1'
                                nbu=nbu+1
                                listnumbersubu+=1

                            if ta[j].type != 5:
                                instt2=ta[j].type
                                instdate2=ta[j].created

                        listtypesub.append(instt2)
                        listdatesub.append(instdate2)
                        listnamessub.append(ta[0].user.last_name)

                        liststatussub.append(save)
                        listpsub.append(nbp)
                        listtsub.append(nbt)
                        listisub.append(nbi)
                        listrsub.append(nbr)
                        listdsub.append(nbd)
                        listupdatedsub.append(updated)
                        listsocsub.append(str(ta[0].socloc))
                        listrolesub.append(str(ta[0].role))
                        listnumbersub.append(nb)
                        listnumbersub2.append(nb2)
                        #listnumbersubu.append(nbu)

                    # else:
                    #   liststatussub.append('3')
                    #  listnumbersub.append(0)
            notsortingb = 0
            if sorting:
                if sorting == 'dateu':
                    print('date sorting2 u')
                    BB = sorted(range(len(listdatesub)), key=lambda x: listdatesub[x])
                    asorted = sorted(range(len(listdatesub)), key=lambda x: BB[x])
                elif sorting == 'dated':
                    print('date sorting2 d')
                    BB = sorted(range(len(listdatesub)), reverse=True, key=lambda x: listdatesub[x])
                    asorted = sorted(range(len(listdatesub)), key=lambda x: BB[x])

                elif sorting == 'typeu':

                    print('type sorting2 u')
                    BB = sorted(range(len(listtypesub)), key=lambda x: listtypesub[x])
                    asorted = sorted(range(len(listtypesub)), key=lambda x: BB[x])

                elif sorting == 'typed':

                    print('type sorting2 d')
                    BB = sorted(range(len(listtypesub)), reverse=True, key=lambda x: listtypesub[x])
                    asorted = sorted(range(len(listtypesub)), key=lambda x: BB[x])

                elif sorting == 'statusu':
                    print('status sorting2 u')

                    # print('status',liststatus)
                    BB = sorted(range(len(liststatussub)), key=lambda x: liststatussub[x])
                    asorted = sorted(range(len(liststatussub)), key=lambda x: BB[x])

                elif sorting == 'statusd':
                    print('status sorting2 d')

                    # print('status',liststatus)
                    BB = sorted(range(len(liststatussub)), reverse=True, key=lambda x: liststatussub[x])
                    asorted = sorted(range(len(liststatussub)), key=lambda x: BB[x])

                    # urll = [x for _, x in sorted(zip(asorted, urll), reverse=True)]

                    # print('status2',liststatus)
                elif sorting == 'named':
                    print('status sorting2 d name')

                    print('listnamessub',listnamessub)
                    BB = sorted(range(len(listnamessub)), reverse=True, key=lambda x: listnamessub[x].lower())
                    asorted = sorted(range(len(listnamessub)), key=lambda x: BB[x])
                    print('BB',BB)
                    print('asorted',asorted)

                else:
                    print('other2')
                    notsortingb = 1

                if notsortingb == 0:

                    liststatussub = [x for _, x in sorted(zip(asorted, liststatussub))]
                    listpsub = [x for _, x in sorted(zip(asorted, listpsub))]
                    listtsub = [x for _, x in sorted(zip(asorted, listtsub))]
                    listisub = [x for _, x in sorted(zip(asorted, listisub))]
                    listrsub = [x for _, x in sorted(zip(asorted, listrsub))]
                    listdsub = [x for _, x in sorted(zip(asorted, listdsub))]
                    listnumbersub = [x for _, x in sorted(zip(asorted, listnumbersub))]
                    listnumbersub2 = [x for _, x in sorted(zip(asorted, listnumbersub2))]
                    listupdatedsub = [x for _, x in sorted(zip(asorted, listupdatedsub))]
                    listsocsub = [x for _, x in sorted(zip(asorted, listsocsub))]
                    listrolesub = [x for _, x in sorted(zip(asorted, listrolesub))]
                    subpeopleunique = [x for _, x in sorted(zip(asorted, subpeopleunique))]

            nperpage2=100

            #paginator = Paginator(firstnames, 10)
            page2 = request.GET.get('page2', 1)

            print('subpeopleunique',subpeopleunique)

            subpeoplelength=len(subpeopleunique)

            paginator2 = Paginator(subpeopleunique, nperpage2)

            try:
                subpeopleunique = paginator2.page(page2)
            except PageNotAnInteger:
                subpeopleunique = paginator2.page(1)
            except EmptyPage:
                subpeopleunique = paginator2.page(paginator2.num_pages)

            print('rth',paginator2.num_pages)

            paginator2 = Paginator(liststatussub, nperpage2)

            try:
                liststatussub = paginator2.page(page2)
            except PageNotAnInteger:
                liststatussub = paginator2.page(1)
            except EmptyPage:
                liststatussub = paginator2.page(paginator2.num_pages)


            paginator2 = Paginator(listpsub, nperpage2)

            try:
                listpsub = paginator2.page(page2)
            except PageNotAnInteger:
                listpsub = paginator2.page(1)
            except EmptyPage:
                listpsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listtsub, nperpage2)

            try:
                listtsub = paginator2.page(page2)
            except PageNotAnInteger:
                listtsub = paginator2.page(1)
            except EmptyPage:
                listtsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listisub, nperpage2)

            try:
                listisub = paginator2.page(page2)
            except PageNotAnInteger:
                listisub = paginator2.page(1)
            except EmptyPage:
                listisub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listrsub, nperpage2)

            try:
                listrsub = paginator2.page(page2)
            except PageNotAnInteger:
                listrsub = paginator2.page(1)
            except EmptyPage:
                listrsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listdsub, nperpage2)

            try:
                listdsub = paginator2.page(page2)
            except PageNotAnInteger:
                listdsub = paginator2.page(1)
            except EmptyPage:
                listdsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listnumbersub, nperpage2)

            try:
                listnumbersub = paginator2.page(page2)
            except PageNotAnInteger:
                listnumbersub = paginator2.page(1)
            except EmptyPage:
                listnumbersub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listnumbersub2, nperpage2)

            try:
                listnumbersub2 = paginator2.page(page2)
            except PageNotAnInteger:
                listnumbersub2 = paginator2.page(1)
            except EmptyPage:
                listnumbersub2 = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listupdatedsub, nperpage2)

            try:
                listupdatedsub = paginator2.page(page2)
            except PageNotAnInteger:
                listupdatedsub = paginator2.page(1)
            except EmptyPage:
                listupdatedsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listsocsub, nperpage2)

            try:
                listsocsub = paginator2.page(page2)
            except PageNotAnInteger:
                listsocsub = paginator2.page(1)
            except EmptyPage:
                listsocsub = paginator2.page(paginator2.num_pages)

            paginator2 = Paginator(listrolesub, nperpage2)

            try:
                listrolesub = paginator2.page(page2)
            except PageNotAnInteger:
                listrolesub = paginator2.page(1)
            except EmptyPage:
                listrolesub = paginator2.page(paginator2.num_pages)
            # peopleadded = People.objects.filter(conference=objects[0])
            # peopleadded = People.objects.get(conference=objects[0])


            ##print('so',peopleadded[0:1].firstname)
            # for k in range(len(peopleadded)):
            #   #print('peopleya',peopleadded[k].firstname)

            stuff_for_frontend.update({
                'peoplefirstnames': firstnames,
                'peoplelastnames': lastnames,
                'peopleemails': emails,
                'subpeople': subpeopleunique,
                'subpeoplelength':subpeoplelength,
                'subpeopleftflength': len(subpeopleftfunique),
                'subpeoplenotftflength': len(subpeoplenotftfunique),
                'peoplefirstnameslength':peoplefirstnameslength,
                'liststatus': liststatus,
                'listp': listp,
                'listt': listt,
                'listi': listi,
                'listr': listr,
                'listd': listd,
                'listnumber': listnumber,
                'listnumber2': listnumber2,
                'listnumberu': listnumberu,
                'listupdated': listupdated,
                'listsoc': listsoc,
                'listrole': listrole,
                'liststatussub': liststatussub,
                'listpsub': listpsub,
                'listtsub': listtsub,
                'listisub': listisub,
                'listrsub': listrsub,
                'listdsub': listdsub,
                'listnumbersub': listnumbersub,
                'listnumbersub2': listnumbersub2,
                'listnumbersubu': listnumbersubu,
                'listupdatedsub': listupdatedsub,
                'listrolesub': listrolesub,
                'listsocsub': listsocsub
            })

            if objects.masterconf:
            # make zoom links
                visio = CreateVisio.objects.filter(
                    Q(conference__masterconfpass=objects.masterconfpass, conference__acceptconf=True,
                      testroom=False) | Q(conference__masterconfpass=objects.masterconfpass, conference__masterconf=True,
                                          testroom=False)).order_by('date')
                print('visio', visio)
            else:
                visio = CreateVisio.objects.filter(conference=objects,testroom=False).order_by('date')
                print('visio2', visio)

            #hostacc = []
            #if visio:
            #    headers = {'authorization': 'Bearer %s' % utils.generateToken(),
            #               'content-type': 'application/json'}

            #    conn = http.client.HTTPSConnection("api.zoom.us")

            #for v in visio:
            #    if v.idconf:
            #        conn.request("GET", "/v2/meetings/" + str(v.idconf), headers=headers)

            #        res = conn.getresponse()
            #        data = res.read()
            #        print('decode', data.decode("utf-8"))
            #        print('status', res.status)

            #        if res.status == 200:
            #            hoste = json.loads(data)['host_email']
            #            hostacc.append(hoste)

            stuff_for_frontend.update({'visiozoom': visio})


            chatcrea = False
            print('ok')
            if request.method == 'POST' and not request.POST.get('conf') and not request.POST.get('updateconf') and not request.POST.get('progform'):
                print('ok2')
                chat_form = ChatForm(request.POST, people=peopacc)
                print('ok3')
                if chat_form.is_valid():
                    if request.session.get('confid', ''):
                        idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=requser,
                                                         #title=request.session.get('conftit', '')).values_list('id',flat=True)[0]

                    #    print('ko', requser, request.session.get('conftit', ''), idcf, request.user)
                    else:
                        idcf = \
                        CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]

                    # createconff = createconf_form.save(commit=False)
                    # createconff.user = request.user

                    conftopasss = CreateConf.objects.filter(id=idcf)[0]
                    #print('tit', conftopasss.title)

                    chattit = chat_form.cleaned_data['titleg']  # change field
                    #print('chattit', chattit)
                    chatdesc = chat_form.cleaned_data['description']  # change field
                    #print('chatdesc', chatdesc)
                    chattopic = chat_form.cleaned_data['topic']  # change field
                    #print('chattopic', chattopic)
                    # chatpeop = chat_form.cleaned_data['people1']  # change field
                    people_var = request.POST  # .getlist('checks')
                    #print('peoplevar', people_var, len(people_var))
                    nbpeop = len(people_var) - 4
                    # peopacc
                    with sessions.Session() as session:

                        try:
                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                server_url='https://chat.carbonfreeconf.com',
                                                session=session)
                        except:
                            subject = "Nooooooooo Rocket chat what????"
                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                            emailto = []
                            emailto.append("quentin.kral@gmail.com")
                            emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            #email.send(fail_silently=False)

                        # create room for participants
                        if conftopasss.title_extra:
                            slugtitleconf = slugify(str('%s' % (conftopasss.title + '-' + chattit+' '+conftopasss.title_extra)))
                        else:
                            slugtitleconf = slugify(str('%s' % (conftopasss.title + '-' + chattit)))
                        #print('slug', slugtitleconf)
                        creagroup = rocket.groups_create(slugtitleconf).json()

                        if creagroup['success'] == True:

                            # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                            contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                            keyroom = contentroom['group']['_id']
                            #print('keyroom', keyroom)
                            pprint(rocket.groups_set_description(room_id=keyroom, description=chatdesc).json())
                            pprint(rocket.groups_set_topic(room_id=keyroom, topic=chattopic).json())

                            contentuser = rocket.users_info(username=request.user.username).json()
                            key = contentuser['user']['_id']
                            #print('keyo', key, keyroom)

                            pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())

                            # add moderators to a room
                            modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
                            #print(modo)

                            # loop to add users
                            chatusernames=[]
                            for i in range(len(peopacc)):
                                chatpeop = chat_form.cleaned_data[peopacc[i].username]
                                #print('chatpeop', chatpeop, i)
                                if chatpeop:
                                    chatusernames.append(peopacc[i].username)
                                    contentuser = rocket.users_info(username=peopacc[i].username).json()
                                    key2 = contentuser['user']['_id']
                                    #print('keyoooo', key2, keyroom, peopacc[i].username)

                                    pprint(rocket.groups_invite(room_id=keyroom, user_id=key2).json())

                            #print('chatusernames',chatusernames)
                            canal, createdcanal = ChatCanal.objects.get_or_create(titleg=chattit,
                                                                                  defaults={'conference': conftopasss,
                                                                                            'user': request.user,
                                                                                            'description': chatdesc,
                                                                                            'topic': chattopic,
                                                                                            'people': chatusernames})

                            messages.success(request,
                                             'The new group was created. If you want to modify it at a later point, go to the chat room settings.',
                                             extra_tags='csuc')

                        else:
                            # channel exists
                            messages.error(request,
                                           'The new group was not created because it already exists. If you want to modify it go to the chat room settings.',
                                           extra_tags='chat')
                        rocket.logout()

                    chatcrea = True

                else:
                    print(chat_form.errors)

            webcrea = False
            if request.method == 'POST' and request.POST.get('progform'):
                program_form = ProgramForm(request.POST)
                print('requweb', request.POST)
                if program_form.is_valid():
                    if request.session.get('confid', ''):
                        idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=requser,
                                                         #title=request.session.get('conftit', '')).values_list('id',flat=True)[0]

                        # print('ko', requser, request.session.get('conftit', ''), idcf, request.user)
                    else:
                        idcf = \
                            CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]

                    # createconff = createconf_form.save(commit=False)
                    # createconff.user = request.user

                    conftopasss = CreateConf.objects.filter(id=idcf)[0]
                    # print('tit', conftopasss.title)
                    pr, createdpr = ProgramDesign.objects.get_or_create(conference__id=idcf,
                                                                    defaults={})

                    tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
                    if tzloc:
                        local = pytz.timezone(tzloc)
                    else:
                        local = pytz.timezone('UTC')

                    pr.timestart = program_form.cleaned_data['timestart']  # change field
                    pr.timefinish = program_form.cleaned_data['timefinish']  # change field
                    pr.mineventheight = program_form.cleaned_data['mineventheight']  # change field
                    pr.heighthr = program_form.cleaned_data['heighthr']  # change field
                    pr.minieventtime = program_form.cleaned_data['minieventtime']  # change field
                    pr.opacity = program_form.cleaned_data['opacity']  # change field

                    #ts=datetime.time(10, 0)
                    #print('ts',ts)
                    #tf = datetime.time(20, 0)
                    #print('tf', tf)

                    #time_zone = pytz.timezone('Asia/Kolkata')

                    if int(pr.timestart)!=0 and int(pr.timefinish)!=24:
                        utc = pytz.utc
                        utc_now_s = datetime.now(tz=local).replace(hour=int(pr.timestart))
                        utc_now_f = datetime.now(tz=local).replace(hour=int(pr.timefinish))

                        #yesterday = datetime.today()
                        #yesterday = yesterday.replace(hour=10)
                        print('utcnow',utc_now_s,utc_now_f)


                        # convert to UTC
                        utc_date_time_s = utc_now_s.astimezone(pytz.utc)
                        # get time
                        utc_time_s = utc_date_time_s.time()
                        pr.timestart = utc_date_time_s.hour

                        utc_date_time_f = utc_now_f.astimezone(pytz.utc)
                        # get time
                        utc_time_f = utc_date_time_f.time()
                        pr.timefinish = utc_date_time_f.hour

                        #print(date_time)
                        #print(utc_date_time)
                        #print(utc_time,utc_date_time_s.hour)
                        print('r',pr.timestart,pr.timefinish)
                        #pr.start_time = datetime.time(pr.timestart, 0, 0)
                        #pr.end_time = datetime.time(pr.timestart, 0, 0)

                    pr.save()  # this will update only
                    #webcrea = True
                    stuff_for_frontend.update({
                        'mineventheight': pr.mineventheight,
                        'timestart': program_form.cleaned_data['timestart'],
                        'timefinish': program_form.cleaned_data['timefinish'],
                        'heighthr':pr.heighthr,
                        'minieventtime': pr.minieventtime,
                        'opacity': int(pr.opacity)/10.
                    })

                else:
                    #print('ah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllolah okllol')
                    print(program_form.errors)
            else:
                print('ok4')
                if request.session.get('confid', ''):
                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user__id=requser, title=request.session.get('conftit', '')).values_list(
                        #'id', flat=True)[0]
                    # print('idff',idcf)
                else:
                    idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    # print('idff2',idcf)

                conftopasss = CreateConf.objects.filter(id=idcf)[0]

                if ProgramDesign.objects.filter(conference=conftopasss):
                    prog = ProgramDesign.objects.get(conference=conftopasss)
                    # johnny
                    tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
                    if tzloc:
                        local = pytz.timezone(tzloc)
                    else:
                        local = pytz.timezone('UTC')

                    if timefinish != 24 and timestart != 0:

                        utc = pytz.utc
                        utc_now_s = datetime.now(tz=utc).replace(hour=prog.timestart)
                        utc_now_f = datetime.now(tz=utc).replace(hour=prog.timefinish)

                        # yesterday = datetime.today()
                        # yesterday = yesterday.replace(hour=10)
                        #print('utcnow', utc_now_s, utc_now_f)

                        # convert to UTC
                        utc_date_time_s = utc_now_s.astimezone(local)
                        # get time
                        utc_time_s = utc_date_time_s.time()
                        timestart = utc_date_time_s.hour

                        utc_date_time_f = utc_now_f.astimezone(local)
                        # get time
                        utc_time_f = utc_date_time_f.time()
                        timefinish = utc_date_time_f.hour

                        if timestart > timefinish:
                            timestart = 0
                            timefinish = 24

                        #print('ts2', timestart, timefinish)

                    program_form = ProgramForm(initial={'timestart': timestart, 'timefinish': timefinish,
                                                        'mineventheight': prog.mineventheight,
                                                        'heighthr': prog.heighthr, 'minieventtime': prog.minieventtime,
                                                        'opacity': prog.opacity})
                else:
                    program_form = ProgramForm()

            if request.method == 'POST' and not request.POST.get('conf') and not request.POST.get('updateconf') and not request.POST.get('progform') and not request.POST.get('savedconf'):
                website_form = WebsiteForm(request.POST)
                print('requweb2', request.POST)
                #test to get image in hidden field
                
                if website_form.is_valid():
                    if request.session.get('confid', ''):
                        idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=requser,
                                                         #title=request.session.get('conftit', '')).values_list('id',flat=True)[0]

                                                         
                        #print('ko', requser, request.session.get('conftit', ''), idcf, request.user)
                    else:
                        idcf = \
                            CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]

                    # createconff = createconf_form.save(commit=False)
                    # createconff.user = request.user

                    conftopasss = CreateConf.objects.filter(id=idcf)[0]
                    #print('tit', conftopasss.title)
                    web, createdweb = Website.objects.get_or_create(conference__id=idcf,
                                                                    defaults={'conference': conftopasss,'user': request.user})#,'slug':conftopasss.title})

                    
                    heroid=request.POST.get('heroid')
                    print('herodddddd',heroid)
                    if heroid != '0':
                        getheroim = HeroPicture.objects.filter(id=heroid)[0]
                        web.hero=getheroim
                        stuff_for_frontend.update({
                            'heroidselected': web.hero.id,
                        })
                    else:
                        web.hero=None

                    if  website_form.cleaned_data['titleurl']:
                        web.titleurl = website_form.cleaned_data['titleurl'].lower()  # change field
                    print('lower')
                    web.showprogram = website_form.cleaned_data['showprogram']  # change field
                    web.showdoc = website_form.cleaned_data['showdoc']  # change field
                    web.onlypprogram = website_form.cleaned_data['onlypprogram']  # change field
                    web.onlypabstract = website_form.cleaned_data['onlypabstract']  # change field
                    web.onlypposter = website_form.cleaned_data['onlypposter']  # change field
                    web.onlypdoc = website_form.cleaned_data['onlypdoc']  # change field
                    web.homecontent = website_form.cleaned_data['homecontent']  # change field
                    web.rationale = website_form.cleaned_data['rationale']  # change field
                    web.guidelines = website_form.cleaned_data['guidelines']
                    web.color_background = website_form.cleaned_data['color_background']
                    web.color_text = website_form.cleaned_data['color_text']
                    web.color_men = website_form.cleaned_data['color_men']
                    web.share = website_form.cleaned_data['share']  # change field

                    web.save()  # this will update only
                    webcrea = True

                else:
                    print(website_form.errors)
            else:
                print('ok6')
                if request.session.get('confid', ''):
                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user__id=requser, title=request.session.get('conftit', '')).values_list(
                    #    'id', flat=True)[0]
                    # print('idff',idcf)
                else:
                    idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    # print('idff2',idcf)

                conftopasss = CreateConf.objects.filter(id=idcf)[0]
                #print('kil3',conftopasss)
                if Website.objects.filter(conference=conftopasss):
                    #print('kil4', conftopasss)
                    web = Website.objects.get(conference=conftopasss)
                    website_form = WebsiteForm(initial={'titleurl': web.titleurl,'showprogram': web.showprogram,'showdoc': web.showdoc, 'homecontent': web.homecontent,
                                                        'rationale': web.rationale, 'guidelines': web.guidelines,
                                                        'onlypprogram':web.onlypprogram, 'onlypabstract':web.onlypabstract,
                                                        'onlypposter':web.onlypposter,'onlypdoc':web.onlypdoc,'color_background': web.color_background,
                                                        'color_text': web.color_text, 'color_men': web.color_men, 'share': web.share})
                    webcrea = True
                    if web.hero:
                        print('web.hero.id2',web.hero.id)
                        stuff_for_frontend.update({
                                'heroidselected': web.hero.id,
                        })
                else:
                    website_form = WebsiteForm()




            # get start_time for every day to pass to bigmarker
            if Schedule.objects.filter(conference=objects,notpart=False):
                getstartdate = \
                Schedule.objects.filter(conference=objects,notpart=False).order_by('start_date').values_list('start_date', flat=True)[
                    0]
                getenddate = \
                Schedule.objects.filter(conference=objects,notpart=False).order_by('-end_date').values_list('end_date', flat=True)[0]
                # print('start,end',getstartdate,getenddate)
                # utc = utctime.replace(tzinfo=pytz.UTC)
                tzloc = request.session.get('django_timezone', 'UTC')
                local = pytz.timezone(tzloc)
                shift = getstartdate.astimezone(local).replace(tzinfo=None) - getstartdate.replace(tzinfo=None)
                # print('shift',shift)
                getstartdate = getstartdate.astimezone(local)  # .replace(tzinfo=None)
                getenddate = getenddate.astimezone(local)  # .replace(tzinfo=None)
                # print('start,end2',getstartdate,getenddate)

                getnumberofdays = abs(getenddate.date() - getstartdate.date()).days
                # print('nb days',getnumberofdays,getenddate.date(),getstartdate.date())
                start = CreateConf.objects.filter(id=objects.id).order_by('-id').values_list('start_date', flat=True)[0]
                end = CreateConf.objects.filter(id=objects.id).order_by('-id').values_list('end_date', flat=True)[0]

                res = ''
                res2 = 0
                #print('sisenor0')



                if getstartdate.date() < start or getenddate.date() > end:
                    res = 'Your schedule extends over the dates you have set-up for the conference. Please modify before submitting.'
                    res2 = 2

                getstarttimeday = []
                getendtimeday = []
                exceed = []
                for i in range(getnumberofdays + 1):
                    start = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(
                        days=i)  # put midnight+i
                    start = start - shift
                    endd = start + timedelta(days=1)
                    if Schedule.objects.filter(conference=objects, notpart=False, start_date__gt=start, end_date__lt=endd):
                        getstarttime = Schedule.objects.filter(conference=objects,notpart=False, start_date__gt=start).order_by(
                            'start_date').values_list('start_date', flat=True)[0]
                        getstarttimeday.append(getstarttime)
                        end = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(
                            days=i + 1)  # put midnight+i
                        end = end - shift
                        getendtime = \
                        Schedule.objects.filter(conference=objects,notpart=False, end_date__lt=end).order_by('-end_date').values_list(
                            'end_date', flat=True)[0]
                        getendtimeday.append(getendtime)
                        # print('exceed',abs(getendtime-getstarttime).seconds/3600.0)
                        exc = abs(getendtime - getstarttime).seconds / 3600.0
                        if exc > 10.:
                            res2 = 1
                            res = 'At least one day in your program goes over 10 hours, this is not allowed! Please modify before submitting.'
                            # res='Your schedule extends over the dates you have set-up for the conference. Please modify before submitting.'
                        exceed.append(exc)
                        # print('barouf',i,start,end,getstarttime,getendtime,exc)

                stuff_for_frontend.update({
                    # 'createpeople_form': createpeople_form,
                    # 'website_form': website_form,
                    # 'webcrea': webcrea,
                    'startdates': getstarttimeday,
                    'enddates': getendtimeday,
                    'exceed': exceed,
                    'res': res,
                    'res2': res2
                })

            else:
                #print('sisenor')
                res = 'Your program is empty and cannot be. Please modify before submitting.'
                res2 = 2
                stuff_for_frontend.update({'res': res,
                    'res2': res2
                })

            print('ok8')
            stuff_for_frontend.update({
                'createpeople_form': createpeople_form,
                'website_form': website_form,
                'program_form': program_form,
                'excelform': form,
                'chatform': chatform,
                'peopacc': peopacc,
                'webcrea': webcrea,
                # 'startdates': getstarttimeday,
                # 'enddates': getendtimeday,
                # 'exceed': exceed
            })

            #update last login in admin panel
            utc = pytz.utc
            utc_now = datetime.now(tz=utc)
            #print('utcnow', utc_now)

            if UserUpdateL.objects.filter(user=request.user,conference=objects).exists():
                userpro=UserUpdateL.objects.filter(user=request.user,conference=objects)[0]
                lastlogintimepanel = userpro.lastlogintimepanel
                #print('utcnow2', userpro,lastlogintimepanel)

            else:
                lastlogintimepanel = utc_now

            #print('utcnow3', lastlogintimepanel)

            stuff_for_frontend.update({'lastlogintimepanel':lastlogintimepanel})


            p, created = UserUpdateL.objects.update_or_create(
                user=request.user,
                conference=objects,
                defaults={'lastlogintimepanel': utc_now},
            )

            #print('userupdatel created?',objects)
            #userpro.lastlogintimepanel=utc_now
            #userpro.save()

            # print('je passe ici',stuff_for_frontend)

            # a partir d'ici remplacer request.user by mainusertbb
            # mainuser = \
            # UserLink.objects.filter(conference=conftopass, user=request.user).values_list('mainuser', flat=True)[0]

        # return render(request,'my_app/createconf.html',{'createconf_form': createconf_form})
        if createdconf==False:
            print('li')
            return render(request, 'my_app/hostconf.html', stuff_for_frontend)


        return render(request, 'my_app/createconf.html', stuff_for_frontend)

def changep(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        text = request.POST.get('text')
        print('cf', confnum)
        response_data = {}

        pp = RegisterConf.objects.filter(conference__id=confnum, status=1).order_by('user__last_name')
        # all_rows = people
        # Query against the full list to return a list of objects
        #item_list = [peopleall.filter(user=item['user']).first() for item in
        #             peopleall.values('user').distinct()]
        #pp = item_list
        #peopleinv = RegisterConf.objects.filter(conference__id=confnum, status=1, type=1).order_by('user__last_name')

        p=[]

        userslist = RegisterConf.objects.annotate(full_name=Concat('user__first_name', V(' '), 'user__last_name')).filter(conference__id=confnum, status=1)

        if text:
            # print('f')
            qu=userslist.filter(full_name__icontains=text)

            queryset = pp.filter(
                Q(user__userprofileinfo__institute__icontains=text) |
                #Q(user__first_name__icontains=text) |
                #Q(user__last_name__icontains=text) |
                Q(user__userprofileinfo__job__icontains=text)
            )#.distinct()

            queryset = (queryset | qu).distinct()
        else:
            queryset=pp

        p = queryset

        profilepic=[]
        orcid=[]
        institute=[]
        job=[]
        fn=[]
        ln=[]
        #abstype=[]
        #truncabs=[]
        usern=[]
        pinv=[]
        for a in p:
            if a.type==1:
                pinv.append('1')
            else:
                pinv.append('0')
            if a.user.userprofileinfo.profile_pic:
                profilepic.append(a.user.userprofileinfo.profile_pic.url)
            else:
                profilepic.append('')
            if a.user.userprofileinfo.orcid:
                orcid.append(a.user.userprofileinfo.orcid)
            else:
                orcid.append('')
            if a.user.userprofileinfo.institute:
                institute.append(a.user.userprofileinfo.institute)
            else:
                institute.append('')
            if a.user.userprofileinfo.job:
                job.append(a.user.userprofileinfo.job)
            else:
                job.append('')
            if a.user.first_name:
                fn.append(a.user.first_name)
            else:
                ln.append('')
            if a.user.last_name:
                ln.append(a.user.last_name)
            else:
                ln.append('')

            usern.append(a.user.username)
            #abstype.append(a.get_type_display())
            #truncabs.append(Truncator(a.abstract).words(75))

        print('p',p)
        #if abs:
        p = list(queryset.values('type'))

        response_data['text'] = text
        response_data['p'] = p
        response_data['pinv'] = pinv
        response_data['cf'] = confnum
        response_data['usern'] = usern
        response_data['success'] = True
        response_data['profilepic'] = profilepic
        response_data['orcid'] = orcid
        response_data['institute'] = institute
        response_data['job'] = job
        response_data['fn'] = fn
        response_data['ln'] = ln
        #response_data['abstype'] = abstype
        #response_data['truncabs'] = truncabs

        print('r',response_data['cf'])

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:website', args=(134, 'participants')))


def changeabs(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        text = request.POST.get('text')
        print('cf', confnum)
        response_data = {}

        abstract = RegisterConf.objects.filter(conference__id=confnum, status=1,
                                               type__in=[1, 2, 3, 6]).order_by('user__last_name')

        userslist = RegisterConf.objects.annotate(
            full_name=Concat('user__first_name', V(' '), 'user__last_name')).filter(conference__id=confnum, status=1,type__in=[1, 2, 3, 6])

        abs=[]
        if text:
            # print('f')
            qu = userslist.filter(full_name__icontains=text)

            queryset = abstract.filter(
                Q(title__icontains=text) |
                #Q(user__first_name__icontains=text) |
                #Q(user__last_name__icontains=text) |
                Q(abstract__icontains=text)
            )#.distinct()

            queryset = (queryset | qu).distinct()

        else:
            queryset=abstract

        abs = queryset

        profilepic=[]
        orcid=[]
        institute=[]
        job=[]
        fn=[]
        ln=[]
        abstype=[]
        truncabs=[]
        usern=[]
        for a in abs:
            if a.user.userprofileinfo.profile_pic:
                profilepic.append(a.user.userprofileinfo.profile_pic.url)
            else:
                profilepic.append('')
            if a.user.userprofileinfo.orcid:
                orcid.append(a.user.userprofileinfo.orcid)
            else:
                orcid.append('')
            if a.user.userprofileinfo.institute:
                institute.append(a.user.userprofileinfo.institute)
            else:
                institute.append('')
            if a.user.userprofileinfo.job:
                job.append(a.user.userprofileinfo.job)
            else:
                job.append('')
            if a.user.first_name:
                fn.append(a.user.first_name)
            else:
                ln.append('')
            if a.user.last_name:
                ln.append(a.user.last_name)
            else:
                ln.append('')

            usern.append(a.user.username)
            abstype.append(a.get_type_display())
            truncabs.append(Truncator(a.abstract).words(75))

        print('abs',abs)
        #if abs:
        abs = list(queryset.values('abstract', 'title','type'))

        response_data['text'] = text
        response_data['abs'] = abs
        response_data['cf'] = confnum
        response_data['usern'] = usern
        response_data['success'] = True
        response_data['profilepic'] = profilepic
        response_data['orcid'] = orcid
        response_data['institute'] = institute
        response_data['job'] = job
        response_data['fn'] = fn
        response_data['ln'] = ln
        response_data['abstype'] = abstype
        response_data['truncabs'] = truncabs

        print('r',response_data['cf'])

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:website', args=(134, 'abstracts')))

def changepos(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        text = request.POST.get('text')
        print('cf', confnum)
        response_data = {}

        poster = RegisterConf.objects.filter(conference__id=confnum, status=1,
                                               type=4).order_by('user__last_name')

        userslist = RegisterConf.objects.annotate(
            full_name=Concat('user__first_name', V(' '), 'user__last_name')).filter(conference__id=confnum, status=1,
                                                                                    type=4)
        pos=[]
        if text:
            # print('f')
            qu = userslist.filter(full_name__icontains=text)

            queryset = poster.filter(
                Q(title__icontains=text) |
                #Q(user__first_name__icontains=text) |
                #Q(user__last_name__icontains=text) |
                Q(abstract__icontains=text)
            )#.distinct()

            queryset = (queryset | qu).distinct()

        else:
            queryset=poster

        pos = queryset

        profilepic=[]
        orcid=[]
        institute=[]
        job=[]
        fn=[]
        ln=[]
        postype=[]
        truncabs=[]
        usern=[]
        imu=[]
        imw=[]
        imh=[]
        imjj=[]
        mp4=[]
        from sorl.thumbnail import get_thumbnail

        for a in pos:
            if a.user.userprofileinfo.profile_pic:
                profilepic.append(a.user.userprofileinfo.profile_pic.url)
            else:
                profilepic.append('')
            if a.user.userprofileinfo.orcid:
                orcid.append(a.user.userprofileinfo.orcid)
            else:
                orcid.append('')
            if a.user.userprofileinfo.institute:
                institute.append(a.user.userprofileinfo.institute)
            else:
                institute.append('')
            if a.user.userprofileinfo.job:
                job.append(a.user.userprofileinfo.job)
            else:
                job.append('')
            if a.user.first_name:
                fn.append(a.user.first_name)
            else:
                ln.append('')
            if a.user.last_name:
                ln.append(a.user.last_name)
            else:
                ln.append('')
            if a.mp4_url:
                mp4.append(a.mp4_url)
                print('mp4',mp4)
            else:
                mp4.append('')
            if a.slides:
                ima = get_thumbnail(a.slides, '251x251', crop='center', quality=99)
                print('ima',ima)
                imu.append(str(ima.url))
                imw.append(str(ima.width))
                imh.append(str(ima.height))
                imjj.append('1')

            else:
                imu.append('')
                imw.append('')
                imh.append('')
                imjj.append('0')

            usern.append(a.user.username)
            postype.append(a.get_type_display())
            truncabs.append(Truncator(a.abstract).words(100))

        print('pos',pos)
        #if abs:
        pos = list(queryset.values('abstract', 'title','type','id'))

        #imfb = get_thumbnail(conftopass.room_logo, '600x315', crop='center', quality=80)  # 450x298

        response_data['text'] = text
        response_data['pos'] = pos
        response_data['cf'] = confnum
        response_data['usern'] = usern
        response_data['success'] = True
        response_data['profilepic'] = profilepic
        response_data['orcid'] = orcid
        response_data['institute'] = institute
        response_data['job'] = job
        response_data['fn'] = fn
        response_data['ln'] = ln
        response_data['postype'] = postype
        response_data['truncabs'] = truncabs
        response_data['imu'] = imu
        response_data['imw'] = imw
        response_data['imh'] = imh
        response_data['imjj'] = imjj
        response_data['mp4'] = mp4

        print('r',response_data['cf'])

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:website', args=(134, 'posters')))




def checkemail(request):
    if request.method == 'POST':

        uemail = request.POST.get('uemail')
        #print('title', title)
        response_data = {}

        response_data['email'] = 0

        #validate_alphanumeric = RegexValidator(r'^[A-Za-z0-9\-_]+$', 'Only alphanumeric characters are allowed (letters, digits, hyphens and underscores, no accents).')
        #v=validate_alphanumeric("foo")  # ok, nothing happens
        #print('v',v)
        #from django.core.exceptions import ValidationError
        response_data['emailalready'] = 0
        if User.objects.filter(email=uemail).exists():
            response_data['emailalready'] = 1


        from django.core.validators import validate_email

        print('u',uemail)

        if uemail!='':
            try:
                v=validate_email(uemail)  # raises a ValidationError
                print('v',v)
            #except:
            except ValidationError as e:
                #messages.error(request, str(e))
                print('error',e)
                stre=''
                #messages.error(request, 'Your password is not secured enough, please try again!',extra_tags='secu')
                for eu in e:
                    stre+=str(eu)


                response_data['emailerr'] = stre

                response_data['email'] = 1
                #print('except')


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))


def checkpassword(request):
    if request.method == 'POST':

        upass = request.POST.get('upass')
        #print('title', title)
        response_data = {}

        #response_data['upass'] = upass

        #unamealready = CreateConf.objects.filter(user.username__iexact=uname)
        #v=validate_password(password)
        #print('v',v)
        #from django.core.validators import RegexValidator

        response_data['pass'] = 0

        #validate_alphanumeric = RegexValidator(r'^[A-Za-z0-9\-_]+$', 'Only alphanumeric characters are allowed (letters, digits, hyphens and underscores, no accents).')
        #v=validate_alphanumeric("foo")  # ok, nothing happens
        #print('v',v)
        from django.contrib.auth.password_validation import validate_password
        #v = validate_password(upass)
        #print('vf',v)
        if upass!='':
            try:
                v=validate_password(upass)  # raises a ValidationError
                #print('v',v)
            #except:
            except ValidationError as e:
                #messages.error(request, str(e))
                #print('error',e)
                stre=''
                #messages.error(request, 'Your password is not secured enough, please try again!',extra_tags='secu')
                for eu in e:
                    stre+=str(eu)


                response_data['passerr'] = stre

                response_data['pass'] = 1
                #print('except')

        #print("response_data['alphanum']",response_data['alphanum'])
        #import re
        #pattern = re.compile("^[A-Za-z0-9\-_]+")
        #if pattern.match(uname)
        #v=bool(re.match(r"^[^A-Za-z0-9\-_]$", uname))
        #print('v',v)

        #150 characters of fewer
        #Alphanumeric
        #characters
        #only(letters, digits, hyphens and underscores, no
        #accents).

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))

def checktitleurl(request):
    if request.method == 'POST':

        uurl = request.POST.get('uurl')
        confnum = request.POST.get('confnum')
        #print('title', title)
        response_data = {}

        response_data['uurl'] = uurl
        print('uurl',uurl)

        #unamealready = CreateConf.objects.filter(user.username__iexact=uname)
        prevurl=''
        if confnum:
            prevweb=Website.objects.filter(conference__id=confnum)[0]
            if prevweb.titleurl != '':
                prevurl=prevweb.titleurl

        uurlalready = Website.objects.filter(titleurl__iexact=uurl).exclude(titleurl__iexact=prevurl).exists()
        print('urlalready',uurlalready)

        response_data['already'] = 0
        if uurlalready:
            response_data['already'] = 1
            print("response_data['already'] = 1")

        response_data['toolong'] = 0
        if len(uurl)>30:
            print(len(uurl))
            response_data['toolong'] = 1

        #r'^[A-Za-z0-9\-_]+$
        from django.core.validators import RegexValidator

        response_data['alphanum'] = 0

        validate_alphanumeric = RegexValidator(r'^[A-Za-z0-9\-_]+$', 'Only alphanumeric characters are allowed (letters, digits, hyphens and underscores, no accents).')
        #v=validate_alphanumeric("foo")  # ok, nothing happens
        #print('v',v)

        if uurl!='':
            try:
                validate_alphanumeric(uurl)  # raises a ValidationError
            except:
                response_data['alphanum'] = 1

        print("response_data['alphanum']",response_data['alphanum'])
        #import re
        #pattern = re.compile("^[A-Za-z0-9\-_]+")
        #if pattern.match(uname)
        #v=bool(re.match(r"^[^A-Za-z0-9\-_]$", uname))
        #print('v',v)

        #150 characters of fewer
        #Alphanumeric
        #characters
        #only(letters, digits, hyphens and underscores, no
        #accents).

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))

def checkusername(request):
    if request.method == 'POST':

        uname = request.POST.get('uname')
        #print('title', title)
        response_data = {}

        response_data['uname'] = uname

        #unamealready = CreateConf.objects.filter(user.username__iexact=uname)
        unamealready = User.objects.filter(username=uname).exists()
        response_data['already'] = 0
        if unamealready:
            response_data['already'] = 1

        response_data['toolong'] = 0
        if len(uname)>149:
            print(len(uname))
            response_data['toolong'] = 1

        #r'^[A-Za-z0-9\-_]+$
        from django.core.validators import RegexValidator

        response_data['alphanum'] = 0

        validate_alphanumeric = RegexValidator(r'^[A-Za-z0-9\-_]+$', 'Only alphanumeric characters are allowed (letters, digits, hyphens and underscores, no accents).')
        #v=validate_alphanumeric("foo")  # ok, nothing happens
        #print('v',v)

        if uname!='':
            try:
                validate_alphanumeric(uname)  # raises a ValidationError
            except:
                response_data['alphanum'] = 1

        print("response_data['alphanum']",response_data['alphanum'])
        #import re
        #pattern = re.compile("^[A-Za-z0-9\-_]+")
        #if pattern.match(uname)
        #v=bool(re.match(r"^[^A-Za-z0-9\-_]$", uname))
        #print('v',v)

        #150 characters of fewer
        #Alphanumeric
        #characters
        #only(letters, digits, hyphens and underscores, no
        #accents).

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))


def checktitle(request):
    if request.method == 'POST':

        title = request.POST.get('title')
        #print('title', title)
        response_data = {}

        response_data['title'] = title

        titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
        response_data['already'] = 0
        if titlealready:
            response_data['already'] = 1

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))


def checktitlebis(request):
    if request.method == 'POST':

        title = request.POST.get('title')
        confnum = request.POST.get('confnum')

        #print('title', title)
        #print('cnumm', confnum)

        response_data = {}

        response_data['title'] = title

        oldtitle = CreateConf.objects.filter(id=confnum).values_list('title', flat=True)[0]

        #print('old', oldtitle, title)

        titlealready = CreateConf.objects.filter(user=request.user, title__iexact=title)
        response_data['already'] = 0
        if titlealready and title != oldtitle:
            response_data['already'] = 1

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf'))


@csrf_exempt
def changetimes(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')

        response_data = {}

        response_data['confnum'] = confnum
        response_data['result'] = 'Conference Submitted!'
        response_data['result2'] = 0
        time.sleep(1)  # wait for creation of schedule if any

        idcf = confnum
        nodates=False
        if not Schedule.objects.filter(conference__id=idcf,notpart=False).exists():
            nodates=True
            response_data[
                'result'] = 'Your program should not be empty, please modify before submitting or it will not go through!'
            response_data['result2'] = 2
        else:
            getstartdate = \
                Schedule.objects.filter(conference__id=idcf,notpart=False).order_by('start_date').values_list('start_date', flat=True)[0]
            getenddate = \
                Schedule.objects.filter(conference__id=idcf,notpart=False).order_by('-end_date').values_list('end_date', flat=True)[0]

            print('start,end', getstartdate, getenddate,idcf)
            # utc = utctime.replace(tzinfo=pytz.UTC)
            tzloc = request.session.get('django_timezone', 'UTC')
            local = pytz.timezone(tzloc)
            shift = getstartdate.astimezone(local).replace(tzinfo=None) - getstartdate.replace(tzinfo=None)
            # print('shift', shift, tzloc)
            getstartdate = getstartdate.astimezone(local)  # .replace(tzinfo=None)
            getenddate = getenddate.astimezone(local)  # .replace(tzinfo=None)
            #print('start,end2', getstartdate, getenddate)

            getnumberofdays = abs(getenddate.date() - getstartdate.date()).days + 1
            # print('nb days', getnumberofdays, getenddate.date(), getstartdate.date())
            start = CreateConf.objects.filter(id=idcf).order_by('-id').values_list('start_date', flat=True)[0]
            end = CreateConf.objects.filter(id=idcf).order_by('-id').values_list('end_date', flat=True)[0]

        # numberdayconf = abs(end - start).days + 1

            if getstartdate.date() < start or getenddate.date() > end:
                # stuff_for_frontend.update({
                #   'outsideboundaries': True,
                # })
                # messages.success(request,
                #                "Your schedule extends over the dates you have set-up for the conference. Please modify that and resubmit again.")
                # a=1
                # print('noooooooooo')
                response_data[
                    'result'] = 'Your schedule extends over the dates you have set-up for the conference. Please modify before submitting.'
                response_data['result2'] = 2


            else:
                getstarttimeday = []
                getendtimeday = []
                exceed = []
                for i in range(getnumberofdays):
                    start = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(days=i)  # put midnight+i
                    start = start - shift
                    endd = start + timedelta(days=1)
                    if Schedule.objects.filter(conference__id=idcf, notpart=False, start_date__gt=start, end_date__lt=endd):
                        getstarttime = Schedule.objects.filter(conference__id=idcf, notpart=False, start_date__gt=start).order_by(
                            'start_date').values_list('start_date', flat=True)[0]
                        getstarttimeday.append(getstarttime + shift)
                        end = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(
                            days=i + 1)  # put midnight+i
                        #print('end',end)
                        end = end - shift
                        #print('end',end)
                        getendtime = Schedule.objects.filter(conference__id=idcf, notpart=False, end_date__lte=end).order_by('-end_date').values_list(
                            'end_date', flat=True)[0]
                        #print('endtime',getendtime)
                        getendtimeday.append(getendtime + shift)
                        # print('exceed', abs(getendtime - getstarttime).seconds / 60.0)
                        exc = abs(getendtime - getstarttime).seconds / 60.0

                        exceed.append(exc)
                        # print('barouf', i, start, end, getstarttime, getendtime, exc)
                        if exc > 10. * 60.:
                            response_data[
                                'result'] = 'At least one day in your program goes over 10 hours, this is not allowed! Please modify before submitting.'
                            response_data['result2'] = 1

                    else:
                        #print('else')
                        getstarttimeday.append(start + timedelta(hours=7))
                        getendtimeday.append(start + timedelta(hours=7, minutes=5))
                        exc = abs(start + timedelta(minutes=5) - start).seconds / 60.0
                        exceed.append(exc)

                response_data['exceed'] = exceed
                # response_data['startdates'] = getstarttimeday
                # response_data['enddates'] = getendtimeday
                sentence = []
                for i in range(getnumberofdays):
                    # print('what',getstarttimeday[i])
                    sen = getstarttimeday[i].strftime("%A %d %b %Y - From %I:%M %p") + getendtimeday[i].strftime(
                        " to %I:%M %p")
                    sentence.append(sen)
                    # print('sen',i,sentence[i])

                response_data['sentence'] = sentence
                # {{start | date: 'l d b Y'}} - From {{start | date: 'g:i a'}} to {{enddates | index: forloop.counter0 | date: 'g:i a'}}

            # print('whyyyyyyyyyu', response_data, json.dumps(response_data))

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )
        # return json.dumps(
        #  item,
        #   sort_keys=True,
        #  indent=1,
        # cls=DjangoJSONEncoder
        # )
    return HttpResponseRedirect(reverse('my_app:createconf'))


def booklet(request):
    if request.method == 'POST':
        import io, PyPDF2
        confnum = request.POST.get('confnumx')

        abs = utils.createabstractbooklet(request,confnum)
        # with io.BytesIO(abs) as pdf:
        #    read_pdf = PyPDF2.PdfFileReader(pdf)
        #    response = HttpResponse(read_pdf)#, mimetype='application/pdf')
        #    response['Content-Disposition'] = 'inline;filename=some_file.pdf'
        filename = 'abstractbook.pdf'
        response = HttpResponse(content_type="application/pdf")
        response['Content-Disposition'] = 'attachment; filename=%s' % filename  # force browser to download file
        response.write(abs)

        return response
        # pdf.closed
    return HttpResponseRedirect(reverse('my_app:createconf'))

def book(request):
    if request.method == 'POST':
        import io, PyPDF2
        confnum = request.POST.get('confnumx')

        abs = utils.createabstractbook(request,confnum)
        # with io.BytesIO(abs) as pdf:
        #    read_pdf = PyPDF2.PdfFileReader(pdf)
        #    response = HttpResponse(read_pdf)#, mimetype='application/pdf')
        #    response['Content-Disposition'] = 'inline;filename=some_file.pdf'
        filename = 'abstractbookofparticipants.pdf'
        response = HttpResponse(content_type="application/pdf")
        response['Content-Disposition'] = 'attachment; filename=%s' % filename  # force browser to download file
        response.write(abs)

        return response
        # pdf.closed
    return HttpResponseRedirect(reverse('my_app:createconf'))

@confirm_password
def myarchive(request):
    if not request.user.is_authenticated:
        stuff_for_frontend = {
            'comingfrom': 'myarchive',
            'linkfrom': '',
            'confnum': 0
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)

    else:

        status = '1'
        visiotest2 = 0

        #print('aqua')
        clu = utils.conf_list_user(request)

        stuff_for_frontend={
            'conf_list_user': clu,
            'status': status
        }

        #stuff_for_frontend = {
        #    'status': status
        #}
        if request.method == 'POST':
            if request.POST.get('conf'):
                confidchange = request.POST.get('conf')
                # print('yooooo',conftitlechange)
                request.session['confid'] = confidchange
            elif request.POST.get('public'):
                if request.POST.get('videoid'):
                    url=request.POST.get('videoid')
                    confnumid=request.POST.get('confnumid')
                    righ=request.POST.get('righ')

                    print('righ',righ)
                    if righ=='Make private':
                        right="disable"
                        print('no')
                    else:
                        right="anybody"
                        #print('yes')

                    who = CreateConf.objects.filter(id=confnumid).values_list(
                        'whorecording', flat=True)[0]
                    print('who',who,confnumid)

                    if who == "Only conference participants":
                        who2 = 1
                    else:
                        who2 = 0

                    #print('makepublic',url,confnumid,who2)
                    idvim = url.replace('https://player.vimeo.com/video/', '')
                    #print('re', idvim)
                    visio = CreateVisio.objects.filter(conference__id=confnumid, testroom=False)
                    for v in visio:
                        print('visio', v.idconf)
                        if v.vimeo_url:
                            if idvim in v.vimeo_url:
                                #print('v here', v)
                                vimurl2 = v.vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                                arr2 = vimurl2.split(',')

                                jx = -1
                                print('arr2', arr2,idvim)
                                for i in range(len(arr2)):
                                    if arr2[i].lstrip() == '/videos/' + idvim:
                                        jx = i
                                        #print('jx', jx)

                                    if v.rights:
                                        #print('v.rights',v.rights)
                                        rights2 = v.rights.replace('[', '').replace(']', '').replace("'", "")
                                        arrr = rights2.split(',')#"anybody","disable","nobody"
                                        #print('re',arrr)
                                    else:
                                        if who2==1:
                                            arrr = ['disable']*len(arr2)
                                        else:
                                            arrr = ['anybody']*len(arr2)

                                if jx > -1:
                                    if arrr:
                                        arrr[jx]=right
                                        #print('ri',right)
                                        v.rights=str(arrr)
                                        v.save()
                                        import vimeo

                                        client = vimeo.VimeoClient(
                                            token='ad1e934c05fe16362aebbeac14a3bee6',
                                            key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                                            secret=settings.SECRETVIMEO
                                        )

                                        #print('resp',response)
                                        client.patch('/videos/' + idvim, data={
                                            'privacy': {
                                                'view': right
                                            },
                                        #    'password': 'helloworld'
                                         })



            elif request.POST.get('delete'):
                if request.POST.get('videoid'):
                    url=request.POST.get('videoid')
                    confnumid=request.POST.get('confnumid')

                    print('videoid',url,confnumid)
                    #vim_play_url = "https://player.vimeo.com/video/" + redvimurl
                    idvim = url.replace('https://player.vimeo.com/video/', '')
                    print('re',idvim)
                    visio=CreateVisio.objects.filter(conference__id=confnumid,testroom=False)
                    for v in visio:
                        print('visio',v.idconf)
                        if v.vimeo_url:
                            if idvim in v.vimeo_url:
                                print('v here',v)
                                vimurl2 = v.vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                                arr2 = vimurl2.split(',')

                                mp4_id2=v.mp4_id.replace('[', '').replace(']', '').replace("'", "")
                                arr3 = mp4_id2.split(',')

                                mp4_url2=v.mp4_url.replace('[', '').replace(']', '').replace("'", "")
                                arr4 = mp4_url2.split(',')

                                recstart2=v.recstart.replace('[', '').replace(']', '').replace("'", "")
                                arr5 = recstart2.split(',')

                                recend2=v.recend.replace('[', '').replace(']', '').replace("'", "")
                                arr6 = recend2.split(',')

                                if v.rectitles:
                                    rectitles2=v.rectitles.replace('[', '').replace(']', '').replace("'", "")
                                    arr7 = rectitles2.split(',')
                                else:
                                    arr7=''

                                if v.rights:
                                    rights2=v.rights.replace('[', '').replace(']', '').replace("'", "")
                                    arr8 = rights2.split(',')
                                else:
                                    arr8=''

                                jx=-1
                                print('arr2',arr2)
                                for i in range(len(arr2)):
                                    if arr2[i].lstrip()=='/videos/'+idvim:
                                        jx=i
                                        print('jx',jx)
                                        import vimeo

                                        client = vimeo.VimeoClient(
                                            token='ad1e934c05fe16362aebbeac14a3bee6',
                                            key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                                            secret=settings.SECRETVIMEO
                                        )

                                        # print('resp',response)
                                        client.patch('/videos/' + idvim, data={
                                            'privacy': {
                                                'view': "disable"
                                            },
                                            #    'password': 'helloworld'
                                        })
                                        print('vimeo done delete')

                                if jx>-1:
                                    if len(arr2)>1:
                                        arr2.pop(jx)
                                    else:
                                        arr2=''
                                    if len(arr3)>1:
                                        arr3.pop(jx)
                                    else:
                                        arr3=''

                                    if len(arr4)>1:
                                        arr4.pop(jx)
                                    else:
                                        arr4 = ''
                                    if len(arr5)>1:
                                        arr5.pop(jx)
                                    else:
                                        arr5=''
                                    if len(arr2)>1:
                                        arr6.pop(jx)
                                    else:
                                        arr6=''

                                    print('arr7',arr7)
                                    if (arr7 != '') and (arr7 != ['']):
                                        print('ol')
                                        if len(arr7)>1:
                                            arr7.pop(jx)
                                        else:
                                            arr7 = ''

                                    print('arr8', arr8)
                                    if (arr8 != '') and (arr8 != ['']):
                                        print('olio')
                                        if len(arr8) > 1:
                                            arr8.pop(jx)
                                        else:
                                            arr8 = ''

                                    #arr2.remove('/videos/'+idvim)
                                    v.vimeo_url=str(arr2)
                                    v.mp4_id=str(arr3)
                                    v.mp4_url=str(arr4)
                                    v.recstart=str(arr5)
                                    v.recend=str(arr6)
                                    if (arr7 != '') and (arr7 != ['']):
                                        v.rectitles=str(arr7)
                                    if (arr8 != '') and (arr8 != ['']):
                                        v.rights=str(arr8)

                                    print('arr2',arr2)
                                    print('arr3',arr3)
                                    print('arr4',arr4)
                                    print('arr5',arr5)
                                    print('arr6',arr6)
                                    print('arr7',arr7)
                                    print('arr8',arr8)

                                    v.save()

                    #request.session['talk'] = request.POST.get('talkid')

            else:
                if 1==1:#(CreateConf.objects.filter(user=request.user)):
                    if request.session.get('confid', ''):
                        if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):
                            idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user=request.user,
                                                             #title=request.session.get('conftit', '')).values_list('id',flat=True)[0]

                            # idconf = CreateConf.objects.filter(user=request.user,title=request.session.get('conftit', '')).values_list('idconf', flat=True)[0]
                            tit = CreateConf.objects.filter(user=request.user,
                                                            id=request.session.get('confid', '')).values_list(
                                'title', flat=True)[0]
                            descr = CreateConf.objects.filter(user=request.user,
                                                              id=request.session.get('confid', '')).values_list(
                                'abstract', flat=True)[0]
                            who = CreateConf.objects.filter(user=request.user,
                                                            id=request.session.get('confid', '')).values_list(
                                'whorecording', flat=True)[0]

                            ##print('idff', idcf, idconf)
                        else:
                            if request.user.is_superuser:
                                querysetother = \
                                RegisterConf.objects.filter(conference__id=request.session.get('confid', ''),
                                                            role=3)[0]  # tbb
                                # print('tttrrezddd', querysetother)
                            else:
                                querysetother = RegisterConf.objects.filter(user=request.user,
                                                                            conference__id=request.session.get(
                                                                                'confid', ''), role=3)[0]  # tbb

                            # querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item
                            #                       in
                            #                       querysetother.values('conference').distinct()]
                            mainusers = []
                            if request.user.is_superuser:
                                if UserLink.objects.filter(conference=querysetother.conference,
                                                           user=querysetother.conference.user):
                                    mainuser = UserLink.objects.filter(conference=querysetother.conference,
                                                                       user=querysetother.conference.user).values_list(
                                        'mainuser',
                                        flat=True)[0]

                                    idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user=mainuser,
                                                                     #title=request.session.get('conftit','')).values_list('id',flat=True)[0]
                                    # idconf = CreateConf.objects.filter(user=request.user,title=request.session.get('conftit', '')).values_list('idconf', flat=True)[0]
                                    tit = CreateConf.objects.filter(user=mainuser,
                                                                    id=request.session.get('confid',
                                                                                              '')).values_list('title',flat=True)[0]

                                    descr = CreateConf.objects.filter(user=mainuser,
                                                                      id=request.session.get('confid',
                                                                                                '')).values_list('abstract', flat=True)[0]
                                    who = CreateConf.objects.filter(user=mainuser,
                                                                    id=request.session.get('confid',
                                                                                              '')).values_list(
                                        'whorecording', flat=True)[0]
                                else:
                                    idcf = -1

                            else:

                                if UserLink.objects.filter(conference=querysetother.conference,
                                                           user=request.user):
                                    mainuser = UserLink.objects.filter(conference=querysetother.conference,
                                                                       user=request.user).values_list('mainuser',
                                                                                                      flat=True)[0]
                                    print('idcf',request.session.get('confid', ''))
                                    idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user=mainuser,
                                                                    # title=request.session.get('conftit','')).values_list('id',flat=True)[0]
                                    # idconf = CreateConf.objects.filter(user=request.user,title=request.session.get('conftit', '')).values_list('idconf', flat=True)[0]
                                    tit = CreateConf.objects.filter(user=mainuser,
                                                                    id=request.session.get('confid',
                                                                                              '')).values_list('title',
                                                                                                               flat=True)[
                                        0]

                                    descr = CreateConf.objects.filter(user=mainuser,
                                                                      id=request.session.get('confid',
                                                                                                '')).values_list(
                                        'abstract', flat=True)[0]
                                    who = CreateConf.objects.filter(user=mainuser,
                                                                    id=request.session.get('confid',
                                                                                              '')).values_list(
                                        'whorecording', flat=True)[0]
                                else:
                                    idcf = -1
                    else:
                        idcf = \
                        CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                        tit = \
                        CreateConf.objects.filter(user=request.user).order_by('-id').values_list('title', flat=True)[0]
                        descr = \
                            CreateConf.objects.filter(user=request.user).order_by('-id').values_list('abstract',
                                                                                                     flat=True)[
                                0]
                        who = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('whorecording',
                                                                                                       flat=True)[0]

                        # start = CreateConf.objects.filter(user=request.user).order_by('id').values_list('start_date', flat=True)[0]
                        # end = CreateConf.objects.filter(user=request.user).order_by('id').values_list('end_date', flat=True)[0]
                        # idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('idconf', flat=True)[0]

                    if idcf > -1:
                        conftopass = CreateConf.objects.filter(id=idcf)[0]

                        stuff_for_frontend.update({
                            'conftopass': conftopass,
                        })

                        if request.POST.get('finishimport'):
                            print('finish')
                            conftopass.finishimport=True
                            conftopass.save()
                            #ici we'll need to suppress all zoom videos
                            return HttpResponseRedirect(reverse('my_app:myarchive'))

                        else:
                            tasknum = 0
                            visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)
                            # getnumberofdays = abs(end - start).days + 1
                            load = 0

                            for iu in range(len(visio)):
                                idconf = visio[iu].idconf
                                #print('ty', iu, idconf)
                                # starttime = visio[0].date
                                # endtime = visio.last().date + timedelta(minutes=visio.last().duration)

                                ##print('ss', starttime, endtime)
                                # for i in range(len(visio)):
                                #   if visio[i].date.date() == todaytime.date():
                                #      idconf = visio[i].idconf
                                #     starttime = visio[i].date

                                if idconf:
                                    # api_url, headers = utils.connection('conferences/3e889798e61c')
                                    #print('iiiii', idconf)
                                    if conftopass.roomtype == "Big Marker":

                                        api_url, headers = utils.connection('conferences/' + str(idconf))
                                        response = requests.get(api_url, headers=headers)
                                        # print(response)
                                        resrec = response.status_code
                                        if resrec == 200:
                                            info = json.loads(response.content.decode('utf-8'))
                                            #print('iciddddddddddddddddddddddddddd')

                                            if 'recording_id' in info:
                                                #print('recidiii')
                                                # record on visio
                                                # visio[i].recidconf=info['recording_id']
                                                visio[iu].mp4_url = info['mp4_url']

                                                # privacy='nobody'
                                                # try:
                                                # time.sleep(10)

                                                x = asynchronousuploadvimeo.delay(idcf, iu, info['mp4_url'],
                                                                                  info['recording_id'], tit, descr, who)

                                                #print('taskid', x.task_id)
                                                visio[iu].celery_task_id = x.task_id

                                                visio[iu].save()

                                                # visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)
                                                #print(
                                                #    'asynchronousasynchronousasynchronousasynchronousasynchronousasynchronousasynchronousasynchronousasynchronous')


                                            else:
                                                # print('2b')
                                                status = '2b'
                                                stuff_for_frontend.update({
                                                    'status': '2b',
                                                    'title': tit
                                                })
                                    else:
                                        print('jk')
                                        conn = http.client.HTTPSConnection("api.zoom.us")

                                        passwo=utils.generateToken()
                                        headers = {'authorization': 'Bearer %s' % passwo,
                                                   'content-type': 'application/json'}

                                        # first get all UUIDs to get recording for each of those
                                        #conn.request("GET", "/v2/past_meetings/" + idconf + "/instances", headers=headers)
                                        #print('pass',passwo)
                                        conn.request("GET", "/v2/past_meetings/" + idconf + "/instances", headers=headers)#needs at least two persons attending the meeting to work

                                        resu = conn.getresponse()
                                        print('resu',resu,resu.status)
                                        datau = resu.read()
                                        print('datar',datau)
                                        infou = json.loads(datau.decode('utf-8'))
                                        print('inf',infou)
                                        #print('l', len(infou['meetings']), idconf)
                                        tasknum = 0
                                        uuids = []
                                        mp4files = []
                                        idfiles = []
                                        taskcel = []
                                        if resu.status == 200:
                                            if len(infou['meetings']) > 0:
                                                print('uhjf')
                                                #visio[iu].recstart = ''
                                                #visio[iu].recend = ''
                                                #visio[iu].vimeo_url = ''
                                                oldmp4id=visio[iu].mp4_id
                                                nboldurl=0
                                                #if oldmp4url:
                                                #    vurl1 = oldmp4url.replace('[', '').replace(']', '').replace("'", "")
                                                #    vurl = vurl1.split(',')
                                                #    nboldurl=len(vurl)

                                                #print('nboldurl',nboldurl)

                                                oldtaskcel=visio[iu].celery_task_id
                                                if not oldtaskcel:
                                                    oldtaskcel=[]

                                                #visio[iu].save()
                                                
                                                for ij in range(len(infou['meetings'])):
                                                    print('uuid', infou['meetings'][ij]['uuid'])
                                                    uuids.append(infou['meetings'][ij]['uuid'])

                                                    encodeur=urllib.parse.quote(uuids[ij], safe='')
                                                    encodeur2=urllib.parse.quote(encodeur, safe='')#double encoding otherwise it doesn't work

                                                    #encodeifslash=uuids[ij].replace('/','%252F')#double encode of / = %252F
                                                    print('enco',encodeur,encodeur2)
                                                    conn.request("GET", "/v2/meetings/" + encodeur2 + "/recordings",
                                                                 headers=headers)

                                                    res = conn.getresponse()
                                                    data = res.read()

                                                    print('dataii',data.decode("utf-8"))
                                                    print('stat', res.status)
                                                    resrec = res.status

                                                    if resrec == 200:

                                                        info = json.loads(data.decode('utf-8'))
                                                        numberrec = info['recording_count']
                                                        print('numrec', numberrec)
                                                        for ijk in range(numberrec):
                                                            print('ij', ijk, iu, info['recording_files'][ijk]['recording_type'])
                                                            if info['recording_files'][ijk][
                                                                'recording_type'] == "shared_screen_with_speaker_view":
                                                                # print('id', info['recording_files'][ijk]['id'])
                                                                # print('status', info['recording_files'][ijk]['status'])
                                                                # print('durl', info['recording_files'][ijk]['download_url'])
                                                                # print('start', info['recording_files'][ijk]['recording_start'])
                                                                # print('end', info['recording_files'][ijk]['recording_end'])

                                                                if info['recording_files'][ijk]['id']:
                                                                    mp4files.append(
                                                                        info['recording_files'][ijk]['download_url'])
                                                                    idfiles.append(
                                                                        info['recording_files'][ijk]['id'])
                                                                # from django.db import transaction

                                                                # privacy='nobody'
                                                                # try:
                                                                # x=asynchronousuploadvimeo.delay(idcf,i,info['recording_files'][ijk]['download_url']+"?access_token="+utils.generateToken(),idconf,tit,descr,who)
                                                                # x=transaction.on_commit(
                                                                # lambda: send_msg_to_rabbitmqp(instance.id)

                                                                print('oldmp4id',oldmp4id)
                                                                if oldmp4id==None:
                                                                    oldmp4id=[]
                                                                print('newmp4id',str(info['recording_files'][ijk]['id']))
                                                                if str(info['recording_files'][ijk]['id']) in oldmp4id:
                                                                #if ijk<nboldurl:
                                                                    print('already loaded')
                                                                    #oldtaskcel.append(x.id)


                                                                else:
                                                                    x = asynchronousuploadvimeo.delay(idcf, iu,
                                                                                                  info['recording_files'][ijk][
                                                                                                      'download_url'] + "?access_token=" + utils.generateToken(),
                                                                                                  uuids, tit, descr, who,
                                                                                                  info['recording_files'][ijk][
                                                                                                      'recording_start'],
                                                                                                  info['recording_files'][ijk][
                                                                                                      'recording_end'])
                                                                    load=1


                                                                    taskcel.append(x.id)


                                                                stuff_for_frontend.update({
                                                                    'load': load,
                                                                })

                                                                tasknum = tasknum + 1

                                                                    #oldtaskcel.append(x.id)

                                                                # result_output = x.get()
                                                    else:
                                                        print('noway')
                                                        visiotest2=1
                                                        stuff_for_frontend.update({
                                                            'status': '2b',
                                                        })
                                            else:
                                                print('nowayb')
                                                visiotest2 = 1
                                                stuff_for_frontend.update({
                                                    'status': '2b',
                                                })


                                            if len(mp4files) > 0:
                                                visio[iu].mp4_url = mp4files
                                                visio[iu].mp4_id = idfiles
                                                #print('mp4files', mp4files)
                                                visio[iu].celery_task_id = taskcel
                                                #print('taskcel', taskcel)

                                                visio[iu].save()

                                        else:
                                            print('2b')
                                            status = '2b'
                                            stuff_for_frontend.update({
                                                'status': '2b',
                                                'statusb': '2b',
                                                'title': tit
                                            })

                    else:
                        print('okkk')
                        stuff_for_frontend.update({
                            'status': '4',
                        })


        #usersacc = RegisterConf.objects.filter(Q(conference__id=idcf, role=3) | Q(conference__id=idcf, socloc=2))
        # print('usersacc', usersacc, request.user.id)
        #access = 0

        #for us in usersacc:
            # print('us', us.user.id, request.user.id)
            #if us.user.id == request.user.id:
                #access = 1
        accesso=0
        if 1==1:#(CreateConf.objects.filter(user=request.user)) or (access == 1):#robert
            #print('si')
            if request.session.get('confid', ''):
                if CreateConf.objects.filter(user=request.user, title=request.session.get('confid', '')):
                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list(
                    #    'id', flat=True)[0]
                    start_date = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'start_date', flat=True)[0]
                    tit = \
                        CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'title', flat=True)[0]
                    recording = \
                        CreateConf.objects.filter(user=request.user,
                                                  id=request.session.get('confid', '')).values_list(
                            'recording', flat=True)[0]

                    # idconf = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('idconf',flat=True)[0]
                    # idrec = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('recidconf',flat=True)[0]
                    # mp4_url = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('mp4_url',flat=True)[0]
                    #print('idff', idcf, tit)
                else:  # tbbb
                    if request.user.is_superuser:
                        querysetother = RegisterConf.objects.filter()  # tbb
                        # print('tttrrezddd', querysetother)
                    else:
                        querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb

                    # querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb
                    # print('tttrrezddd', querysetother)

                    querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item in
                                           querysetother.values('conference').distinct()]

                    mainusers = []
                    if request.user.is_superuser:
                        for i in range(len(querysetotherunique)):
                            if CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                         id=request.session.get('confid', '')):
                                objects = CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                                    id=request.session.get('confid', '')).last()
                                #print('testhjklmgfdklm')
                                idcf = CreateConf.objects.filter(user__id=querysetotherunique[i].conference.user.id,
                                                                 id=request.session.get('confid', '')).values_list(
                                    'id', flat=True)[0]
                                start_date = \
                                    CreateConf.objects.filter(user__id=querysetotherunique[i].conference.user.id,
                                                          id=request.session.get('confid','')).values_list(
                                    'start_date', flat=True)[0]
                                tit = CreateConf.objects.filter(user__id=querysetotherunique[i].conference.user.id,
                                                                id=request.session.get('confid', '')).values_list(
                                    'title', flat=True)[0]
                                recording = \
                                CreateConf.objects.filter(user__id=querysetotherunique[i].conference.user.id,
                                                          id=request.session.get('confid', '')).values_list(
                                    'recording', flat=True)[0]

                    else:
                        for i in range(len(querysetotherunique)):
                            # print('i', i, querysetotherunique[i].conference)
                            if UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user):
                                mainuser = UserLink.objects.filter(conference=querysetotherunique[i].conference,
                                                                   user=request.user).values_list('mainuser',
                                                                                                  flat=True)[0]
                                if mainuser != request.user.id:
                                    querysetotherconf = CreateConf.objects.filter(user=mainuser, id=querysetotherunique[
                                        i].conference.id).order_by('-start_date')
                                    # print('rrez', i, mainuser, querysetotherconf)
                                    mainusers.append(mainuser)

                        if len(mainusers) > 0:
                            for i in range(len(mainusers)):
                                if CreateConf.objects.filter(user__id=mainusers[i],
                                                             id=request.session.get('confid', '')):
                                    # objects = CreateConf.objects.filter(user__id=mainusers[i],
                                    #                                   title=request.session.get('conftit', '')).last()
                                    # print('testhjklmgfdklm')
                                    mainuserchosen = mainusers[i]
                                    idcf = CreateConf.objects.filter(user__id=mainusers[i],
                                                                     id=request.session.get('confid',
                                                                                               '')).values_list(
                                        'id', flat=True)[0]
                                    start_date = CreateConf.objects.filter(user__id=mainusers[i],
                                                                           id=request.session.get('confid',
                                                                                                     '')).values_list(
                                        'start_date', flat=True)[0]
                                    tit = CreateConf.objects.filter(user__id=mainusers[i],
                                                                    id=request.session.get('confid',
                                                                                              '')).values_list(
                                        'title', flat=True)[0]
                                    recording = CreateConf.objects.filter(user__id=mainusers[i],
                                                                          ide=request.session.get('confid',
                                                                                                    '')).values_list(
                                        'recording', flat=True)[0]


            else:
                if CreateConf.objects.filter(user=request.user).exists():
                    idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    tit = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('title', flat=True)[0]
                    start_date = \
                    CreateConf.objects.filter(user=request.user).order_by('-id').values_list('start_date', flat=True)[0]
                    recording = \
                    CreateConf.objects.filter(user=request.user).order_by('-id').values_list('recording', flat=True)[0]
                    # start = CreateConf.objects.filter(user=request.user).order_by('id').values_list('start_date', flat=True)[0]
                    # end = CreateConf.objects.filter(user=request.user).order_by('id').values_list('end_date', flat=True)[0]
                    # idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('idconf', flat=True)[0]
                    # idrec = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('recidconf', flat=True)[0]
                    # mp4_url = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('mp4_url', flat=True)[0]

                else:
                    accesso=1
                    recording=False


            if accesso == 0:
                conftopass = CreateConf.objects.filter(id=idcf)[0]

                stuff_for_frontend.update({
                    'conftopass': conftopass,
                })

            if recording and accesso == 0:
                #print('visio', idcf)  # inayu
                #if conftopass.masterconf:
                #    visio = CreateVisio.objects.filter(conference__masterconfpass=conftopass.masterconfpass, testroom=False)
                #else:
                visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)

                #visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)
                # getnumberofdays = abs(end - start).days + 1
                mp4downloadurl = []
                url = []
                dateday = []
                start = []
                end = []
                tabid = []
                tabnum = []
                titles = []
                public=[]
                redvimurl2 = []

                #print('len', len(visio))
                passla = 0
                visiotest = 0
                lentot = 0
                for i in range(len(visio)):
                    #print('nopi', i)
                    idconf = visio[i].idconf
                    idrec = visio[i].recidconf
                    mp4 = visio[i].mp4_url
                    starte = visio[i].recstart
                    ende = visio[i].recend

                    if visio[i].vimeo_url:
                       #print('nopiz', i, visio[i].vimeo_url, mp4)

                        visiotest = 1
                        # mp4new = mp4.replace('[', '').replace(']', '').replace("'","")
                        # arr = mp4new.split(',')
                        #print('ici check', visio[i].vimeo_url)
                        vimurl2 = visio[i].vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                        arr2 = vimurl2.split(',')

                        startnew = starte.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arrs = startnew.split(',')
                        endnew = ende.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arre = endnew.split(',')

                        #print('mp4,idrec,idconf', mp4, idrec, idconf)
                        #print('arre,arrs', arre, arrs, starte, startnew)#pauline
                        lentot = lentot + len(arr2)
                        if visio[i].rectitles:
                            text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'", "")#replace('"',"")
                            print('te',text2)
                            titles2 = text2.split(',')#split("(?<!\\\\),")#split(',')
                            print('t',titles2)
                            for k in range(len(titles2)):
                                #if titles2[k].startswith("'") and titles2[k].endswith("'"):
                                #    titles2[k] = titles2[k][1:-1]
                                #if titles2[k].startswith('"') and titles2[k].endswith('"'):
                                #    titles2[k] = titles2[k][1:-1]
                                #titles.append(titles2[k].replace('\\\\', '').lstrip())
                                titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'").lstrip())

                        else:
                            titles = [''] * lentot


                        #bobi
                        cur_language = get_language()
                        if cur_language=='fr':
                            pri='Rendre privé'
                            publ='Rendre public'
                        else:
                            pri='Make private'   
                            publ='Make public'       

                        if visio[i].rights:
                            print('vi',visio[i].rights)
                            text22 = visio[i].rights.replace('[', '').replace(']', '').replace("'", "")#.replace(" ","")
                            rights2 = text22.split(',')
                            for k in range(len(rights2)):
                                if rights2[k].lstrip()=='anybody':
                                    public.append(pri)
                                else:
                                    public.append(publ)

                        else:
                            print('rej',visio[i].conference.whorecording,public)
                            for ijk in range(len(arr2)):
                                if visio[i].conference.whorecording=="Only conference participants":
                                    public.append(publ)#"anybody","disable","nobody"
                                else:
                                    public.append(pri)#"anybody","disable","nobody"

                            print('pub',public)

                        for ij in range(len(arr2)):

                            if arr2[ij]:
                                redvimurl = arr2[ij].split('/')[2]
                                #print('redvim', redvimurl)
                                mp4_url = "https://vimeo.com/" + redvimurl
                                vim_play_url = "https://player.vimeo.com/video/" + redvimurl

                            dated = visio[i].date.strftime("%d-%m-%Y")  # https://player.vimeo.com/video/438127510
                            # gerer la front end car la on en passe qu'un
                            if idconf:
                                # api_url, headers = utils.connection('conferences/3e889798e61c')
                                # print('iiiii',idconf)
                                if idrec and vim_play_url:
                                    # print('recording',idrec)
                                    # url.append('https://www.bigmarker.com/recordings/'+str(idrec)+'?width=400&height=600')
                                    url.append(vim_play_url)
                                    redvimurl2.append(redvimurl)
                                    tabid.append(idconf)  # json_list = simplejson.dumps(list)
                                    tabnum.append(str(ij))
                                    start.append(parse_datetime(arrs[ij]))
                                    end.append(parse_datetime(arre[ij]))
                                    #print('tab', tabid, tabnum)
                                    #print('ola', parse_datetime(arrs[ij]), parse_datetime(arre[ij]))
                                    #print('start', arrs[ij], arre[ij])
                                    # start.append(datetime.strptime(arrs[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())
                                    # end.append(datetime.strptime(arre[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())

                                    # end.append(arre[ij])
                                    mp4downloadurl.append(mp4_url)
                                    ##print('gg',info['conference']['title'])
                                    title = tit  # info['conference']['title']
                                    dateday.append(dated)
                                    start_time = start_date  # info['conference']['start_time']
                                    # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                                    # start_time = start_time.strftime("%d %B %Y at %H:%M")
                                    status = '0'
                                    import vimeo

                                    client = vimeo.VimeoClient(
                                        token='ad1e934c05fe16362aebbeac14a3bee6',
                                        key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                                        secret=settings.SECRETVIMEO
                                    )

                                    #response = client.get('/me')  # ,params={"fields": "uri"})
                                    #print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                                    # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                                    response = client.get('/videos/' + redvimurl, params={"fields": "uri,status"})
                                    # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                                    #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                    #print('ffnkjv', response.json()['status'])

                                    if response.status_code == 200:

                                        passla = 1
                                        videostatus = response.json()['status']

                                    else:
                                        videostatus='notavailable'

                                # from django.utils import simplejson
                                #print('lasttab', tabid, tabnum, url, start, end, videostatus, titles)
                                # videostatus='avalaible'#finished
                                #rogers
                                #print('titles',titles)
                                print('en avant')
                                stuff_for_frontend.update({
                                    'status': status,
                                    'archiveurl': url,
                                    'redvimurl2':redvimurl2,
                                    'tabid': tabid,  # json.dumps(tab),
                                    'tabnum': tabnum,
                                    'mp4downloadurl': mp4downloadurl,
                                    'start_time': dateday,
                                    'createvisioid': visio[0].id,
                                    'title': title,
                                    'titles': titles,
                                    'public': public,
                                    'videostatus': videostatus,
                                    'start': start,
                                    'end': end
                                })


                            elif mp4 and not idrec and passla == 0:
                                #print('hjjk')
                                #print('mp4,idrec,idconf2', mp4, idrec, idconf)

                                # from celery.result import AsyncResult
                                # res = AsyncResult(x.task_id)
                                # res.ready()
                                # print('res', res, res.status, res.state)

                                stuff_for_frontend.update({
                                    'status': '2c',
                                    'title': tit,
                                    'createvisioid': visio[i].id
                                })
                            elif passla == 0:
                                #print('rrr')
                                if status != '2b':
                                    # print('pourtant0')
                                    stuff_for_frontend.update({
                                        'status': '2',
                                        'title': tit
                                    })
                            else:
                                #print('pourtant')
                                stuff_for_frontend.update({
                                    'status': '3',
                                })
                    else:
                        if mp4:
                            visiotest = 1
                            #print('ah I see 5')
                            stuff_for_frontend.update({
                                'status': '2c',
                                'createvisioid': visio[i].id,
                                'title': tit
                            })
                        else:
                            #print('right')
                            if visiotest == 0:
                                print('ah I see 2')
                                if visiotest2==0:
                                    print('rrrklm')
                                    stuff_for_frontend.update({
                                        'status': '2',
                                        'createvisioid': visio[i].id,
                                        'title': tit
                                    })



                    if url and i == len(visio) - 1:
                        # url=
                        # session
                        # start
                        # myList = [1, 2, 3, 100, 5]
                        # asorted = sorted(range(len(start)), key=start.__getitem__)

                        B = sorted(range(len(start)), key=lambda x: start[x])
                        asorted = sorted(range(len(start)), key=lambda x: B[x])

                        # print('indices',C)
                        #print('myl', asorted)
                        #print('start1', start)
                        # url = url[asorted]
                        url = [x for _, x in sorted(zip(asorted, url))]
                        redvimurl2 = [x for _, x in sorted(zip(asorted, redvimurl2))]

                        # session = [x for _, x in sorted(zip(asorted, session))]
                        # print('end', end)
                        # print('zip(asorted, end)',list(zip(asorted, end)))
                        # print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                        # qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                        # les end sont pas bons de base, verifiez pk
                        # end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                        end = [x for y, x in sorted(zip(asorted, end))]

                        titles = [x for _, x in sorted(zip(asorted, titles))]

                        tabid = [x for _, x in sorted(zip(asorted, tabid))]
                        tabnum = [x for _, x in sorted(zip(asorted, tabnum))]
                        public = [x for y, x in sorted(zip(asorted, public))]

                        # sorted_arr2 = arr2[arr1inds[::-1]]
                        #print('url', url)
                        # print('session', session)
                        #print('end', end)
                        #print('titles', titles)
                        #print('tabid', tabid)
                        #print('tabnum', tabnum)

                        start.sort()

                        # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                        #print('start2', start)
                        stuff_for_frontend.update({
                            'archiveurl': url,
                            'redvimurl2': redvimurl2,
                            # 'sessiontit': session,
                            #'asorted':asorted,
                            'titles': titles,
                            'public': public,
                            'tabid': tabid,
                            'tabnum': tabnum,
                            # 'videostatus': videostatus,
                            'start': start,
                            'end': end
                        })

            else:  # novideo anyway
                stuff_for_frontend.update({
                    'status': '4b',
                })
        else:

            status = '4'  # nada#0ok
            stuff_for_frontend.update({
                'status': status,
            })
        return render(request, 'my_app/myarchive.html', stuff_for_frontend)

def video(request,idvim=None):
    stuff_for_frontend = {

    }
    if idvim:
        video = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
            conference__whorecording__in=["Everyone", "Only conference participants"], testroom=False)  # .order_by('-date')

        print('video',video)
        vidfound=0
        for vidl in video:  # manou
            if vidfound==0:

                taskid3 = vidl.vimeo_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
                arr2 = taskid3.split(',')
                print('arr2',arr2)
                stringidvim='/videos/'+str(idvim)
                if stringidvim in arr2:
                    print('whaou')
                    vidfound=1
                    indexvid=arr2.index(stringidvim)
                    print('indexvid',indexvid)

                    if vidl.recstart:
                        startnew = vidl.recstart.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arrs = startnew.split(',')[indexvid]
                    if vidl.recend:
                        endnew = vidl.recend.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arre = endnew.split(',')[indexvid]

                    if vidl.rectitles:
                        taskid4 = vidl.rectitles.replace('[', '').replace(']', '').replace("'", '')#.replace(" ", "")
                        arr4 = taskid4.split(',')[indexvid]

                    if vidl.rights:
                        taskid5 = vidl.rights.replace('[', '').replace(']', '').replace("'", '')#.replace(" ", "")
                        arr5 = taskid5.split(',')[indexvid]
                    else:
                        arr5=[]
                        if vidl.conference.whorecording=="Everyone":
                            arr5='anybody'
                        elif vidl.conference.whorecording=="Only conference participants":
                            arr5='disable'
                        else:
                            arr5='nobody'

                    cansee=False
                    if request.user.is_authenticated:

                        if vidl.conference.masterconf or vidl.conference.daughterconf:
                            parses = CreateConf.objects.filter(masterconfpass=vidl.conference.masterconfpass,
                                                               masterconf=True).values_list('parsession', flat=True)[0]

                            if parses:
                                print('y378')

                                alloweduserstoseevideo = RegisterConf.objects.filter(
                                    conference__masterconfpass=vidl.conference.masterconfpass, user=request.user,
                                    status=1)
                            else:
                                print('y4678')

                                alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                                     user=request.user,
                                                                                     status=1)
                        else:
                            print('y5678')

                            alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                                 user=request.user,
                                                                                 status=1)
                        if alloweduserstoseevideo:
                            print('y6')

                            cansee = True

                        if cansee:
                                accesso=True
                        else:
                                accesso=False
                    else:
                        accesso=False

                    if 1==1:
                        if (arr5.lstrip()=='anybody') or (arr5.lstrip()=='disable' and accesso==True):
                            redvimurll = arr2[indexvid].split('/')[2]

                            import vimeo

                            client = vimeo.VimeoClient(
                                token='ad1e934c05fe16362aebbeac14a3bee6',
                                key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                                secret=settings.SECRETVIMEO
                            )

                            response = client.get('/videos/' + redvimurll,
                                                  params={"fields": "uri,status,duration,stats"})
                            if response.status_code == 200:
                                videonbvie = response.json()['stats']
                                videonbview = videonbvie['plays']
                                nbviews=videonbview
                            else:
                                nbviews='Come back later to see the number of views'
                                # print('oooo',videonbvie,videonbview)
                                # countvduration += videodur / 60. / 60.  # in hour
                            # nbviews, titl, linkl
                            # print('redvimhome', redvimurll)
                            #mp4_urll = "https://vimeo.com/" + redvimurll
                            vim_play_urll = "https://player.vimeo.com/video/" + redvimurll
                            urll=vim_play_urll
                            info=vidl
                            # print('urll',urll,len(urll))
                            start=parse_datetime(arrs)
                            end=parse_datetime(arre)

                            # print('urll', urll)
                            if arr4:
                                titl=arr4.replace("#@&", ",").replace("($%£)", "'")
                            else:
                                titl=''
                            if arrs:
                                recs=parse_datetime(arrs)
                            if arre:
                                rece=parse_datetime(arre)
                            if arr5:
                                rightse=arr5
                            # if vidl.subj:
                            #   subjl.append(arr5[ij])

                            #linkl.append(mp4_urll)

                            stuff_for_frontend.update({
                                'status': 1,
                                'info': info,
                                #'linkl': linkl,
                                'urll': urll,
                                #'urlll': urll,
                                'redvimurll':redvimurll,
                                'tit': titl,
                                'recs': start,  # recs,
                                'rece': end,  # rece,
                                'nbviews': nbviews
                                # 'subj':subjl
                            })
                        else:#idvim given but not allowed
                            stuff_for_frontend.update({
                                'status': 3
                            })
        if vidfound==0:#idvim given but does not exist
            stuff_for_frontend.update({
                'status': 2
            })
    else:
        stuff_for_frontend.update({
            'status':0
        })
    return render(request, 'my_app/video.html', stuff_for_frontend)


@confirm_password
def archive(request):
    #if not request.user.is_authenticated:
    if 1==0:
        stuff_for_frontend = {
            'comingfrom': 'archive',
            'linkfrom': '',
            'confnum': 0
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)

    else:
        clu=utils.conf_list_user(request)
                    

        stuff_for_frontend = {
            'status': '1',
            'conf_list_user':clu,
        }
        # visioqueryurl = CreateVisio.objects.exclude(mp4_url=None).filter(conference__whorecording="Everyone",
        #                                                                testroom=False).order_by('-date')

        if CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').exclude(testroom=True):
            # tit=
            # start_date=
            # idrec = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('recidconf',flat=True)[0]
            # mp4_url = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('mp4_url',flat=True)[0]
            ##print('idff', idcf,idconf)
            nvideo = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').exclude(
                testroom=True).count()
            # print('nvideo',nvideo)
            urll = []
            linkl = []
            titl = []
            info = []
            recs = []
            rece = []
            rightse = []
            start=[]
            end=[]
            nbviews=[]
            accesso= []
            redvimurl2=[]
            idconf=[]

            if nvideo > 0:
                #print('k', nvideo)
                video = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
                    conference__whorecording__in=["Everyone","Only conference participants"], testroom=False)#.order_by('-date')
                #videopart = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
                #    conference__whorecording="Only conference participants", testroom=False)#.order_by('-date')

                # url='https://www.bigmarker.com/recordings/'+str(idrec)+'?height=600&width=400'
                # mp4downloadurl=mp4_url
                ##print('gg',info['conference']['title'])
                # title=tit#info['conference']['title']
                # start_time=start_date#info['conference']['start_time']
                # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                # start_time = start_time.strftime("%d %B %Y at %H:%M")
                # videos.append(vid)
                # print('kt')

                for vidl in video:  # manou
                    #taskid2 = vidl.mp4_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
                    #arr = taskid2.split(',')

                    taskid3 = vidl.vimeo_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
                    arr2 = taskid3.split(',')

                    if vidl.recstart:
                        startnew = vidl.recstart.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arrs = startnew.split(',')
                    if vidl.recend:
                        endnew = vidl.recend.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arre = endnew.split(',')

                    if vidl.rectitles:
                        taskid4 = vidl.rectitles.replace('[', '').replace(']', '').replace("'", '')#.replace(" ", "")
                        arr4 = taskid4.split(',')

                    if vidl.rights:
                        taskid5 = vidl.rights.replace('[', '').replace(']', '').replace("'", '')#.replace(" ", "")
                        arr5 = taskid5.split(',')
                    else:
                        arr5=[]
                        if vidl.conference.whorecording=="Everyone":
                            for k in range(len(arr2)):
                                arr5.append('anybody')
                        elif vidl.conference.whorecording=="Only conference participants":
                            for k in range(len(arr2)):
                                arr5.append('disable')
                        else:
                            for k in range(len(arr2)):
                                arr5.append('nobody')

                    cansee=False
                    if request.user.is_authenticated:

                        if vidl.conference.masterconf or vidl.conference.daughterconf:
                            parses = CreateConf.objects.filter(masterconfpass=vidl.conference.masterconfpass,
                                                               masterconf=True).values_list('parsession', flat=True)[0]

                            if parses:
                                print('y3')

                                alloweduserstoseevideo = RegisterConf.objects.filter(
                                    conference__masterconfpass=vidl.conference.masterconfpass, user=request.user,
                                    status=1)
                            else:
                                print('y4')

                                alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                                     user=request.user,
                                                                                     status=1)
                        else:
                            print('y5')

                            alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                                 user=request.user,
                                                                                 status=1)
                        if alloweduserstoseevideo:
                            print('y6')

                            cansee = True

                        if cansee:
                            for kf in range(len(arr2)):

                                accesso.append(True)
                        else:
                            for kf in range(len(arr2)):

                                accesso.append(False)
                    else:
                        for kf in range(len(arr2)):

                            accesso.append(False)


                    for ij in range(len(arr2)):
                        if (arr5[ij].lstrip()=='anybody') or (arr5[ij].lstrip()=='disable' and accesso[ij]==True):
                            redvimurll = arr2[ij].split('/')[2]

                            

                            #response = client.get('/videos/' + redvimurll,params={"fields": "uri,status,duration,stats,metadata"})
                            if 1==1:# response.status_code == 200:

                                #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                # print('ffnkjv', response.json()['status'])

                                # videostatus = response.json()['status']
                                #videodur = response.json()['duration']  # in seconds
                                #videonbvie = response.json()['stats']
                                videonbview = 1# videonbvie['plays']

                                #videothumbnails=response.json()['metadata']
                                #v1=videothumbnails['connections']
                                #v2=v1['pictures']
                                #videouri=v2['uri']
                                #print('thumbnails',v2)

                                #response2 = client.post(videouri)
                                #print('response.json()',response2.json())
                                nbviews.append(videonbview)
                            else:
                                nbviews.append('Come back later to see the number of views')
                                # print('oooo',videonbvie,videonbview)
                                #countvduration += videodur / 60. / 60.  # in hour
                            #nbviews, titl, linkl
                            #print('redvimhome', redvimurll)
                            mp4_urll = "https://vimeo.com/" + redvimurll
                            vim_play_urll = "https://player.vimeo.com/video/" + redvimurll
                            urll.append(vim_play_urll)
                            idconf.append(vidl.conference.id)
                            redvimurl2.append(redvimurll)
                            info.append(vidl)
                            #print('urll',urll,len(urll))
                            start.append(parse_datetime(arrs[ij]))
                            end.append(parse_datetime(arre[ij]))

                            #print('urll', urll)
                            if vidl.rectitles:
                                titl.append(arr4[ij].replace("#@&", ",").replace("($%£)", "'"))
                            else:
                                titl.append('')
                            if vidl.recstart:
                                recs.append(parse_datetime(arrs[ij]))
                            if vidl.recend:
                                rece.append(parse_datetime(arre[ij]))
                            if vidl.rights:
                                rightse.append(arr5[ij])
                            # if vidl.subj:
                            #   subjl.append(arr5[ij])

                            linkl.append(mp4_urll)
                            # arr[ij] + "?access_token=" + utils.generateToken()

                    # redvimurll = vidl.vimeo_url.split('/')[2]
                    # print('redvim', redvimurll)
                    # mp4_urll = "https://vimeo.com/" + redvimurll
                    # vim_play_urll = "https://player.vimeo.com/video/" + redvimurll

                    # urll.append(vim_play_urll)
                #print('urll2', urll)
                #print('tit', titl)

                if urll:
                    # url=
                    # session
                    # start
                    # myList = [1, 2, 3, 100, 5]
                    #asorted = sorted(range(len(start)), key=start.__getitem__)

                    B = sorted(range(len(start)), key=lambda x: start[x])
                    asorted = sorted(range(len(start)), key=lambda x: B[x])

                    #print('indices',C)
                    #print('myl', asorted)
                    #print('arrssss', start)
                    # url = url[asorted]
                    urll = [x for _, x in sorted(zip(asorted, urll), reverse=True)]
                    redvimurl2 = [x for _, x in sorted(zip(asorted, redvimurl2), reverse=True)]
                    idconf = [x for _, x in sorted(zip(asorted, idconf), reverse=True)]

                    #session = [x for _, x in sorted(zip(asorted, session))]
                    #print('end', end)
                    #print('zip(asorted, end)',list(zip(asorted, end)))
                    #print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                    #qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                    #les end sont pas bons de base, verifiez pk
                    #end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                    end = [x for y, x in sorted(zip(asorted, end), reverse=True)]

                    #titl, linkl, nbviews, info
                    titl = [x for y, x in sorted(zip(asorted, titl), reverse=True)]
                    linkl = [x for y, x in sorted(zip(asorted, linkl), reverse=True)]
                    nbviews = [x for y, x in sorted(zip(asorted, nbviews), reverse=True)]
                    info = [x for y, x in sorted(zip(asorted, info), reverse=True)]

                    #print('info2',urll,len(urll))
                    #titles = [x for _, x in sorted(zip(asorted, titles))]
                    #rights = [x for _, x in sorted(zip(asorted, rights))]

                    # sorted_arr2 = arr2[arr1inds[::-1]]
                    #print('url', url)
                    #print('session', session)
                    #print('end', end)
                    #print('titles', titles)

                    start.sort(reverse=True)

                    # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                    #print('arrssss2', start)
                    #stuff_for_frontend.update({
                    #    'archiveurl': url,
                    #    'sessiontit': session,
                    #    'titles': titles,
                    #    'rights': rights,
                    #    # 'videostatus': videostatus,
                    #    'start': start,
                    #    'end': end
                    #})

                stuff_for_frontend.update({
                    'status': '0',
                    'nvideo': nvideo,
                    'video': video,
                    'info': info,
                    'linkl': linkl,
                    'urll': urll,
                    'redvimurl2':redvimurl2,
                    'urlll': urll,
                    'tit': titl,
                    'recs': start,#recs,
                    'rece': end,#rece,
                    'nbviews':nbviews,
                    'idconf':idconf
                    # 'subj':subjl
                })

                # print('nvideo',nvideo)
                
        else:
            # zero conf
            status = '4'  # nada#0ok

            stuff_for_frontend.update({
                'status': status,
            })
        return render(request, 'my_app/archive.html', stuff_for_frontend)



@confirm_password
def archiveproc(request):
    stuff_for_frontend = {
    }
    if not request.user.is_authenticated:
        stuff_for_frontend.update({
            'comingfrom': 'archiveproc',
            'linkfrom': '',
            'confnum': 0
        })
        return render(request, 'my_app/login.html', stuff_for_frontend)

    else:

        # procs = Proceeding.objects.filter(status=1)
        procs = Proceeding.objects.exclude(text__isnull=True).exclude(text='').filter(conference__proceedin=True,
                                                                                      status=1).order_by('-updated_on')

        html2 = []
        i = []
        html = procs.values_list('texthtml', flat=True)
        j = 0
        for htm in html:
            htm = htm.replace("katex--inline", "math")
            htm = htm.replace("katex--display", "math")
            html2.append(htm)
            i.append(j)
            j = j + 1

        stuff_for_frontend.update({
            'procs': procs,
            'html': html2,
            'ind': i
        })

        # if (CreateConf.objects.exclude(recordingid__isnull=True).exclude(recordingid__exact=''):#add recordinid field and then do that
        # idcf = CreateConf.objects.filter(user=request.user).order_by('id').values_list('id', flat=True)[0]
        # start = CreateConf.objects.filter(user=request.user).order_by('id').values_list('start_date', flat=True)[0]
        # end = CreateConf.objects.filter(user=request.user).order_by('id').values_list('end_date', flat=True)[0]
        # idconf = CreateConf.objects.filter(user=request.user).order_by('id').values_list('idconf', flat=True)[0]

        status = '4'  # nada#0ok
        stuff_for_frontend.update({
            'status': status,
        })
        return render(request, 'my_app/archiveproc.html', stuff_for_frontend)


@confirm_password
def changepass(request):
    if not request.user.is_authenticated:
        stuff_for_frontend = {
            'comingfrom': 'profile',
            'linkfrom': '',
            'confnum': 0
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)
    else:
        # print('suisla')
        if request.method == 'POST':
            # print('else3')
            changepass_form = PasswordChangeForm(request.user, request.POST)
            if changepass_form.is_valid():
                # print('else4')
                user = changepass_form.save()
                update_session_auth_hash(request, user)  # Important!
                messages.success(request, 'Your password was successfully updated!')
                with sessions.Session() as session:
                    # log-in as admin
                    # rocket = RocketChat(user_id='ds6wgKPapWQgaBAhd',auth_token='wlRqGekGAtLYNpeFPAG5s74t0k_9qa6_oWUw0ZWua30',server_url='https://chat.carbonfreeconf.com', session=session)
                    try:
                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                            server_url='https://chat.carbonfreeconf.com',
                                            session=session)
                    except:
                        subject = "Nooooooooo Rocket chat what????"
                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                        emailto = []
                        emailto.append("quentin.kral@gmail.com")
                        emailto.append("carbonfreeconf@gmail.com")

                        email = EmailMessage(
                            subject,
                            message,
                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                            emailto,  # to
                            # getemails,  # bcc
                            # reply_to=replylist,
                            headers={'Message-From': 'www.carbonfreeconf.com'},
                        )
                        email.content_subtype = "html"

                        #email.send(fail_silently=False)
                    # pprint(rocket.me().json())

                    # create user
                    # pprint(rocket.users_create(email=request.user.email,name=request.user.first_name+request.user.last_name,password=request.user.password,username=request.user.username).json())
                    # def users_update(self, user_id, **kwargs):
                    contentuser = rocket.users_info(username=request.user.username).json()
                    key = contentuser['user']['_id']

                    content = rocket.users_update(user_id=key,password=changepass_form.cleaned_data['new_password1']).json()
                    pprint(content)


                    # def users_reset_avatar(self, user_id=None, username=None, **kwargs):

                    # key = content['user']['_id']
                    # print('key', key)
                    rocket.logout()

                response_data = {}
                response_data['cool'] = "cool"

                ##print('whyyyyyyyyyu', response_data, json.dumps(response_data))

                return HttpResponse(
                    json.dumps(response_data),
                    content_type="application/json"
                )

                # return HttpResponseRedirect(reverse('my_app:profile'))

            else:
                # messages.error(request, 'Please correct the error below.')
                # print('else')
                # messages.error(request, 'Please correct the error below.')
                response_data = {}
                response_data['cool'] = "pascool"

                # print('whyyyyyyyyyu', response_data, json.dumps(response_data))

                return HttpResponse(
                    json.dumps(response_data),
                    content_type="application/json"
                )
                # return render(request, 'my_app/changepass.html', stuff_for_frontend)

        else:
            # print('else2')
            changepass_form = PasswordChangeForm(request.user)

        stuff_for_frontend = {
            'changepass': changepass_form
        }
        return render(request, 'my_app/changepass.html', stuff_for_frontend)

def forgotpassacc(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        changepass = request.POST.get('changepass')
        pass1 = request.POST.get('pass1')
        pass2 = request.POST.get('pass2')
        reset = request.POST.get('reset')

        if reset=='reset':
            #print('u',username)
            if User.objects.filter(username=username).exists():
                usertochange=User.objects.filter(username=username)[0]

                profile = UserProfileInfo.objects.filter(user=usertochange)[0]

                is_uniquef = False
                #print('rfr')
                while not is_uniquef:
                    uniquelinkpass = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                    #print('o', uniquelinkpass)
                    is_uniquef = not (UserProfileInfo.objects.filter(forgotpass=uniquelinkpass).exists())
                    #print('rtgce')

                profile.forgotpass = uniquelinkpass
                profile.save()
                urlpass = 'https://www.carbonfreeconf.com/forgot-pass?u=' + usertochange.username + '&p=' + uniquelinkpass
                #print('urlpass', urlpass)

                email=usertochange.email

                message = "<p>Dear "+usertochange.first_name+" "+usertochange.last_name+",</p>"
                message+= "<p>You have just asked to reset your CarbonFreeConf password for the username: "+usertochange.username+"</p>"
                message+= "<p>Click on the link below and you will be directed towards a page where you will enter your new password!</p>"
                message +="Link to enter your new password: "+urlpass
                message +="<br>"
                message +="<p>Have fun using CarbonFreeConf,</p>"
                message +="The CarbonFreeConf team"

                subject = "Request to change your password on CarbonFreeConf"
                emailto = []
                emailto.append(email)
                #print('emailto', emailto)
                #print(subject)
                #print(message)
                email2 = EmailMessage(
                    subject,
                    message,
                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                    emailto,  # to
                    # getemails,  # bcc
                    # reply_to=replylist,
                    headers={'Message-From': 'www.carbonfreeconf.com'},
                )
                email2.content_subtype = "html"

                email2.send(fail_silently=False)

            #print('pk')
            return HttpResponseRedirect(reverse('my_app:home'))

        elif changepass=='changepass':
            stuff_for_frontend={}
            #from django.contrib.auth.models import User
            u = User.objects.get(username=username)
            #print('chpa')
            if pass1==pass2:
                #print('chpa2')
                #validators = [MinimumLengthValidator, NumberValidator, UppercaseValidator]
                #'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
                #'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
                #'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
                #'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                from django.contrib.auth.password_validation import validate_password
                from django.core.exceptions import ValidationError

                try:
                    validate_password(pass1, u)
                #except ValidationError as e:
                #    form.add_error('password', e)

                    #print('chpa3')

                    u.set_password(pass1)
                    u.save()
                    messages.success(request, 'Your password was successfully updated and you can now log-in!',extra_tags='good')
                    with sessions.Session() as session:
                        # log-in as admin
                        # rocket = RocketChat(user_id='ds6wgKPapWQgaBAhd',auth_token='wlRqGekGAtLYNpeFPAG5s74t0k_9qa6_oWUw0ZWua30',server_url='https://chat.carbonfreeconf.com', session=session)
                        try:
                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                server_url='https://chat.carbonfreeconf.com',
                                                session=session)
                        except:
                            subject = "Nooooooooo Rocket chat what????"
                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                            emailto = []
                            emailto.append("quentin.kral@gmail.com")
                            emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            #email.send(fail_silently=False)
                        # pprint(rocket.me().json())

                        # create user
                        # pprint(rocket.users_create(email=request.user.email,name=request.user.first_name+request.user.last_name,password=request.user.password,username=request.user.username).json())
                        # def users_update(self, user_id, **kwargs):
                        contentuser = rocket.users_info(username=u.username).json()
                        key = contentuser['user']['_id']

                        content = rocket.users_update(user_id=key,
                                                      password=pass1).json()
                        pprint(content)

                        # def users_reset_avatar(self, user_id=None, username=None, **kwargs):

                        # key = content['user']['_id']
                        # print('key', key)
                        rocket.logout()

                except ValidationError as e:
                    messages.error(request, str(e))
                    #print('error')
                    messages.error(request, 'Your password is not secured enough, please try again!',extra_tags='secu')

            else:
                #print('chpa3')

                messages.error(request, 'The two passwords you entered were different, please try again!',extra_tags='secu')

            stuff_for_frontend.update({'good': 1, 'username': username})
            #print('rfdeeds')
            return render(request, 'my_app/newpass.html', stuff_for_frontend)

            #return render(request, 'my_app/login.html', stuff_for_frontend)

            #response_data = {}
                #response_data['cool'] = "cool"

                ##print('whyyyyyyyyyu', response_data, json.dumps(response_data))

                #return HttpResponse(
                #    json.dumps(response_data),
                #    content_type="application/json"
                #)
        else:
            return HttpResponseRedirect(reverse('my_app:home'))

    else:

        username = request.GET.get('u', '')
        password = request.GET.get('p', '')

        #print('re', username, password)
        stuff_for_frontend = {}
        if username and password:
            #print('oki')
            if UserProfileInfo.objects.filter(user__username=username).exists():
                realpass = UserProfileInfo.objects.filter(user__username=username)[0]
                # realpass.active=False

                if realpass.forgotpass == password:
                    # good to go
                    #print('good to go')
                    #realpass.active = True
                    #realpass.save()
                    good = 1

                else:
                    #print('not right')
                    good = 0

            else:
                return HttpResponseRedirect(reverse('my_app:home'))

            stuff_for_frontend.update({'good': good, 'username': username})
            #print('rfdee')
            return render(request, 'my_app/newpass.html', stuff_for_frontend)

        else:
            return HttpResponseRedirect(reverse('my_app:home'))


@confirm_password
def forgotpass(request,web=None):
    stuff_for_frontend={}

    if web:
        #print('erweb',web)
        stuff_for_frontend.update({'web':web})

    if request.method == 'POST':
        #print('web',web)
        #username = request.POST.get('username')
        em = request.POST.get('email')
        #fname = request.POST.get('fname')
        #ins = request.POST.get('ins')

        #print('yooooouser',username)
        if User.objects.filter(email__iexact=em).exists():
            usertochange=User.objects.filter(email__iexact=em)[0]


        #if usertochange.email.lower()==em.lower()# and usertochange.first_name.lower()==fname.lower() and usertochange.userprofileinfo.institute.lower()==ins.lower():
            #letters_and_digits = string.ascii_letters + string.digits
            #length=8
            #result_str = ''.join((random.choice(letters_and_digits) for i in range(length)))
            #print("Random alphanumeric String is:", result_str)

            #usertochange.set_password(result_str)
            #usertochange.save()
            #print('rt',User.objects.filter(username=username)[0])#laura
            profile = UserProfileInfo.objects.filter(user=usertochange)[0]

            is_uniquef = False
            #print('rfr')
            while not is_uniquef:
                uniquelinkpass = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))
                #print('o', uniquelinkpass)
                is_uniquef = not (UserProfileInfo.objects.filter(forgotpass=uniquelinkpass).exists())
                #print('rtgce')

            profile.forgotpass = uniquelinkpass
            profile.save()
            urlpass = 'https://www.carbonfreeconf.com/forgot-pass?u=' + usertochange.username + '&p=' + uniquelinkpass
            #print('urlpass', urlpass)

            email=usertochange.email

            message = "<p>Dear "+usertochange.first_name+" "+usertochange.last_name+",</p>"
            message+= "<p>You have just asked to reset your CarbonFreeConf password for the username: "+usertochange.username+"</p>"
            message+= "<p>Click on the link below and you will be directed towards a page where you will enter your new password!</p>"
            message +="Link to enter your new password: "+urlpass
            message +="<br>"
            message +="<p>Have fun using CarbonFreeConf,</p>"
            message +="The CarbonFreeConf team"

            subject = "Request to change your password on CarbonFreeConf"
            emailto = []
            emailto.append(email)
            #print('emailto', emailto)
            #print(subject)
            #print(message)
            email2 = EmailMessage(
                subject,
                message,
                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                emailto,  # to
                # getemails,  # bcc
                # reply_to=replylist,
                headers={'Message-From': 'www.carbonfreeconf.com'},
            )
            email2.content_subtype = "html"

            email2.send(fail_silently=False)

            #print('ff')
        #print('web',web)
        if web:
            return HttpResponseRedirect(reverse('my_app:website', args=(web, 'registration')))
        else:
            return render(request, 'my_app/login.html', stuff_for_frontend)

    return render(request, 'my_app/forgotpass.html', stuff_for_frontend)


@confirm_password
def joinconf(request, confnum=None, test=None, privpass=None):
    problem = 0

    cb = request.GET.get("cb", None)
    inj=0
    if cb=='1':
        inj=2

    #print('cb',cb,confnum,test,privpass)
    if privpass:
        if privpass.endswith("user1test@lambdal9prout2453219"):
            privpass=privpass.replace("user1test@lambdal9prout2453219","")
            #print('privpass',privpass)
            userlog = authenticate(username='testaccount',
                                   password='Ibe23li45eve8Ic76anFFF')
            print('userlog',userlog)
            if userlog:
                login(request, userlog)

    if not request.user.is_authenticated:
        linkfrom=request.build_absolute_uri().split('/')
        #print(len(linkfrom))
        print('linkfrom',linkfrom)
        cur_language = get_language()
        N=0
        if cur_language in linkfrom:
            N=1

        failed=False
        if '?q=wrong' in linkfrom:
            linkfrom.remove('?q=wrong')
            linkfrom.append('') 
            failed=True

        print('lk',linkfrom)

        linkfrom2=''
        if len(linkfrom) > 5+N:
            linkfrom2=linkfrom[4+N]+'/'+linkfrom[5+N]
            print('linkfrom2',linkfrom2)


        stuff_for_frontend = {
            'comingfrom': 'joinconf',
            'linkfrom':linkfrom2,
            'confnum': 0,
            'failed':failed
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)

    else:
        # print('confnumn', confnum)
        record = 0
        testbm = 0
        testbm2 = 0

        #utils.getchannelid()

        if request.method == 'POST':
            confidchange = request.POST.get('conf')
            #print('yooooo',conftitlechange)
            request.session['confid'] = confidchange
            if request.POST.get('recordtalk'):
                record = 1
                #print('cooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeee5')
                talkidd = request.POST.get('talkidd')
                confnum = request.POST.get('confnum')
            if request.POST.get('testbm'):
                testbm = 1
                confnum = request.POST.get('confnum')
                #print('cooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeee4')
            if request.POST.get('testbm2'):
                testbm2 = 1
                #print('cooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeeecooleeeeeeeeeeeeeeee3')
            # print('confnumjoin',confnum)

            if test:
                confnum = request.POST.get('confinv')
                #print('confnumjoin2',confnum)

        idcf = -1
        #print('gggggggggggggggggggggggggg')
        #print('r', privpass)
        if confnum:
            conftopasstest = CreateConf.objects.filter(id=confnum)[0]

            if request.user.is_superuser:
                realuser = CreateConf.objects.filter(id=confnum).values_list('user', flat=True)[0]
                querysetexist = RegisterConf.objects.filter(conference__id=confnum, user=realuser, status=1)  # tbb
                #print('joe here hfsdndfjkvndfvjndfjgnvgf', querysetexist, realuser)
            else:
                if not privpass:#paul
                    # check if invited
                    if conftopasstest.masterconf or conftopasstest.daughterconf:
                        parsest = CreateConf.objects.filter(masterconfpass=conftopasstest.masterconfpass,
                                                           masterconf=True).values_list('parsession', flat=True)[0]

                        if parsest:
                            querysetexist = RegisterConf.objects.filter(conference__masterconfpass=conftopasstest.masterconfpass, user=request.user,
                                                                    status=1)
                        else:
                            querysetexist = RegisterConf.objects.filter(conference__id=confnum, user=request.user,
                                                                        status=1)  # tbb
                    else:
                        querysetexist = RegisterConf.objects.filter(conference__id=confnum, user=request.user,
                                                                status=1)  # tbb

                    #print('ij',querysetexist)
                    # print('tttrrezdddferkjfrlgjrlighjrlighrkghrtkghtrkjghnkrjghrjkgbrkjgbrkgberk', querysetexist)
                else:
                    querysetexist = RegisterConf.objects.filter(conference__id=confnum, status=1)  # tbb
                    #print('ij2')


            if querysetexist:
                idcf = confnum
                conftopass = CreateConf.objects.filter(id=idcf)
                start = CreateConf.objects.filter(id=idcf).values_list(
                    'start_date', flat=True)[0]
                end = CreateConf.objects.filter(id=idcf).values_list(
                    'end_date', flat=True)[0]
                # idconf = CreateConf.objects.filter(id=idcf).values_list('idconf',
                #   flat=True)[0]
                title = CreateConf.objects.filter(id=idcf).values_list('title',
                                                                       flat=True)[0]
                # print('id',idcf,conftopass)
            else:

                stuff_for_frontend = {
                    'problem': problem,
                    'enter_url': "nada",  # list(info['body'][0].values())[1],
                    'confnum': "0",
                    'status': '7'  # 'nada'
                }
                #print('prob',problem)

                return render(request, 'my_app/joinconf.html', stuff_for_frontend)

        #if (CreateConf.objects.filter(user=request.user)) and not confnum:
        if not confnum:
            if request.session.get('confid', ''):
                if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):
                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list(
                    #    'id', flat=True)[0]
                    conftopass = CreateConf.objects.filter(id=idcf)
                    start = \
                        CreateConf.objects.filter(user=request.user,
                                                  id=request.session.get('confid', '')).values_list(
                            'start_date', flat=True)[0]
                    end = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'end_date', flat=True)[0]
                    # idconf = CreateConf.objects.filter(user=request.user,title=request.session.get('conftit', '')).values_list('idconf', flat=True)[0]
                    title = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'title', flat=True)[0]
                else:
                    if request.user.is_superuser:
                        querysetother = \
                        RegisterConf.objects.filter(conference__id=request.session.get('confid', ''))[0]  # tbb
                        # print('tttrrezddd', querysetother)
                    else:
                        if RegisterConf.objects.filter(conference__id=request.session.get('confid', ''),
                                                    user=request.user, role=3).exists():
                            querysetother = \
                            RegisterConf.objects.filter(conference__id=request.session.get('confid', ''),
                                                    user=request.user, role=3)[0]  # tbb
                        else:
                            querysetother=RegisterConf.objects.none()

                    if request.user.is_superuser:

                        mainuser = querysetother.conference.user.id
                        idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=mainuser,
                                                         #id=request.session.get('confid', '')).values_list('id',flat=True)[0]
                        conftopass = CreateConf.objects.filter(id=idcf)
                        start = CreateConf.objects.filter(user__id=mainuser,
                                                          id=request.session.get('confid', '')).values_list(
                            'start_date', flat=True)[0]
                        end = CreateConf.objects.filter(user__id=mainuser,
                                                        id=request.session.get('confid', '')).values_list(
                            'end_date', flat=True)[0]
                        title = CreateConf.objects.filter(user__id=mainuser,
                                                          id=request.session.get('confid', '')).values_list('title',
                                                                                                                flat=True)[
                            0]

                    # print('tttrrezddd', querysetother)
                    else:
                        if querysetother:
                            if UserLink.objects.filter(conference=querysetother.conference, user=request.user):
                                mainuser = UserLink.objects.filter(conference=querysetother.conference,
                                                                   user=request.user).values_list('mainuser', flat=True)[0]

                                if CreateConf.objects.filter(user__id=mainuser,
                                                             title=request.session.get('confid', '')):
                                    idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(user__id=mainuser,
                                                                     #title=request.session.get('conftit', '')).values_list(
                                        #'id', flat=True)[0]
                                    conftopass = CreateConf.objects.filter(id=idcf)
                                    start = CreateConf.objects.filter(user__id=mainuser,
                                                                      id=request.session.get('confid', '')).values_list(
                                        'start_date', flat=True)[0]
                                    end = CreateConf.objects.filter(user__id=mainuser,
                                                                    id=request.session.get('confid', '')).values_list(
                                        'end_date', flat=True)[0]
                                    title = CreateConf.objects.filter(user__id=mainuser,
                                                                      id=request.session.get('confid', '')).values_list(
                                        'title', flat=True)[0]
            else:
                if CreateConf.objects.filter(user=request.user).exists():
                    idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                    conftopass = CreateConf.objects.filter(id=idcf)
                    start = \
                    CreateConf.objects.filter(user=request.user).order_by('-id').values_list('start_date', flat=True)[0]
                    title = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('title', flat=True)[0]
                    end = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('end_date', flat=True)[0]
                    # idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('idconf', flat=True)[0]
                    # moderator=
                else:
                    idcf = -1

        idconf = 0
        clu = utils.conf_list_user(request)
        clui = utils.conf_list_user_inv(request)

        stuff_for_frontend = {"confnum": idcf,
                              'conf_list_user': clu,
                              'conf_list_user_inv': clui,
                              }
        print('i', idcf)
        if int(idcf) > (-1):
            today = date.today()
            # print('today',today,datetime.utcnow().replace(tzinfo=pytz.utc))
            todaytime = datetime.utcnow().replace(tzinfo=pytz.utc)
            visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)
            getnumberofdays = abs(end - start).days + 1
            idconf = visio[0].idconf
            starttime = visio[0].date
            endtime = visio.last().date + timedelta(minutes=visio.last().duration)
            endtimeconf = visio.last().date + timedelta(minutes=visio.last().duration)

            #print('ss', starttime, endtime)
            for i in range(len(visio)):
                if visio[i].date.date() == todaytime.date():
                    starttime = visio[i].date
                    endtime = visio[i].date + timedelta(minutes=visio[i].duration)
                    if cb == '1':
                        idconf = visio[i].idconfcb
                        #idconf = visio[i].idconf
                        startzoom = visio[i].starturlzoomcb
                        joinzoom = visio[i].joinurlzoomcb
                        print('uiocb',idconf,startzoom,joinzoom)
                    else:
                        idconf = visio[i].idconf
                        startzoom = visio[i].starturlzoom
                        joinzoom = visio[i].joinurlzoom
                        print('uio',idconf,startzoom,joinzoom)

            tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
            if tzloc:
                local = pytz.timezone(tzloc)
            else:
                local = pytz.timezone('UTC')

            shift = starttime.astimezone(local).replace(tzinfo=None) - starttime.replace(tzinfo=None)
            # print('shift', shift, tzloc)

            start_date = (starttime + shift).strftime("%Y-%m-%d at %H:%M")
            end_date = (endtime + shift).strftime("%Y-%m-%d at %H:%M")
            start_date2 = (starttime + shift).strftime("%Y-%m-%d")

            timestart = ProgramDesign.objects.filter(conference_id=idcf).values_list('timestart', flat=True)[0]
            timefinish = ProgramDesign.objects.filter(conference_id=idcf).values_list('timefinish', flat=True)[0]
            mineventheight = ProgramDesign.objects.filter(conference_id=idcf).values_list('mineventheight', flat=True)[0]
            heighthr = ProgramDesign.objects.filter(conference_id=idcf).values_list('heighthr', flat=True)[0]
            minieventtime = ProgramDesign.objects.filter(conference_id=idcf).values_list('minieventtime', flat=True)[0]
            opacity = ProgramDesign.objects.filter(conference_id=idcf).values_list('opacity', flat=True)[0]

            if timefinish != 24 and timestart != 0:

                utc = pytz.utc
                utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
                utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

                # yesterday = datetime.today()
                # yesterday = yesterday.replace(hour=10)
                print('utcnow', utc_now_s, utc_now_f)

                # convert to UTC
                utc_date_time_s = utc_now_s.astimezone(local)
                # get time
                utc_time_s = utc_date_time_s.time()
                timestart = utc_date_time_s.hour

                utc_date_time_f = utc_now_f.astimezone(local)
                # get time
                utc_time_f = utc_date_time_f.time()
                timefinish = utc_date_time_f.hour

                if timestart>timefinish:
                    timestart=0
                    timefinish=24

                print('ts',timestart,timefinish)
            #if (CreateConf.objects.filter(user=request.user)) or confnum:
            if int(idcf) > (-1) or confnum:

                #print('cftp',confnum,CreateConf.objects.filter(user=request.user))
                if Website.objects.filter(conference=conftopass[0]):
                    web = Website.objects.get(conference=conftopass[0])
                    stuff_for_frontend.update({
                        'web': web,
                    })
                abstract = RegisterConf.objects.filter(conference=conftopass[0], status=1,
                                                       type__in=[1, 2, 3, 6]).order_by('user__last_name')  # .values_list('abstract', flat=True)
                posters = RegisterConf.objects.filter(conference=conftopass[0], status=1,
                                                      type=4).order_by('user__last_name')  # .values_list('abstr

                print('posters',posters)
                #severine
                idposters=[]
                for pos in posters:
                    #print('posslid',pos.slides.url,pos.slides)
                    if pos.slides or pos.mp4_url:
                        if pos.slides:
                            print('slides',pos.slides)
                        idposters.append(pos.id)
                        #print('idpos',pos.id)

                randpos=0
                if len(idposters)>0:
                    #print('randpos',random.randint(0,len(idposters)-1),len(idposters))
                    randpos=random.randint(0, len(idposters)-1)


                # from easy_thumbnails.files import get_thumbnailer
                # print('io',posters[0].slides)
                # thumb_url = get_thumbnailer(posters[0].slides)['poster'].url

                #print('posetsrddjfjffhhfhfhjdjjd', posters)
                # abstract = list(abstract)
                # print('thumb djlkcnjklncjkncjkcnfjkcnfjkcnkf',thumb_url)

                organisers = RegisterConf.objects.filter(conference=conftopass[0], status=1,
                                                         role=3).order_by('user__last_name')  # .values_list('abstract', flat=True)
                # #print(organisers,RegisterConf.objects.values('user'))
                org_list = [organisers.filter(user=item['user']).last() for item in
                            organisers.values('user').distinct()]
                # org_list=organisers
                # print('org', org_list)
                peopleall = RegisterConf.objects.filter(conference=conftopass[0], status=1).order_by('user__last_name')
                # all_rows = people
                # Query against the full list to return a list of objects
                item_list = [peopleall.filter(user=item['user']).first() for item in
                             peopleall.values('user').distinct()]
                people = item_list

                peoplesoc = RegisterConf.objects.filter(conference=conftopass[0]).order_by('user__last_name')
                # all_rows = people
                # Query against the full list to return a list of objects
                item_list2 = [peoplesoc.filter(user=item['user']).first() for item in
                              peoplesoc.values('user').distinct()]
                peoplesocloc = item_list2
                # print('socloceee', peoplesocloc)

                orga = False
                progorga = False
                for p in peoplesocloc:
                    if p.socloc == 1:
                        progorga = True
                    if p.socloc == 2:
                        orga = True

                # nbplive=len(UserProfileInfo.objects.filter(isinconf=True))+1
                useractive = UserProfileInfo.objects.filter(isinconf=True).values_list('user', flat=True)
                #print('uac', useractive)

                nbpeople = RegisterConf.objects.filter(conference=conftopass[0], user__in=useractive)
                item_nbpeople = [nbpeople.filter(user=item['user']).first() for item in
                                 nbpeople.values('user').distinct()]
                # print('nb',nbplive)
                nbplive = len(nbpeople) + 1

                facetofaceuser=False
                if conftopass[0].hybrid:
                    if RegisterConf.objects.filter(conference=conftopass[0], user=request.user,status=1,facetoface=True):
                        facetofaceuser=True

                stuff_for_frontend.update({
                    'facetofaceuser': facetofaceuser,
                })

                if RegisterConf.objects.filter(conference=conftopass[0], user=request.user):
                    # print('hereeee')

                    talks = RegisterConf.objects.filter(conference=conftopass[0], user=request.user)

                    stuff_for_frontend.update({
                        'talks': talks,
                    })

                conf_list_session = []

                if Website.objects.filter(conference=conftopass[0]).exists():
                    idweb=Website.objects.filter(conference=conftopass[0]).values_list('id',flat=True)[0]
                    stuff_for_frontend.update({'web': True,'idweb':idweb})


                if conftopass[0].masterconf or conftopass[0].daughterconf:

                    #find masterconf
                    parses=CreateConf.objects.filter(masterconfpass=conftopass[0].masterconfpass, masterconf=True).values_list('parsession',flat=True)[0]

                    if parses:
                        conf_list_session = CreateConf.objects.filter(masterconfpass=conftopass[0].masterconfpass).order_by('masterconfdaughterposition')
                    else:
                        querysetother = RegisterConf.objects.filter(user=request.user, conference__masterconfpass=conftopass[0].masterconfpass, role__lt=4, status=1)  # tbb
                        # print('rrezdddgraphy', querysetother)

                        querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item in
                                               querysetother.values('conference').distinct()]
                        other = 0
                        # print('querysetuniquegraphy', querysetotherunique)
                        querysetotherconf2 = CreateConf.objects.none()

                        if querysetotherunique:
                            for i in range(len(querysetotherunique)):
                                # print('i',i,querysetotherunique[i].conference)
                                # if UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user):
                                # mainuser = UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user).values_list('mainuser', flat=True)[0]
                                # if mainuser != request.user.id:
                                querysetotherconf = CreateConf.objects.filter(
                                    id=querysetotherunique[i].conference.id).order_by('masterconfdaughterposition')
                                # print('rrez',i,mainuser,querysetotherconf)
                                other = 1
                                querysetotherconf2 = querysetotherconf2 | querysetotherconf

                        if other == 1:
                            # print('Geo')
                            queryset = querysetotherconf2

                            conf_list_session = queryset
                        else:
                            conf_list_session = False

                    # print('conf_lllllllllllll',conf_list_session)
                    stuff_for_frontend.update({'conf_list_session': conf_list_session})

                if conftopass[0].daughterconf:
                    stuff_for_frontend.update({
                        'mastconftitle': CreateConf.objects.filter(
                            masterconfpass=conftopass[0].masterconfpass, masterconf=True).values_list('title', flat=True)[0],
                    })

                    confma = CreateConf.objects.filter(masterconfpass=conftopass[0].masterconfpass, masterconf=True)[0]

                    stuff_for_frontend.update({'confma': confma})

                # twitter action

                #print('r')
                #api = utils.startapi()
                #print('z')
                removehashtag = conftopass[0].twitterhashtag.split('#')
                tweet_user = []
                tweet_screenuser = []
                tweet_text = []
                tweet_image = []
                tweet_id = []
                tweet_date = []
                tweet_retweet = []
                tweet_retweetcount = []
                tweet_count = 0

                query = conftopass[0].twitterhashtag  # '#science'
                apirateexc=False
                max_tweets = 6#1000
                '''
                if query != '#':
                      # 1000
                    print('t')

                    try:
                        #print('tt')

                        searched_tweets = [status for status in tweepy.Cursor(api.search, q=query, include_entities=True,
                                                                          tweet_mode="extended").items(max_tweets)]
                        #print('ttt')

                    except:
                        apirateexc=True
                        #print('5')
                    # for tweet in api.search(q="carbon-neutral",rpp=25):#conftopass[0].twitterhashtag):

                    if apirateexc==False:
                        for tweet in searched_tweets:
                            status = api.get_status(tweet.id, tweet_mode="extended")
                            try:
                                # print('t',status.retweeted_status.full_text)
                                tweet_text.append(status.retweeted_status.full_text)

                            except AttributeError:  # Not a Retweet
                                # print('r',status.full_text)
                                tweet_text.append(status.full_text)

                            tweet_user.append(tweet.user.name)
                            tweet_screenuser.append(tweet.user.screen_name)
                            tweet_date.append(tweet.created_at.strftime("%b. %d, %Y, %-I:%M %p"))
                            tweet_retweet.append(tweet.retweeted)
                            tweet_retweetcount.append(tweet.retweet_count)
                            tweet_id.append(tweet.id)

                            # tweet_text.append(tweet.full_text)
                            tweet_count = tweet_count + 1
                            # print(tweet)
                            # print(f"{tweet.user.name},{tweet.user.screen_name}:{tweet.full_text}")
                            # print('tweet count',tweet_count)
                            # print("ID:", tweet.id)
                            # print("User ID:", tweet.user.id)
                            # print("Text:", tweet.full_text)
                            # print("Created:", tweet.created_at)
                            # print("Geo:", tweet.geo)
                            # print("Contributors:", tweet.contributors)
                            # print("Coordinates:", tweet.coordinates)
                            # print("Favorited:", tweet.favorited)
                            # print("In reply to screen name:", tweet.in_reply_to_screen_name)
                            # print("In reply to status ID:", tweet.in_reply_to_status_id)
                            # print("In reply to status ID str:", tweet.in_reply_to_status_id_str)
                            # print("In reply to user ID:", tweet.in_reply_to_user_id)
                            # print("In reply to user ID str:", tweet.in_reply_to_user_id_str)
                            # print("Place:", tweet.place)
                            # print("Retweeted:", tweet.retweeted)
                            # print("Retweet count:", tweet.retweet_count)
                            # print("Source:", tweet.source)
                            # print("Truncated:", tweet.truncated)

                            if 'media' in tweet.entities:
                                for media in tweet.extended_entities['media']:
                                    print('med', media['media_url'])
                                tweet_image.append(media['media_url'])

                            else:
                                tweet_image.append('')
                    else:
                        #rate exceeded
                        stuff_for_frontend.update({
                            'apiratetwitexc': True})

                # tweets_listener = utils.MyStreamListener(api)
                # stream = tweepy.Stream(api.auth, tweets_listener)
                # stream.filter(track=[conftopass[0].twitterhashtag], languages=["en"])
                # print('stream',stream)
                '''

                questionform = QuestionForm()
                questionactive=CreateQuestion.objects.filter(conference=conftopass[0],active=True)
                #manone
                votes=[]

                for qq in questionactive:
                    votes.append(qq.votes.count())

                roleq=False
                if RegisterConf.objects.filter(conference=conftopass[0], user=request.user, status=1).exists():
                    talka = RegisterConf.objects.filter(conference=conftopass[0], user=request.user, status=1)
                    for tb in talka:
                        if tb.role == 1 or tb.role == 3:
                            roleq = True

                #import jwt
                #private_key = b"-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAqCfZ5+GIglQcNTLJTL0uR5+1sDmPdzwcJ+/8gtyxVhZQzteZ\n-----END RSA PRIVATE KEY-----"

                #encoded = jwt.encode({"some": "payload"}, private_key, algorithm="RS256")
                #decoded=jwt.decode(encoded, verify=False)

                #print('decoded',decoded)

                starttimeline = []
                visioo = CreateVisio.objects.filter(conference=conftopass[0], testroom=False).order_by('date')
                tzloc = request.session.get('django_timezone', 'UTC')  # request.session['django_timezone']
                local = pytz.timezone(tzloc)
                shiftr = visioo[0].date.astimezone(local).replace(tzinfo=None) - visioo[0].date.replace(tzinfo=None)
                for v in visioo:
                    start_date_timeline = (v.date + shiftr).strftime("%Y-%m-%d")  # strftime("%x %X")[:-3]
                    # print('r',start_date_timeline)
                    starttimeline.append(start_date_timeline)

                print('s', starttimeline)


                stuff_for_frontend.update({
                    'conftopass': conftopass[0],
                    'starttimeline': starttimeline,
                    'inj': inj,
                    'people': people,
                    'peoplesocloc': peoplesocloc,
                    'orga':orga,
                    'progorga':progorga,
                    'abstract': abstract,
                    'posters': posters,
                    'randpos':randpos,
                    'idposters':idposters,
                    'organisers': org_list,
                    'nbplive': nbplive,
                    'questionform':questionform,
                    'questionactive':questionactive,
                    'qvotes':votes,
                    'roleq':roleq,
                    'tweettext': tweet_text,
                    'tweetusers': tweet_user,
                    'tweetscreenusers': tweet_screenuser,
                    'tweetimage': tweet_image,
                    'tweetdate': tweet_date,
                    'tweetid': tweet_id,
                    'tweetretweet': tweet_retweet,
                    'tweetretweetcount': tweet_retweetcount,
                    'twitterwhashtag': removehashtag[1],
                    'maxtweets':max_tweets,
                })

                # if not idconf:
                #   problem=1
                #print('starttime,todaytime,endtime',starttime,todaytime,endtime)
                if starttime - timedelta(minutes=60) > todaytime:
                    # /test_room instead of api_attend
                    # url = "https://www.bigmarker.com/conferences/"  # info['enter_uri']
                    # suffix='api_attend'
                    # if not text.endswith(suffix):
                    #    url = text
                    # else:
                    #    url = text[:len(text) - len(suffix)]
                    # url = url + idconf + '/test_room'
                    # print('url', url)
                    # print('date today', today)
                    inj=0
                    stuff_for_frontend.update({
                        'inj': inj,
                    })
                    durationtest = 90
                    durationtest2 = 15

                    if record == 1:
                        # durationtest = 5

                        #print('brah', record)
                        talkk = RegisterConf.objects.filter(id=talkidd)[0]
                        talktitle = RegisterConf.objects.filter(id=talkidd).values_list('title', flat=True)[0]
                        talkk.mp4_url = ''
                        talkk.mp4_url_bm = ''

                        ##visio = CreateVisio.objects.filter(conference=talkk.conference, testroom=False)
                        ##data = talkk.slidesid
                        # print('datmil',data)
                        # if data:
                        # data2 = data.replace('[', '').replace(']', '').replace("'", "").split(',')
                        # print('datmila',data2)
                        #   datai = 0
                        #  for vis in visio:
                        ##delrecinfo = utils.delslidesfunc(data2[datai].strip(), vis.idconf)
                        #     datai = datai + 1

                        ##if delrecinfo is None:
                        ## print('prob delslideinfo')
                        ##else:
                        ##  print('delslidesinfo')#, delslidesinfo, delslidesinfo['success'])

                        # talkk.recid=''

                        idconfb = talkk.idconf
                        talkk.save()
                        talkrecexist = False
                        if talkk.rectalk:
                            # try to connect to see if still alive
                            # idconfb = talkk.idconf
                            mod = "moderator"
                            fname = request.user.first_name + ' ' + request.user.last_name
                            femail = request.user.email

                            if conftopass[0].roomtype == "Big Marker":

                                api_url, headers = utils.connection('conferences/enter')
                                # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                data = {"id": idconfb, "attendee_name": fname, "attendee_email": femail, "role": mod,
                                        "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipants"}
                                # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                # print('data',data)

                                # #print(api_url)
                                # print('idconfz',idconf,start,end,idcf,today)
                                #print('idconfb', idconfb)

                                response = requests.post(api_url, headers=headers, json=data)
                                #print(response.content)
                                #print(response.status_code)
                                #print('rep', response)

                                if response.status_code == 201 or response.content == b'{"type":"conference_setting_up","message":"The server for this conference is setting up. Please wait a few minutes and try again."}':
                                    # it is still alive
                                    talkrecexist = True
                            else:
                                conn = http.client.HTTPSConnection("api.zoom.us")

                                headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                                           'content-type': 'application/json'}

                                conn.request("GET", "/v2/meetings/" + str(idconfb), headers=headers)

                                res = conn.getresponse()
                                dataz = res.read()
                                #print('res', res.status)
                                #print(dataz.decode("utf-8"))
                                if res.status == 200:
                                    talkrecexist = True
                                    joinurlzoomm = json.loads(dataz)['join_url']

                        if not talkrecexist:
                            now = datetime.utcnow()  # .replace(tzinfo=utc)
                            tzloc = request.session.get('django_timezone', 'UTC')
                            local = pytz.timezone(tzloc)
                            shift = now.astimezone(local).replace(tzinfo=None) - now.replace(tzinfo=None)

                            # dateday.append(start_time2 - shift)
                            # now = datetime.utcnow()  # .replace(tzinfo=utc)
                            if conftopass[0].roomtype == "Big Marker":

                                #print('now', now)
                                now_str = now.strftime("%Y-%m-%d %H:%M")
                                data = {"channel_id": CHANNEL_ID, "title": "Pre-recording for " + title,
                                        "start_time": now_str,
                                        "review_emails": False,
                                        "exit_url": "https://www.carbonfreeconf.com/exitpageprerec",
                                        "send_reminder_emails_to_presenters": False,
                                        "registration_conf_emails": False, "send_cancellation_email": False,
                                        "show_reviews": False,
                                        "review_emails": False,
                                        "auto_invite_all_channel_members": False,
                                        "registration_required_to_view_recording": False, "time_zone": "UTC",
                                        "duration_minutes": str(durationtest),
                                        "privacy": "private", "who_can_watch_recording": "channel_admin_only",
                                        "enable_twitter": False}

                                data = json.dumps(data)
                                # print('dat', data)
                                createconfinfo = utils.createconffunc(data)

                            else:
                                fname = request.user.first_name + ' ' + request.user.last_name
                                createconfinfo = utils.createconffunczoominstant(confnum, "0012" + fname)

                            if createconfinfo:
                                mod = "moderator"
                                fname = request.user.first_name + ' ' + request.user.last_name
                                femail = request.user.email
                                #print('cc', createconfinfo)
                                idconftostore = createconfinfo['id']
                                if conftopass[0].roomtype == "Big Marker":
                                    linkconf = createconfinfo['conference_address']
                                else:
                                    joinurlzoomm = createconfinfo['join_url']

                                talk = RegisterConf.objects.filter(id=talkidd)[0]
                                talk.rectalk = True
                                talk.idconf = idconftostore
                                talk.date = now
                                talk.save()

                            if createconfinfo is None:
                                # print('createnone')
                                failedbig = "1"
                                stuff_for_frontend.update({
                                    'conffailed': 1,
                                })

                            if conftopass[0].roomtype == "Big Marker":

                                api_url, headers = utils.connection('conferences/enter')
                                # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                data = {"id": idconftostore, "attendee_name": fname, "attendee_email": femail,
                                        "role": mod,
                                        "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipantsprerec"}
                                # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                # print('data',data)

                                # #print(api_url)
                                # print('idconfz',idconf,start,end,idcf,today)

                                response = requests.post(api_url, headers=headers, json=data)
                                #print(response.content)
                                if response.status_code == 201:
                                    info = json.loads(response.content.decode('utf-8'))
                                    # print(response)
                                    # print(info)
                                    # print(info['enter_uri'])
                                    # the_user = User.objects.get(username=request.user.username)
                                    # the_user.userprofileinfo.isinconf = True
                                    # the_user.userprofileinfo.save()
                                    # recidconf = models.CharField(max_length=100, null=True, blank=True)
                                    # mp4_url = models.CharField(max_length=400, null=True, blank=True)

                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        'enter_url': info['enter_uri'],
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'talktitle': talktitle,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'talkid': talkidd,
                                        'status': '14'  # 'record'
                                    })
                                else:
                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        # 'enter_url': info['enter_uri'],
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'talktitle': talktitle,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'talkid': talkidd,
                                        'status': '13'  # 'record'
                                    })

                            else:
                                enterzoom = joinurlzoomm

                                stuff_for_frontend.update({
                                    'problem': problem,
                                    'idconf': idconftostore,
                                    'enter_url': enterzoom,
                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                    'confnum': idcf,
                                    'title': title,
                                    'start_date': start_date,
                                    'end_date': end_date,
                                    'status': '14'  # 'toosoon'
                                })
                        else:
                            #print('dans else')
                            # idconfb=talkk.idconf
                            mod = "moderator"
                            fname = request.user.first_name + ' ' + request.user.last_name
                            femail = request.user.email

                            if conftopass[0].roomtype == "Big Marker":

                                api_url, headers = utils.connection('conferences/enter')
                                # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                data = {"id": idconfb, "attendee_name": fname, "attendee_email": femail, "role": mod,
                                        "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipantsprerec"}
                                # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                # print('data',data)

                                # #print(api_url)
                                # print('idconfz',idconf,start,end,idcf,today)
                                #print('idconfb', idconfb)

                                response = requests.post(api_url, headers=headers, json=data)
                                #print(response.content)
                                if response.status_code == 201:
                                    info = json.loads(response.content.decode('utf-8'))
                                    # the_user = User.objects.get(username=request.user.username)
                                    # the_user.userprofileinfo.isinconf = True
                                    # the_user.userprofileinfo.save()

                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        'enter_url': info['enter_uri'],
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'talktitle': talktitle,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'status': '14'  # 'record'
                                    })
                                else:
                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        # 'enter_url': info['enter_uri'],
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'talktitle': talktitle,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'talkid': talkidd,
                                        'status': '20'  # 'record'
                                    })
                            else:
                                enterzoom = joinurlzoomm

                                stuff_for_frontend.update({
                                    'problem': problem,
                                    'idconf': idconfb,
                                    'enter_url': enterzoom,
                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                    'confnum': idcf,
                                    'title': title,
                                    'start_date': start_date,
                                    'end_date': end_date,
                                    'status': '14'  # 'toosoon'
                                })

                    elif testbm == 1:
                        # testbm
                        # durationtest = 5

                        talkk = RegisterConf.objects.filter(conference__id=confnum, user=request.user, status=1)[0]
                        idconfb = talkk.idconftest
                        #print('testbm', talkk, talkk.testvirtualroom)

                        talkrecexist = False
                        if not talkk.testvirtualroom or testbm2 == 1:

                            if talkk:
                                # try to connect to see if still alive
                                # idconfb = talkk.idconf
                                mod = "presenter"  # "moderator"
                                fname = request.user.first_name + ' ' + request.user.last_name
                                femail = request.user.email

                                if conftopass[0].roomtype == "Big Marker":
                                    api_url, headers = utils.connection('conferences/enter')
                                    # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                    data = {"id": idconfb, "attendee_name": fname, "attendee_email": femail,
                                            "role": mod,
                                            "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipantstest"}
                                    # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                    # print('data',data)

                                    # #print(api_url)
                                    # print('idconfz',idconf,start,end,idcf,today)
                                    #print('idconfb', idconfb)

                                    response = requests.post(api_url, headers=headers, json=data)
                                    #print(response.content)
                                    #print(response.status_code)
                                    #print('rep', response)

                                    if response.status_code == 201 or response.content == b'{"type":"conference_setting_up","message":"The server for this conference is setting up. Please wait a few minutes and try again."}':
                                        # it is still alive
                                        talkrecexist = True
                                else:
                                    conn = http.client.HTTPSConnection("api.zoom.us")

                                    headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                                               'content-type': 'application/json'}

                                    print('idconfb',idconfb,talkk.title)
                                    conn.request("GET", "/v2/meetings/" + str(idconfb), headers=headers)

                                    res = conn.getresponse()
                                    dataz = res.read()
                                    #print('res', res.status)
                                    #print(dataz.decode("utf-8"))
                                    if res.status == 200:
                                        print('true')
                                        talkrecexist = True
                                        joinurlzoomm = json.loads(dataz)['join_url']

                            if not talkrecexist:
                                now = datetime.utcnow()  # .replace(tzinfo=utc)
                                tzloc = request.session.get('django_timezone', '')
                                local = pytz.timezone(tzloc)
                                shift = now.astimezone(local).replace(tzinfo=None) - now.replace(tzinfo=None)

                                # dateday.append(start_time2 - shift)
                                # now = datetime.utcnow()  # .replace(tzinfo=utc)
                                #print('now', now)
                                now_str = now.strftime("%Y-%m-%d %H:%M")
                                #print('now_str', now_str)

                                if conftopass[0].roomtype == "Big Marker":

                                    data = {"channel_id": CHANNEL_ID,
                                            "title": "Test room for " + fname + " for the conference entitled " + title,
                                            "start_time": now_str,
                                            "review_emails": False,
                                            "exit_url": "https://www.carbonfreeconf.com/exitpagetest",
                                            "send_reminder_emails_to_presenters": False,
                                            "registration_conf_emails": False, "send_cancellation_email": False,
                                            "show_reviews": False,
                                            "review_emails": False,
                                            "auto_invite_all_channel_members": False,
                                            "registration_required_to_view_recording": False, "time_zone": "UTC",
                                            "duration_minutes": str(durationtest2),
                                            "privacy": "private", "who_can_watch_recording": "channel_admin_only",
                                            "enable_twitter": False}

                                    data = json.dumps(data)
                                    # print('dat', data)
                                    createconfinfo = utils.createconffunc(data)

                                else:
                                    createconfinfo = utils.createconffunczoominstant(confnum, fname)

                                if createconfinfo:
                                    mod = "presenter"  # "moderator"
                                    fname = request.user.first_name + ' ' + request.user.last_name
                                    femail = request.user.email
                                    #print('cc', createconfinfo)
                                    idconftostore = createconfinfo['id']
                                    if conftopass[0].roomtype == "Big Marker":
                                        linkconf = createconfinfo['conference_address']
                                    else:
                                        joinurlzoomm = createconfinfo['join_url']

                                    talks = RegisterConf.objects.filter(conference__id=confnum, user=request.user)
                                    print('aquaiiii',talks)

                                    for talk in talks:
                                        talk.testvirtualroom = True
                                        talk.idconftest = idconftostore
                                        talk.datetest = now
                                        talk.save()

                                if createconfinfo is None:
                                    # print('createnone')
                                    failedbig = "1"
                                    stuff_for_frontend.update({
                                        'conffailed': 1,
                                    })

                                if conftopass[0].roomtype == "Big Marker":

                                    api_url, headers = utils.connection('conferences/enter')
                                    # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                    data = {"id": idconftostore, "attendee_name": fname, "attendee_email": femail,
                                            "role": mod,
                                            "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipantstest"}
                                    # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                    # print('data',data)

                                    # #print(api_url)
                                    # print('idconfz',idconf,start,end,idcf,today)

                                    response = requests.post(api_url, headers=headers, json=data)
                                    #print(response.content)
                                    if response.status_code == 201:
                                        info = json.loads(response.content.decode('utf-8'))
                                        # print(response)
                                        # print(info)
                                        # print(info['enter_uri'])
                                        # the_user = User.objects.get(username=request.user.username)
                                        # the_user.userprofileinfo.isinconf = True
                                        # the_user.userprofileinfo.save()
                                        # recidconf = models.CharField(max_length=100, null=True, blank=True)
                                        # mp4_url = models.CharField(max_length=400, null=True, blank=True)

                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            # 'talktitle': talktitle,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            # 'talkid': talkidd,
                                            'status': '18'  # 'record'
                                        })
                                    else:
                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            # 'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            # 'talktitle': talktitle,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            # 'talkid': talkidd,
                                            'status': '17'  # 'record'
                                        })
                                else:

                                    # if mod == "moderator":
                                    # enterzoom = startzoom
                                    # else:
                                    enterzoom = joinurlzoomm

                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        'idconf': idconftostore,
                                        'enter_url': enterzoom,
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'start_date2': start_date2,
                                        'timestart': timestart,
                                        'timefinish': timefinish,
                                        'mineventheight': mineventheight,
                                        'heighthr': heighthr,
                                        'minieventtime': minieventtime,
                                        'opacity': opacity / 10.,
                                        'status': '18'  # 'toosoon'
                                    })

                            else:
                                #print('dans else')
                                # idconfb=talkk.idconf
                                mod = "presenter"  # "moderator"
                                fname = request.user.first_name + ' ' + request.user.last_name
                                femail = request.user.email

                                if conftopass[0].roomtype == "Big Marker":

                                    api_url, headers = utils.connection('conferences/enter')
                                    # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                    data = {"id": idconfb, "attendee_name": fname, "attendee_email": femail,
                                            "role": mod,
                                            "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipantsprerec"}
                                    # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                    # print('data',data)

                                    # #print(api_url)
                                    # print('idconfz',idconf,start,end,idcf,today)
                                    #print('idconfb', idconfb)

                                    response = requests.post(api_url, headers=headers, json=data)
                                    #print(response.content)
                                    if response.status_code == 201:
                                        info = json.loads(response.content.decode('utf-8'))
                                        # the_user = User.objects.get(username=request.user.username)
                                        # the_user.userprofileinfo.isinconf = True
                                        # the_user.userprofileinfo.save()

                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            # 'talktitle': talktitle,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            'status': '18'  # 'record'
                                        })
                                    else:
                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            # 'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            # 'talktitle': talktitle,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            # 'talkid': talkidd,
                                            'status': '19'  # 'record'
                                        })
                                else:
                                    enterzoom = joinurlzoomm

                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        'idconf': idconfb,
                                        'enter_url': enterzoom,
                                        # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        'start_date2': start_date2,
                                        'timestart': timestart,
                                        'timefinish': timefinish,
                                        'mineventheight': mineventheight,
                                        'heighthr': heighthr,
                                        'minieventtime': minieventtime,
                                        'opacity': opacity / 10.,
                                        'status': '18'  # 'toosoon'
                                    })
                        else:
                            # not the right, already used
                            stuff_for_frontend.update({
                                'problem': problem,
                                # 'enter_url': info['enter_uri'],
                                # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                'confnum': idcf,
                                'title': title,
                                # 'talktitle': talktitle,
                                'start_date': start_date,
                                'end_date': end_date,
                                # 'talkid': talkidd,
                                'status': '16'  # 'record'
                            })
                    else:
                        if confnum and not test and not privpass:  # tbd
                            confnotcreated = True
                            idconfb = idconf
                            #print('dattte', datetime.now(), datetime.utcnow())
                            if CreateVisio.objects.filter(conference=conftopass[0], testroom=True,
                                                          expirytime__gt=datetime.utcnow()):
                                idold = CreateVisio.objects.filter(conference=conftopass[0], testroom=True,
                                                                   expirytime__gt=datetime.now()).values_list('idconf',
                                                                                                              flat=True)[
                                    0]
                                confnotcreated = False
                                #print('mar',confnotcreated)
                                idconfb = idold
                                mod = "moderator"
                                fname = request.user.first_name + ' ' + request.user.last_name
                                femail = request.user.email
                                joinurll = CreateVisio.objects.filter(conference=conftopass[0], testroom=True,
                                                                      expirytime__gt=datetime.now()).values_list(
                                    'joinurlzoom', flat=True)[0]

                            if RegisterConf.objects.filter(
                                    Q(user=request.user, conference=conftopass[0], role=3) | Q(user=request.user,
                                                                                               conference=conftopass[0],
                                                                                               socloc__in=[1,
                                                                                                           2])) or request.user.is_superuser:

                                #print('mar2',confnotcreated)

                                if confnotcreated:
                                    # create conf test
                                    now = datetime.utcnow()  # .replace(tzinfo=utc)
                                    tzloc = request.session.get('django_timezone', 'UTC')
                                    local = pytz.timezone(tzloc)
                                    shift = now.astimezone(local).replace(tzinfo=None) - now.replace(tzinfo=None)

                                    # dateday.append(start_time2 - shift)
                                    # now = datetime.utcnow()  # .replace(tzinfo=utc)
                                    #print('now', now)
                                    now_str = now.strftime("%Y-%m-%d %H:%M")

                                    if conftopass[0].roomtype == "Big Marker":
                                        data = {"channel_id": CHANNEL_ID, "title": "Test room for " + title,
                                                "start_time": now_str,
                                                "review_emails": False,
                                                "exit_url": "https://www.carbonfreeconf.com/exitpage",
                                                "send_reminder_emails_to_presenters": False,
                                                "registration_conf_emails": False, "send_cancellation_email": False,
                                                "show_reviews": False,
                                                "review_emails": False,
                                                "auto_invite_all_channel_members": False,
                                                "registration_required_to_view_recording": False, "time_zone": "UTC",
                                                "duration_minutes": str(durationtest),
                                                "privacy": "private", "who_can_watch_recording": "channel_admin_only",
                                                "enable_twitter": False}

                                        data = json.dumps(data)
                                        # print('dat', data)
                                        createconfinfo = utils.createconffunc(data)
                                    else:
                                        createconfinfo = utils.createconffunczoominstant(confnum, 0)
                                        #print('createci', createconfinfo)

                                    if createconfinfo is None:
                                        # print('createnone')
                                        failedbig = "1"
                                        stuff_for_frontend.update({
                                            'conffailed': 1,
                                        })

                                    if createconfinfo:

                                        mod = "moderator"
                                        fname = request.user.first_name + ' ' + request.user.last_name
                                        femail = request.user.email
                                        #print('cc', createconfinfo)
                                        idconftostore = createconfinfo['id']
                                        if conftopass[0].roomtype == "Big Marker":
                                            linkconf = createconfinfo['conference_address']

                                            CreateVisio.objects.create(
                                                idconf=idconftostore,
                                                testroom=True,
                                                date=now,  # +shift,
                                                duration=durationtest,
                                                conference=conftopass[0],
                                                expirytime=now + timedelta(minutes=durationtest)
                                            )

                                            api_url, headers = utils.connection('conferences/enter')
                                            # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                            data = {"id": idconftostore, "attendee_name": fname,
                                                    "attendee_email": femail, "role": mod,
                                                    "exit_uri": "{% url 'my_app:exitpageparticipants' %}"}
                                            # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                            # print('data',data)

                                            # #print(api_url)
                                            # print('idconfz',idconf,start,end,idcf,today)

                                            response = requests.post(api_url, headers=headers, json=data)
                                            #print(response)
                                            if response.status_code == 201:
                                                info = json.loads(response.content.decode('utf-8'))
                                                # print(response)
                                                # print(info)
                                                # print(info['enter_uri'])
                                                the_user = User.objects.get(username=request.user.username)
                                                the_user.userprofileinfo.isinconf = True
                                                the_user.userprofileinfo.save()

                                                stuff_for_frontend.update({
                                                    'problem': problem,
                                                    'enter_url': info['enter_uri'],
                                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                                    'confnum': idcf,
                                                    'title': title,
                                                    'start_date': start_date,
                                                    'end_date': end_date,
                                                    'start_date2': start_date2,
                                                    'timestart': timestart,
                                                    'timefinish': timefinish,
                                                    'mineventheight': mineventheight,
                                                    'heighthr': heighthr,
                                                    'minieventtime': minieventtime,
                                                    'opacity': opacity/10.,
                                                    'status': '1'  # 'toosoon'
                                                })



                                            else:
                                                # case where test room but not created
                                                stuff_for_frontend.update({
                                                    'problem': problem,
                                                    # 'enter_url': info['enter_uri'],
                                                    # urllib.parse.quote(info['enter_uri'],safe=''),#info['enter_uri'],  # list(info['body'][0].values())[1],
                                                    'confnum': idcf,
                                                    'title': title,
                                                    'start_date': start_date,
                                                    'end_date': end_date,
                                                    'start_date2': start_date2,
                                                    'timestart': timestart,
                                                    'timefinish': timefinish,
                                                    'mineventheight': mineventheight,
                                                    'heighthr': heighthr,
                                                    'minieventtime': minieventtime,
                                                    'opacity': opacity/10.,
                                                    'status': '10'  # case where test room but not created
                                                })
                                        else:  # inayou
                                            idconftostore = createconfinfo['id']
                                            passzoom = createconfinfo['password']
                                            starturlzoom = createconfinfo['start_url']
                                            joinurlzoom = createconfinfo['join_url']

                                            CreateVisio.objects.create(
                                                idconf=idconftostore,
                                                testroom=True,
                                                date=now,  # +shift,
                                                passzoom=passzoom,
                                                starturlzoom=starturlzoom,
                                                joinurlzoom=joinurlzoom,
                                                duration=durationtest,
                                                conference=conftopass[0],
                                                expirytime=now + timedelta(minutes=durationtest)
                                            )

                                            the_user = User.objects.get(username=request.user.username)
                                            the_user.userprofileinfo.isinconf = True
                                            the_user.userprofileinfo.save()

                                            # if mod == "moderator":
                                            # enterzoom = startzoom
                                            # else:
                                            enterzoom = joinurlzoom

                                            stuff_for_frontend.update({
                                                'problem': problem,
                                                'idconf': idconftostore,
                                                'enter_url': enterzoom,
                                                # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                                'confnum': idcf,
                                                'title': title,
                                                'start_date': start_date,
                                                'end_date': end_date,
                                                'start_date2': start_date2,
                                                'timestart': timestart,
                                                'timefinish': timefinish,
                                                'mineventheight': mineventheight,
                                                'heighthr': heighthr,
                                                'minieventtime': minieventtime,
                                                'opacity': opacity/10.,
                                                'status': '1'  # 'toosoon'
                                            })
                                else:
                                    if conftopass[0].roomtype == "Big Marker":

                                        api_url, headers = utils.connection('conferences/enter')
                                        # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                        data = {"id": idconfb, "attendee_name": fname, "attendee_email": femail,
                                                "role": mod,
                                                "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipants"}
                                        # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                        # print('data',data)

                                        # #print(api_url)
                                        # print('idconfz',idconf,start,end,idcf,today)
                                        #print('idconfb', idconfb)

                                        response = requests.post(api_url, headers=headers, json=data)
                                        #print(response.content)

                                        if response.content != b'{"type":"conference_ended","message":"This conference has ended"}':

                                            if response.status_code == 201:
                                                #print('201 ok')
                                                info = json.loads(response.content.decode('utf-8'))
                                                the_user = User.objects.get(username=request.user.username)
                                                the_user.userprofileinfo.isinconf = True
                                                the_user.userprofileinfo.save()

                                                stuff_for_frontend.update({
                                                    'problem': problem,
                                                    'enter_url': info['enter_uri'],
                                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                                    'confnum': idcf,
                                                    'title': title,
                                                    'start_date': start_date,
                                                    'end_date': end_date,
                                                    'start_date2': start_date2,
                                                    'timestart': timestart,
                                                    'timefinish': timefinish,
                                                    'mineventheight': mineventheight,
                                                    'heighthr': heighthr,
                                                    'minieventtime': minieventtime,
                                                    'opacity': opacity/10.,
                                                    'status': '1'  # 'toosoon'
                                                })
                                            else:
                                                #print('201222 pas ok', problem)
                                                stuff_for_frontend.update({
                                                    'problem': problem,
                                                    # 'enter_url': info['enter_uri'],
                                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                                    'confnum': idcf,
                                                    'title': title,
                                                    'start_date': start_date,
                                                    'end_date': end_date,
                                                    'status': '11'  # 'toosoon'
                                                })
                                        else:
                                            #print('2012223 pas ok', problem)
                                            stuff_for_frontend.update({
                                                'problem': problem,
                                                # 'enter_url': info['enter_uri'],
                                                # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                                'confnum': idcf,
                                                'title': title,
                                                'start_date': start_date,
                                                'end_date': end_date,
                                                'status': '22'  # 'toosoon'
                                            })

                                    else:
                                        the_user = User.objects.get(username=request.user.username)
                                        the_user.userprofileinfo.isinconf = True
                                        the_user.userprofileinfo.save()

                                        # if mod == "moderator":
                                        # enterzoom = startzoom
                                        # else:
                                        enterzoom = joinurll

                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            'idconf': idconfb,
                                            'enter_url': enterzoom,
                                            # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            'start_date2': start_date2,
                                            'timestart': timestart,
                                            'timefinish': timefinish,
                                            'mineventheight': mineventheight,
                                            'heighthr': heighthr,
                                            'minieventtime': minieventtime,
                                            'opacity': opacity/10.,
                                            'status': '1'  # 'toosoon'
                                        })
                            else:
                                stuff_for_frontend.update({
                                    'problem': problem,
                                    # 'enter_url': info['enter_uri'],
                                    # urllib.parse.quote(url,safe=''),#url,#urllib.parse.quote(url,safe=''),  # list(info['body'][0].values())[1],
                                    'confnum': idcf,
                                    'title': title,
                                    'start_date': start_date,
                                    'end_date': end_date,
                                    'status': '12'  # 'toosoon and not allowed'
                                })
                        else:
                            # pas de confnum en url so pas de test room mais on doit proposer though
                            #print('esco')
                            stuff_for_frontend.update({
                                'problem': problem,
                                # 'enter_url': info['enter_uri'],
                                # urllib.parse.quote(info['enter_uri'],safe=''),#info['enter_uri'],  # list(info['body'][0].values())[1],
                                'confnum': idcf,
                                'title': title,
                                'start_date': start_date,
                                'end_date': end_date,
                                'start_date2': start_date2,
                                'timestart': timestart,
                                'timefinish': timefinish,
                                'mineventheight': mineventheight,
                                'heighthr': heighthr,
                                'minieventtime': minieventtime,
                                'opacity': opacity/10.,
                                'status': '15'  # case where on propose test room but not created
                            })

                elif endtime+timedelta(minutes=60) < todaytime:
                    #milah
                    #check if it's really the end or if just in the middle of conf and starts again tomorrow
                    if endtimeconf>endtime:
                        #print('re')
                        intvis=0
                        for i in range(len(visio)):
                            print('visir',i,visio[i].date.date(),todaytime.date())
                            if visio[i].date.date() == (todaytime+timedelta(days=1)).date():
                                intvis=i

                        startse = visio[intvis].date
                        startses = (startse + shift).strftime("%Y-%m-%d at %H:%M")

                        stuff_for_frontend.update({
                            'problem': problem,
                            # 'enter_url': info['enter_uri'],  # list(info['body'][0].values())[1],
                            # 'confnum': idcf,
                            'start_date': end_date,
                            'end_date': startses,
                            'title': title,
                            'status': '2b'  # 'toolate'
                        })
                    else:
                        stuff_for_frontend.update({
                            'problem': problem,
                            # 'enter_url': info['enter_uri'],  # list(info['body'][0].values())[1],
                            # 'confnum': idcf,
                            'start_date': end_date,
                            'title': title,
                            'status': '2'  # 'toolate'
                        })

                else:

                    #print('privvvvvvvvvvvvvvvvffg', privpass)

                    if problem == 0:  # also add creator
                        modo = 0
                        accesspara=0
                        # print('conftopass',conftopass,request.user)
                        if request.user.is_superuser:
                            modo = 1
                        #print('privvvvvvvvvvvvvvvv', privpass)
                        if conftopass[0].masterconf or conftopass[0].daughterconf:
                            parsest = CreateConf.objects.filter(masterconfpass=conftopass[0].masterconfpass,
                                                                masterconf=True).values_list('parsession', flat=True)[0]

                            if parsest:
                                querysetexist = RegisterConf.objects.filter(
                                    conference__masterconfpass=conftopass[0].masterconfpass, user=request.user,
                                    status=1)
                            else:
                                querysetexist = RegisterConf.objects.filter(conference__id=conftopass[0].id, user=request.user,
                                                                            status=1)  # tbb

                            if querysetexist:
                                accesspara=1

                        if ((RegisterConf.objects.filter(conference__in=conftopass, user=request.user)) or (
                                modo == 1) or (conftopass[0].priv == "Public" and privpass != '' and conftopass[
                            0].privpass == privpass) or (accesspara == 1)):

                            #if privpass != '':
                                #res = utils.chatrock(conftopass[0], request.user, 1)
                                #print('res', res)

                            if modo == 1:  # tbbbbbbbbbbbbbbbbbbbb
                                mod = "moderator"
                                fname = "admin"
                                femail = "admin@carbonfreeconf.com"
                            else:
                                moderator = RegisterConf.objects.filter(conference__in=conftopass,
                                                                        user=request.user)  # .values_list('role', flat=True)
                                mod = "presenter"
                                # print('moder',moderator[0])
                                for i in range(len(moderator)):
                                    # print('mode',moderator[i].role)
                                    if moderator[i].role == 1 and mod != "moderator":
                                        mod = "moderator"
                                    if moderator[i].role == 3:
                                        mod = "moderator"
                                    if moderator[i].role == 2 and mod != "moderator":
                                        mod = "attendee"

                                fname = request.user.first_name + ' ' + request.user.last_name
                                femail = request.user.email

                            haspaid2 = False
                            if conftopass[0].fee:
                                paid = RegisterConf.objects.filter(conference__in=conftopass, user=request.user,
                                                                   haspaid=True)
                                free = RegisterConf.objects.filter(conference__in=conftopass, user=request.user,
                                                                   free=True)
                                if ((modo == 1) or (paid) or (free)):
                                    haspaid2 = True
                            else:
                                haspaid2 = True

                            if haspaid2:
                                if conftopass[0].roomtype == "Big Marker":
                                    api_url, headers = utils.connection('conferences/enter')
                                    # data = {"id": idconf, "attendee_name": "John", "attendee_email": "ema@emai.com"}#role=attendee,moderator,presenter
                                    data = {"id": idconf, "attendee_name": fname, "attendee_email": femail, "role": mod,
                                            "exit_uri": "https://www.carbonfreeconf.com/exitpageparticipants"}
                                    # data = {"id": "3e889798e61c", "attendee_name": "John", "attendee_email": "ema@emai.com"}
                                    # print('data',data)

                                    # #print(api_url)
                                    # print('idconfz',idconf,start,end,idcf,today)

                                    response = requests.post(api_url, headers=headers, json=data)
                                    # print(response)
                                    if response.status_code == 201:
                                        info = json.loads(response.content.decode('utf-8'))
                                        # print(response)
                                        # print(info)
                                        # print(info['enter_uri'])
                                        the_user = User.objects.get(username=request.user.username)
                                        the_user.userprofileinfo.isinconf = True
                                        the_user.userprofileinfo.save()

                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(info['enter_uri'],safe=''),#info['enter_uri'],  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            # 'posters': posters,
                                            'start_date2': start_date2,
                                            'timestart': timestart,
                                            'timefinish': timefinish,
                                            'mineventheight': mineventheight,
                                            'heighthr': heighthr,
                                            'minieventtime': minieventtime,
                                            'opacity': opacity/10.,
                                            'status': '0'  # 'ok'
                                        })

                                    else:
                                        print('[!] [{0}] Unexpected Error {1}'.format(response.status_code,
                                                                                      response.content))

                                        stuff_for_frontend.update({
                                            'problem': problem,
                                            # 'enter_url': info['enter_uri'],
                                            # urllib.parse.quote(info['enter_uri'],safe=''),#info['enter_uri'],  # list(info['body'][0].values())[1],
                                            'confnum': idcf,
                                            'title': title,
                                            'start_date': start_date,
                                            'end_date': end_date,
                                            'start_date2': start_date2,
                                            'timestart': timestart,
                                            'timefinish': timefinish,
                                            'mineventheight': mineventheight,
                                            'heighthr': heighthr,
                                            'minieventtime': minieventtime,
                                            'opacity': opacity/10.,
                                            'status': '8'  # 'ok'
                                        })
                                else:
                                    the_user = User.objects.get(username=request.user.username)
                                    the_user.userprofileinfo.isinconf = True
                                    the_user.userprofileinfo.save()

                                    # if mod=="moderator":
                                    #    enterzoom = startzoom
                                    # else:
                                    enterzoom = joinzoom


                                    stuff_for_frontend.update({
                                        'problem': problem,
                                        'idconf': idconf,
                                        'enter_url': enterzoom,  # info['enter_uri'],
                                        # urllib.parse.quote(info['enter_uri'],safe=''),#info['enter_uri'],  # list(info['body'][0].values())[1],
                                        'confnum': idcf,
                                        'title': title,
                                        'start_date': start_date,
                                        'end_date': end_date,
                                        # 'posters': posters,
                                        'start_date2': start_date2,
                                        'timestart': timestart,
                                        'timefinish': timefinish,
                                        'mineventheight': mineventheight,
                                        'heighthr': heighthr,
                                        'minieventtime': minieventtime,
                                        'opacity': opacity/10.,
                                        'status': '0'  # 'ok'
                                    })
                            else:
                                # haven't paid so can't access
                                stuff_for_frontend.update({
                                    'status': '9',
                                    'problem': problem,  # list(info['body'][0].values())[1],
                                })
                        # idconf = CreateConf.objects.filter(user=request.user).order_by('id').values_list('id', flat=True)[0]
                        else:
                            stuff_for_frontend.update({
                                'status': '21',
                                'problem': problem,  # list(info['body'][0].values())[1],
                            })
                    else:
                        stuff_for_frontend.update({
                            'status': '6',
                            'problem': problem,  # list(info['body'][0].values())[1],
                        })
                # else:
                #   stuff_for_frontend = {
                #      'status':'5',
                #     'problem': problem,  # list(info['body'][0].values())[1],
                # }
            else:
                #print('nadadddd')
                stuff_for_frontend.update({
                    'problem': problem,
                    'enter_url': "nada",  # list(info['body'][0].values())[1],
                    'confnum': "0",
                    'status': '4'  # 'nada'
                })
        else:
            #print('nadadddd2')
            stuff_for_frontend.update({
                'problem': problem,
                'enter_url': "nada",  # list(info['body'][0].values())[1],
                'confnum': "0",
                'status': '4'  # 'nada'
            })
        # if confnum:
        #  return render(request,'my_app/joinconf_website.html',stuff_for_frontend)
        # else:

        return render(request, 'my_app/joinconf.html', stuff_for_frontend)


def submitconf(request):
    submitted = 0
    stuff_for_frontend = {
        'outsideboundaries': False,
    }
    if request.method == 'POST':
        # print('submitted')

        # if (CreateConf.objects.filter(user=request.user)):
        if 1 == 1:
            if request.session.get('confid', ''):
                if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):
                    objects = CreateConf.objects.filter(user=request.user,
                                                        id=request.session.get('confid', '')).last()

                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list(
                    #    'id', flat=True)[0]
                    start = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'start_date', flat=True)[0]
                    end = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'end_date', flat=True)[0]
                    # idconf = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list(
                    #   'idconf', flat=True)[0]

                    # print('testhjklm')
                else:
                    # querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb
                    # print('tttrrezddd', querysetother)

                    if request.user.is_superuser:
                        querysetother = RegisterConf.objects.filter()  # tbb
                        # print('tttrrezddd', querysetother)
                    else:
                        querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb

                    querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item in
                                           querysetother.values('conference').distinct()]
                    mainusers = []
                    if request.user.is_superuser:
                        for i in range(len(querysetotherunique)):
                            if CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                         id=request.session.get('confid', '')):
                                objects = CreateConf.objects.filter(user=querysetotherunique[i].conference.user,
                                                                    id=request.session.get('confid', '')).last()
                                #print('testhjklmgfdklm')
                                mainuserchosen = querysetotherunique[i].conference.user.id
                                #print('main', mainuserchosen)
                                main = 1

                    else:

                        for i in range(len(querysetotherunique)):
                            # print('i', i, querysetotherunique[i].conference)
                            if UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user):
                                mainuser = UserLink.objects.filter(conference=querysetotherunique[i].conference,
                                                                   user=request.user).values_list('mainuser',
                                                                                                  flat=True)[0]
                                if mainuser != request.user.id:
                                    querysetotherconf = CreateConf.objects.filter(user=mainuser, id=querysetotherunique[
                                        i].conference.id).order_by('-start_date')
                                    # print('rrez', i, mainuser, querysetotherconf)
                                    mainusers.append(mainuser)

                        if len(mainusers) > 0:
                            for i in range(len(mainusers)):
                                if CreateConf.objects.filter(user__id=mainusers[i],
                                                             id=request.session.get('confid', '')):
                                    objects = CreateConf.objects.filter(user__id=mainusers[i],
                                                                        id=request.session.get('confid', '')).last()
                                    # print('testhjklmgfdklm')
                                    mainuserchosen = mainusers[i]
                                    # main = 1

                    idcf = CreateConf.objects.filter(user__id=mainuserchosen,
                                                     id=request.session.get('conftit', '')).values_list('id',
                                                                                                           flat=True)[0]
                    start = CreateConf.objects.filter(user__id=mainuserchosen,
                                                      id=request.session.get('confid', '')).values_list(
                        'start_date', flat=True)[0]
                    end = CreateConf.objects.filter(user__id=mainuserchosen,
                                                    id=request.session.get('confid', '')).values_list('end_date',
                                                                                                          flat=True)[0]
                    # idconf = CreateConf.objects.filter(user__id=mainuserchosen,title=request.session.get('conftit', '')).values_list('idconf', flat=True)[0]
            else:
                idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                start = \
                    CreateConf.objects.filter(user=request.user).order_by('-id').values_list('start_date', flat=True)[0]
                end = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('end_date', flat=True)[0]
                # idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('idconf', flat=True)[0]
            # object = CreateConf.objects.filter(user=request.user).order_by('-id')[0]
            # start = CreateConf.objects.filter(user=request.user).order_by('id').values_list('start_date', flat=True)[0]
            # end = CreateConf.objects.filter(user=request.user).order_by('id').values_list('end_date', flat=True)[0]
            # idconf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('idconf', flat=True)[0]
            ##print(object)

            # getnumberofdays = abs(end - start).days + 1
            ##print('getdays',getnumberofdays)

            # getstartdate = start
            # getenddate = end

            alpaid = 0
            # if daughterconf and masterconf paid at once already then cannot submit but can update
            daugh = CreateConf.objects.filter(id=idcf, daughterconf=True)
            if daugh:
                #print('ddd', daugh)
                if daugh.values_list('status', flat=True)[0] == 0:
                    #find all daughter conferences
                    alldaugh = CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass, daughterconf=True,status__gt=0)

                    #update position and session's name
                    if daugh[0].acceptconf:
                        #print('alldaugh',alldaugh,len(alldaugh))
                        daugh[0].masterconfdaughterposition = len(alldaugh)+1
                        daugh[0].masterconfdaughtername = utils.starwarsplanets(len(alldaugh))
                        daugh[0].save()

                    #print('ddddd', daugh)
                    payinonego = \
                    CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass, masterconf=True).values_list(
                        'payingatonce', flat=True)[0]
                    #print('payinonego2', payinonego)
                    if payinonego:
                        payal = \
                        CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass, masterconf=True).values_list(
                            'status', flat=True)[0]
                        #print('payal2', payal)
                        if payal == 2:
                            alpaid = 1  # put 1 if you want to put it back
                            messages.error(request,
                                           "This session cannot be submitted anymore because the master conference has already paid.",
                                           extra_tags='sessionpay')
                            stuff_for_frontend.update({
                                'mastconfalreadypaid': 1,
                            })

            if alpaid == 0:

                if not Schedule.objects.filter(conference__id=idcf,notpart=False).exists():


                    stuff_for_frontend.update({
                        #'res':res,
                        #'res2':res2,
                        'outsideboundariess': True,
                    })
                else:
                    getstartdate = \
                        Schedule.objects.filter(conference__id=idcf,notpart=False).order_by('start_date').values_list('start_date',
                                                                                                        flat=True)[0]
                    getenddate = \
                        Schedule.objects.filter(conference__id=idcf,notpart=False).order_by('-end_date').values_list('end_date',
                                                                                                       flat=True)[0]

                    # print('start,end', getstartdate, getenddate)
                    # utc = utctime.replace(tzinfo=pytz.UTC)
                    tzloc = request.session['django_timezone']
                    local = pytz.timezone(tzloc)
                    shift = getstartdate.astimezone(local).replace(tzinfo=None) - getstartdate.replace(tzinfo=None)
                    # print('shift', shift,tzloc)
                    getstartdate = getstartdate.astimezone(local)  # .replace(tzinfo=None)
                    getenddate = getenddate.astimezone(local)  # .replace(tzinfo=None)
                    # print('start,end2', getstartdate, getenddate)

                    getnumberofdays = abs(getenddate.date() - getstartdate.date()).days + 1
                    # print('nb days', getnumberofdays, getenddate.date(), getstartdate.date())

                    numberdayconf = abs(end - start).days + 1

                    if getstartdate.date() < start or getenddate.date() > end:
                        stuff_for_frontend.update({
                            'outsideboundaries': True,
                        })

                    else:
                        getstarttimeday = []
                        getendtimeday = []
                        exceed = []
                        gexc = 0
                        for i in range(getnumberofdays):
                            start = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(
                                days=i)  # put midnight+i
                            start = start - shift
                            endd = start + timedelta(days=1)
                            if Schedule.objects.filter(conference__id=idcf, notpart=False, start_date__gt=start, end_date__lt=endd):
                                getstarttime = Schedule.objects.filter(conference__id=idcf,notpart=False, start_date__gt=start).order_by(
                                    'start_date').values_list('start_date', flat=True)[0]
                                getstarttimeday.append(getstarttime)
                                end = datetime.combine(getstartdate.date(), datetime.min.time()) + timedelta(
                                    days=i + 1)  # put midnight+i
                                end = end - shift
                                getendtime = \
                                    Schedule.objects.filter(conference__id=idcf,notpart=False, end_date__lt=end).order_by(
                                        '-end_date').values_list(
                                        'end_date', flat=True)[0]
                                getendtimeday.append(getendtime)
                                # print('exceed', abs(getendtime - getstarttime).seconds / 60.0)
                                exc = abs(getendtime - getstarttime).seconds / 60.0

                                exceed.append(exc)
                                # print('barouf', i, start, end, getstarttime, getendtime, exc)
                                if exc > 10 * 60:
                                    gexc = 1
                            else:
                                getstarttimeday.append(start + timedelta(hours=7))
                                getendtimeday.append(start + timedelta(hours=7, minutes=5))
                                exc = abs(start + timedelta(minutes=5) - start).seconds / 60.0
                                exceed.append(exc)
                                # print('iciklm',exc,start+timedelta(hours=7))

                        if gexc == 0:
                            # update duration and datetime of conference days
                            visio = CreateVisio.objects.filter(conference__id=idcf, testroom=False).order_by('date')
                            ilist = []
                            ##print('vis',visio[0].date,visio[1].date,visio[2].date)
                            for j in range(getnumberofdays):
                                # for i in range(len(visio)):
                                #   #print('r',(getstarttimeday[j]+shift).date())
                                # if visio[i].date.date()==(getstarttimeday[j]+shift).date() and i not in ilist:
                                v = visio[j]
                                v.date = getstarttimeday[j]
                                v.duration = exceed[j]
                                ilist.append(j)
                                # print('visio',j,v.date,getstarttimeday[j],exceed[j])
                                v.save()

                            conftest = CreateConf.objects.filter(id=idcf)[0]

                            ##print('len(visio)',len(visio),conftest.dialin,conftest.privacy)
                            for i in range(getnumberofdays):
                                # print('geo',getstarttimeday[i],getnumberofdays)
                                visio = CreateVisio.objects.filter(conference__id=idcf, date=getstarttimeday[i], testroom=False)[0]
                                # print('i',i,getstarttimeday[i])
                                start_time_str = getstarttimeday[i].strftime("%Y-%m-%d %H:%M")
                                duration = str(int(exceed[i]))

                                if conftest.roomtype == "Big Marker":
                                    if conftest.room_logo:
                                        # print('njdkkjfsclbdkjfbcfkdbvcfdkvcbfdkhvbfdvbfdhjvbfhd',request.build_absolute_uri('/media/'+str(conftest.room_logo)))
                                        data = {"conference_id": visio.idconf, "schedule_type": "one_time",
                                                "start_time": start_time_str,
                                                "time_zone": "UTC", "duration_minutes": duration,
                                                "enable_dial_in": conftest.dialin,
                                                "privacy": "private", "enable_twitter": False,
                                                "room_logo": conftest.room_logo.url}
                                        # "background_image_url":conftest.room_logo.url}  # room_logo to add media/static/logos/density.png
                                        if conftest.background:
                                            data = {"conference_id": visio.idconf, "schedule_type": "one_time",
                                                    "start_time": start_time_str,
                                                    "time_zone": "UTC", "duration_minutes": duration,
                                                    "enable_dial_in": conftest.dialin,
                                                    "privacy": "private", "enable_twitter": False,
                                                    "room_logo": conftest.room_logo.url,
                                                    "background_image_url": conftest.background.url}
                                    else:
                                        data = {"conference_id": visio.idconf, "schedule_type": "one_time",
                                                "start_time": start_time_str,
                                                "time_zone": "UTC", "duration_minutes": duration,
                                                "enable_dial_in": conftest.dialin,
                                                "privacy": "private", "enable_twitter": False}  # room_logo to add
                                        if conftest.background:
                                            data = {"conference_id": visio.idconf, "schedule_type": "one_time",
                                                    "start_time": start_time_str,
                                                    "time_zone": "UTC", "duration_minutes": duration,
                                                    "enable_dial_in": conftest.dialin,
                                                    "privacy": "private", "enable_twitter": False,
                                                    "background_image_url": conftest.background.url}  # room_logo to add

                                    data = json.dumps(data)
                                    # print('dat', data)
                                    createconfinfo = utils.updateconffunc(data, visio.idconf)
                                else:

                                    # alphabet = string.ascii_letters + string.digits
                                    # password = ''.join(secrets.choice(alphabet) for i in range(7))
                                    start_time2_strz = getstarttimeday[i].strftime("%Y-%m-%dT%H:%M:%SZ")

                                    # duration
                                    # payload = "{\"topic\":\"Michael API Test\",\"type\":2,\"start_time\":\"2019-08-30T18:00:00\",\"duration\":60,\"timezone\":\"America/New_York\",\"password\":\"abcd\",\"agenda\":\"My Meeting\",\"settings\":{\"host_video\":false,\"in_meeting\":false,\"join_before_host\":true,\"mute_upon_entry\":false,\"participant_video\":false,\"registrants_confirmation_email\":true,\"use_pmi\":false,\"waiting_room\":false,\"watermark\":false,\"approval_type\":0,\"alternative_hosts\":\"mycohost@someemail.com\",\"global_dial_in_countries\":[{\"city\":\"San Jose\",\"country\":\"US\",\"country_name\":\"US\",\"number\":\"+1 1212121212121212\",\"type\":\"toll\"}]}}"

                                    data = {"topic": conftest.title, "type": 2,
                                            "start_time": start_time2_strz, "duration": duration,
                                            "password": visio.passzoom, "agenda": conftest.title, "timezone": "UTC",
                                            "settings": {"host_video": True, "participant_video": True,
                                                         "hd_video": True, "waiting_room": False, "join_before_host": True,
                                                         "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                         "approval_type": "2", "audio": "both", "auto_recording": "none",
                                                         "meeting_authentification": False,
                                                         "registrants_email_notification": False}}

                                    data = json.dumps(data)
                                    # print('dat', data)
                                    createconfinfo = utils.updateconffunczoom(data, visio.idconf)

                                    datacoffeebreak = {"topic": conftest.title+'_cb', "type": 2,
                                            "start_time": start_time2_strz, "duration": duration,
                                            "password": visio.passzoomcb, "agenda": conftest.title+'_cb', "timezone": "UTC",
                                            "settings": {"host_video": True, "participant_video": True,
                                                         "hd_video": True, "waiting_room": False,
                                                         "join_before_host": True,
                                                         "mute_upon_entry": True, "watermark": False, "use_pmi": False,
                                                         "approval_type": "2", "audio": "both",
                                                         "auto_recording": "none",
                                                         "meeting_authentification": False,
                                                         "registrants_email_notification": False}}

                                    datacoffeebreak = json.dumps(datacoffeebreak)
                                    # print('dat', data)
                                    createconfinfocoffeebreak = utils.updateconffunczoom(datacoffeebreak,visio.idconfcb,True)

                                    #taskfin = finishzoomsession.apply_async((visio.idconf,), eta=getendtimeday[i])
                                    #print('pol')

                                    #print('test time',getendtimeday[i],getendtimeday[i]+timedelta(hours=1))

                                    if 'ON_HEROKU' in os.environ:

                                        taskfin = finishzoomsession.apply_async((visio.idconf,), eta=getendtimeday[i]+timedelta(hours=1))
                                        taskidl = taskfin.task_id
                                        taskfin2 = finishzoomsession.apply_async((visio.idconfcb,),
                                                                                eta=getendtimeday[i] + timedelta(
                                                                                    hours=1))
                                        taskidl2 = taskfin2.task_id
                                        #print('taskidfin', taskfin.task_id)

                                    else:
                                        taskidl = ""
                                        taskidl2 = ""

                                    gettaskid = CreateVisio.objects.filter(idconf=visio.idconf).values_list('celery_task_id_fin',
                                                                                                  flat=True)[0]
                                    gettaskid2 = CreateVisio.objects.filter(idconf=visio.idconf).values_list('celery_task_id_fin_cb',
                                                                                                flat=True)[0]

                                    #revoke(gettaskid, terminate=True)
                                    if 'ON_HEROKU' in os.environ:

                                        app.control.revoke(gettaskid, terminate=True)
                                        app.control.revoke(gettaskid2, terminate=True)

                                        #print('taskidfin', taskidl, gettaskid,getendtimeday[i])

                                    #visio.celery_task_id_fin=taskidl
                                    CreateVisio.objects.filter(id=visio.id).update(celery_task_id_fin=taskidl)
                                    CreateVisio.objects.filter(id=visio.id).update(celery_task_id_fin_cb=taskidl2)

                                    #visio.save()

                            if createconfinfo is None or createconfinfocoffeebreak is None:
                                stuff_for_frontend.update({
                                    'notsubmitted': 1,
                                })
                            else:

                                messages.success(request,
                                                 "The conference was submitted. If you modify the program, resubmit again.",
                                                 extra_tags='confsubm')
                                conftest.status = 1
                                if conftest.roomtype == "Big Marker":
                                    if conftest.dialin:
                                        dialininfo = createconfinfo['dial_in_information']
                                        #print('dialininfo!!!!!!!!!!!!', dialininfo['dial_in_number'],
                                         #     dialininfo['dial_in_id'], dialininfo['dial_in_passcode'],
                                         #     dialininfo['presenter_dial_in_passcode'])
                                        # conftest.dialininfo=dialininfo
                                        conftest.dialin_number = dialininfo['dial_in_number']
                                        conftest.dialin_id = dialininfo['dial_in_id']
                                        conftest.dialin_passcode = dialininfo['dial_in_passcode']
                                        conftest.dialin_passcode_presenter = dialininfo['presenter_dial_in_passcode']

                                conftest.save()
                                stuff_for_frontend.update({
                                    'submitted': 1,
                                })
                                # manone
                                # print(createconfinfo)
                                submitted = 1
            # else:
            #    messages.error(request, "This session cannot be submitted anymore because the master conference paid for offsetting carbon emissions already.",
            #                     extra_tags='confpaid')

    # return render(request,'my_app/createconf.html',stuff_for_frontend)

    return HttpResponseRedirect(reverse('my_app:createconf'))


def addpeople(request):
    email = False
    createdpeople = False
    # main=0

    if request.method == 'POST':
        if request.session.get('confid', ''):
            #print('1')
            if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):
                objects = CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).last()
                #print('testhjklm')
            else:
                if request.user.is_superuser:
                    querysetother = RegisterConf.objects.filter(
                        conference__id=request.session.get('confid', '')).last()  # tbb
                    mainuser = querysetother.conference.user.id
                    objects = CreateConf.objects.filter(user__id=mainuser,
                                                        id=request.session.get('confid', '')).last()
                else:
                    querysetother = RegisterConf.objects.filter(user=request.user, role=3)  # tbb
                    #print('tttrrezddd', querysetother)

                    querysetotherunique = [querysetother.filter(conference=item['conference']).first() for item in
                                           querysetother.values('conference').distinct()]

                    # print('querysetunique',querysetotherunique)

                    mainusers = []
                    for i in range(len(querysetotherunique)):
                        # print('i', i, querysetotherunique[i].conference)
                        if UserLink.objects.filter(conference=querysetotherunique[i].conference, user=request.user):
                            mainuser = UserLink.objects.filter(conference=querysetotherunique[i].conference,
                                                               user=request.user).values_list('mainuser', flat=True)[0]
                            if mainuser != request.user.id:
                                querysetotherconf = CreateConf.objects.filter(user=mainuser, id=querysetotherunique[
                                    i].conference.id).order_by('-start_date')
                                # print('rrez', i, mainuser, querysetotherconf)
                                mainusers.append(mainuser)

                    if len(mainusers) > 0:
                        for i in range(len(mainusers)):
                            # print('Georges')
                            if CreateConf.objects.filter(user__id=mainusers[i],
                                                         id=request.session.get('confid', '')):
                                # print('Georges2')
                                objects = CreateConf.objects.filter(user__id=mainusers[i],
                                                                    id=request.session.get('confid', '')).last()
                                # print('testhjklmgfdklm')
                                mainuserchosen = mainusers[i]
                                # main = 1
        else:
            objects = CreateConf.objects.filter(user=request.user).last()
        # objects=CreateConf.objects.filter(user=request.user).last()
        # print('joejoe0')

        if request.POST.get('excel'):
            form = ExcelPeopleForm(request.POST, request.FILES)
            if form.is_valid():
                excel_file = request.FILES['excel_file']
                # import os
                import tempfile
                import xlrd
                fd, path = tempfile.mkstemp()  # mkstemp returns a tuple: an integer (index) called file descriptor used by OS to refer to a file and its path
                try:
                    try:
                        with os.fdopen(fd, 'wb') as tmp:
                            tmp.write(excel_file.read())
                        book = xlrd.open_workbook(path)
                        sheet = book.sheet_by_index(0)
                        emailsindb = People.objects.filter(conference=objects).values_list('email', flat=True)

                        for rx in range(0, sheet.nrows):
                            #print('excel', rx, sheet.cell_value(rowx=rx, colx=1), sheet.cell_value(rowx=rx, colx=2))
                            if sheet.cell_value(rowx=rx, colx=2) in emailsindb:
                                print('email already exists in your list')
                                # email = True
                                #print('not added', rx, sheet.cell_value(rowx=rx, colx=1),
                                #      sheet.cell_value(rowx=rx, colx=2))
                            else:
                                try:
                                    validate_email(sheet.cell_value(rowx=rx, colx=2))
                                except ValidationError as e:
                                    print("bad email, details:", e)
                                else:
                                    print("good email")

                                    People.objects.create(
                                        firstname=sheet.cell_value(rowx=rx, colx=0),
                                        lastname=sheet.cell_value(rowx=rx, colx=1),
                                        email=sheet.cell_value(rowx=rx, colx=2),
                                        conference=objects
                                    )
                    except Exception as e:
                        print('e', e)
                        messages.error(request, 'Unsupported format or corrupt file.', extra_tags='file')

                finally:
                    os.remove(path)



            else:
                message = 'Invalid Entries'

        else:  # request.POST.get('action') == 'addpeople':
            firstname = request.POST.get('firstname')
            lastname = request.POST.get('lastname')
            email = request.POST.get('email')
            loopnum = request.POST.get('loopnum')

            #print('loopnum', loopnum)

            response_data = {}

            response_data['firstname'] = firstname
            response_data['lastname'] = lastname
            response_data['email'] = email
            # print('loop',loopnum)
            if loopnum:
                response_data['loopnum'] = str(int(loopnum) + 1)
            else:
                response_data['loopnum'] = str('1')

            emailsindb = People.objects.filter(conference=objects).values_list('email', flat=True)
            if email in emailsindb:
                # print('email already exists in your list')
                email = True
                response_data['result'] = 'Email already exists!'
                response_data['result2'] = 1
                # messages.success(request, "Email already exists!")

            else:
                response_data['result'] = 'Added people successfully!'
                response_data['result2'] = 0

                People.objects.create(
                    firstname=firstname,
                    lastname=lastname,
                    email=email,
                    conference=objects
                )

            if User.objects.filter(email__iexact=email):
                userr = User.objects.filter(email__iexact=email)[0]
                # print('userr', userr)
                if RegisterConf.objects.filter(user=userr, conference=objects):
                    instance = RegisterConf.objects.filter(user=userr, conference=objects)
                    save = '0'
                    nb = 0
                    nb2 = 0
                    np=0
                    nt=0
                    ni=0
                    nr=0
                    nd=0
                    for i in range(len(instance)):
                        # print('inst', instance)
                        if instance[i].status == 1:
                            save = '1'  # liststatus.append('0')
                            nb = nb + 1
                        if instance[i].status == 0:
                            nb2 = nb2 + 1
                        if instance[i].type == 4:  # poster
                            np += 1
                        if instance[i].type == 1 or instance[i].type == 2 or instance[i].type == 3 or instance[i].type == 6:  # talk
                            nt += 1
                        if instance[i].type == 1:  # invited talk
                            ni += 1
                            print('ji', ni)
                        if instance[i].type == 2:  # discussion
                            nd += 1
                            print('jd', nd)
                        if instance[i].type == 3:  # review talk
                            nr += 1
                            print('jr', nr)

                        # elif instance[i].status==1:
                        # liststatus.append('1')
                        # else:
                        # liststatus.append('2')
                    liststatus = save
                    listt = nt
                    listi = ni
                    listr = nr
                    listd = nd
                    listp = np
                    listnumber = nb
                    listnumber2 = nb2
                    listrole = str(instance[0].role)
                    listsoc = str(instance[0].socloc)

                else:
                    liststatus = '3'
                    listnumber = 0
                    listt = 0
                    listi = 0
                    listr = 0
                    listd = 0
                    listp = 0
                    listnumber2 = 0
                    listrole = '9'
                    listsoc = '9'
            else:
                liststatus = '3'
                listnumber = 0
                listt = 0
                listi = 0
                listr = 0
                listd = 0
                listp = 0
                listnumber2 = 0
                listrole = '9'
                listsoc = '9'

            response_data['liststatus'] = liststatus
            response_data['listp'] = listp
            response_data['listt'] = listt
            response_data['listi'] = listi
            response_data['listr'] = listr
            response_data['listd'] = listd
            response_data['listnumber'] = listnumber
            response_data['listnumber2'] = listnumber2
            response_data['listrole'] = listrole
            response_data['listsoc'] = listsoc
            response_data['confnum'] = objects.id

            peop=People.objects.filter(conference=objects)
            if len(peop)==1:
                response_data['nbparl'] = ''
            else:
                response_data['nbparl'] = 's'

            response_data['nbpar'] = str(len(peop))

            # print('whyyyyyyyyyu',response_data,json.dumps(response_data))

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

        createpeople_form = PeopleForm(request.POST)
        if createpeople_form.is_valid():
            # print('joejoe')
            # users = User.objects.filter(username=request.user)
            createpeop = createpeople_form.save(commit=False)
            createpeop.conference = objects
            # #print('user', request.user)
            # createconff.user(users)
            emailsindb = People.objects.filter(conference=objects).values_list('email', flat=True)
            if createpeople_form.cleaned_data['email'] in emailsindb:
                # print('email already exists in your list')
                email = True
                # stuff_for_frontend.update({
                #   'emailalready': 1
                # })
            else:
                # response_data = {}
                # createpeop.save()
                createpeople_form = PeopleForm()
                createdpeople = True
                # response_data['result'] = 'Add people successful!'
                # response_data['firstname'] = createpeop.firstname
                # response_data['lastname'] = createpeop.lastname
                # response_data['email'] = createpeop.email

                ##print('whyyyyyyyyy')
                # return HttpResponse(
                #   json.dumps(response_data),
                #  content_type="application/json"
                # )
        else:
            print(createpeople_form.errors)
    else:
        createpeople_form = PeopleForm()

    # return render(request, 'my_app/createconf.html', stuff_for_frontend)
    return HttpResponseRedirect(reverse('my_app:createconf'))

    # return HttpResponseRedirect('%s?email=%s' % (reverse('my_app:createconf'),email))

def checkcelerytaskstat(request):
    if request.method == 'POST':
        # from celery import Celery
        from celery.result import AsyncResult
        # app = Celery('conf', broker=settings.BROKER_URL)

        print('checkcel')
        statmastid = request.POST.get('statmastid')
        confnum = request.POST.get('confnum')

        print('c',confnum)
        print('sta',statmastid)

        statmast = StatsMaster.objects.filter(id=statmastid)[0]
        response_data = {}
        tasksuc = False
        response_data['success'] = False
        response_data['confnum'] = confnum

        print('joe')
        print('statmast.celery_task_id',statmast.celery_task_id)
        res = AsyncResult(statmast.celery_task_id)
        # res = AsyncResult(arr[ij], app=app)
        # res.ready()
        print('res')
        print('res2', res, res.status, res.state)

        if res.status == 'SUCCESS':
            #if v.vimeo_url:
            tasksuc = True
            response_data['success'] = True


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def checkcelerytask(request):
    if request.method == 'POST':
        # from celery import Celery
        from celery.result import AsyncResult
        # app = Celery('conf', broker=settings.BROKER_URL)

        createvisioid = request.POST.get('createvisioid')
        confnum = request.POST.get('confnum')

        # taskid=CreateVisio.objects.filter(id=createvisioid).values_list('celery_task_id', flat=True)[0]
        # visio=CreateVisio.objects.filter(id=createvisioid)[0]#.values_list('celery_task_id', flat=True)[0]

        visio = CreateVisio.objects.filter(conference__id=confnum).exclude(mp4_url__isnull=True).exclude(testroom=True)

        for v in visio:
            taskid = v.celery_task_id
            if taskid:
                taskid2 = taskid.replace('[', '').replace(']', '').replace("'", "").replace(" ", "")
                arr = taskid2.split(',')
                # taskid=visio.celery_task_id
                # taskid2=taskid.replace('[', '').replace(']', '').replace("'","")
                # arr = taskid2.split(',')

                #print('sucessssssssssssssssssssss???????????', arr, v)
                getout = 0
                response_data = {}
                tasksuc = 0
                response_data['success'] = False

                for ij in range(len(arr)):
                    #print('le', arr[ij], len(arr))
                    res = AsyncResult(arr[ij])
                    # res = AsyncResult(arr[ij], app=app)
                    # res.ready()
                    #print('res', res, res.status, res.state)

                    if res.status == 'SUCCESS':
                        if v.vimeo_url:
                            tasksuc += 1

                if tasksuc == len(arr):
                    response_data['success'] = True
                    # getout=1
                    # time.sleep(10)
                    #print('getoutto1')

                #print('4', response_data)

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def updatetitlerec(request):
    if request.method == 'POST':

        createvisioid = request.POST.get('createvisioid')
        idinput = request.POST.get('idinput')
        textval = request.POST.get('textval')
        tabid = request.POST.get('tabid')
        tabnum = request.POST.get('tabnum')
        print('tabid', tabid, tabnum)

        idinputint = int(idinput.strip('title'))
        #print('createvisioid,idinput,idinputint,textval,tabid,tabnum', createvisioid,idinput,idinputint,textval,tabid,tabnum)

        textval=textval.replace(",", "#@&").replace("'", "($%£)").lstrip()#.replace("'", "\'").replace('"', "").lstrip()

        # taskid=CreateVisio.objects.filter(id=createvisioid).values_list('celery_task_id', flat=True)[0]
        visio = CreateVisio.objects.filter(idconf=tabid)[0]  # .values_list('celery_task_id', flat=True)[0]
        #print('rgg', visio.id)
        text = visio.rectitles
        url = visio.vimeo_url
        taskid3 = url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
        arr2 = taskid3.split(',')
        print('z',arr2,len(arr2))

        if text:
            text2 = text.replace('[', '').replace(']', '').replace("'", "")
            arr = text2.split(',')#.split('(?<!\\\\),')#.split(',')
            for u in range(len(arr)):
                arr[u]=arr[u].lstrip()
        else:
            arr = [''] * len(arr2)

        print('zz',arr)#fischer

        #print('sucssss???????????', arr, len(url))
        getout = 0
        response_data = {}
        response_data['success'] = False

        for ij in range(len(arr)):
            print('le', len(arr), ij, tabnum, textval)
            if ij == int(tabnum):
                arr[ij] = textval
                print('super',arr)
                visio.rectitles = str(arr)
                response_data['success'] = True
                # getout=1
                # print('getoutto1')


        #print('41', response_data)
        visio.save()

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def updatetalkmodal(request):
    if request.method == 'POST':

        # to delete chat groups
        # with sessions.Session() as session:
        # log-in
        # rocket = RocketChat('carbonfreeconf', settings.SECRETROCK, server_url='https://chat.carbonfreeconf.com',
        #                   session=session)
        # modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
        # print(modo)
        # pprint(rocket.groups_remove_moderator(room_id=keyroom,user_id=key).json())
        # pprint(rocket.groups_kick(room_id=keyroom,user_id=key).json())

        # listcha=rocket.channels_list().json()

        # listgroup=rocket.groups_list_all().json()

        # print('len(listcha)',len(listcha))
        # print('len(listgroup)',len(listgroup['groups']))
        # print('listcha', listgroup)

        # for i in range(len(listcha)-2):
        #   print('listcha',listcha['channels'][i]['_id'])
        # pprint(rocket.channels_delete(room_id=None).json())

        # for i in range(len(listgroup['groups'])):
        #    print('listgroup',listgroup['groups'][i]['_id'])
        #   pprint(rocket.groups_delete(room_id=listgroup['groups'][i]['_id']).json())

        # pprint(rocket.channels_delete(room_id=None).json())
        # pprint(rocket.groups_delete(room_id=None).json())

        # slugtitleconf = slugify(str('%s' % (conftopass.title)))
        # print('slug', slugtitleconf)

        # pprint(rocket.groups_info(room_name=slugtitleconf).json())
        # contentroom = rocket.groups_info(room_name=slugtitleconf).json()
        # keyroom = contentroom['group']['_id']
        # rocket.logout()

        talktype = request.POST.get('part')
        email = request.POST.get('email')
        confnum = request.POST.get('confnum')
        confnummast = request.POST.get('confnummast')

        talknumber = request.POST.get('talknumber')
        title = request.POST.get('title')
        # abs = request.POST.get('abs')
        bio = request.POST.get('bio')
        role = request.POST.get('role')
        loc = request.POST.get('loc')
        abs3 = request.POST.get('abs3')
        abs = request.POST.get('abs')
        #inst_form = InstForm()
        print('confnummast',confnummast)
        #print('nopegh',abs)

        #if inst_form.is_valid():
            # print('joejoe', inst_form.cleaned_data['abstract'])
            # users = User.objects.filter(username=request.user)
            # createpeop = createpeople_form.save(commit=False)
            # createpeop.conference = objects
            # #print('user', request.user)
            # createconff.user(users)

            #print('dddd',inst_form.cleaned_data['abstract'])

        # abs = request.POST.get('abs')
        #print('post',request.POST)
        # form=request.POST.get('formsub')
        # print('jjj',form)
        # inst_form = InstForm(request.POST['formsub'])#,initial=[{'abstract': 'd',}])
        # print('iii',inst_form)
        # if inst_form.is_valid():
        #    print('yeah')
        # for forms in inst_form:

        #   print('nope',talknumber,str(forms))
        # if inst_form.abstract[talknumber].is_valid():
        #    print('joejoe', forms)
        # users = User.objects.filter(username=request.user)
        # createpeop = createpeople_form.save(commit=False)
        # createpeop.conference = objects
        # #print('user', request.user)
        # createconff.user(users)

        # abs = inst_form[talknumber].cleaned_data['abstract']
        #print('abs',abs)

        if request.POST.get('paid') == 'true':
            isfree = True
        else:
            isfree = False

        talknumber = int(talknumber)
        # print('talktype',talktype)
        # print('email',email)
        # print('confnum',confnum)
        # print('talknumber',talknumber)

        conftopass = CreateConf.objects.filter(id=confnum)[0]
        if conftopass.size == '<10':
            size = 10
        elif conftopass.size == '10-50':
            size = 50
        elif conftopass.size == '50-100':
            size = 100
        elif conftopass.size == '100-300':
            size = 300
        elif conftopass.size == '300-500':
            size = 500
        elif conftopass.size == '500-1000':
            size = 1000

        response_data = {}

        # if RegisterConf(conference=objects,status=1,socloc=1ou2,role=3)
        userconf = RegisterConf.objects.filter(
            Q(conference=conftopass, role=3) | Q(conference=conftopass, socloc__in=[1, 2]) | Q(conference=conftopass,
                                                                                               status=1))
        #print('userconf', userconf, len(userconf))
        item_nbuser = [userconf.filter(user=item['user']).first() for item in
                       userconf.values('user').distinct()]
        #print('item', item_nbuser)
        nbuserconf = len(item_nbuser)

        for user in userconf:
            print('username', user.user.username)

        if nbuserconf > 1.1 * size:
            toomanypeop = 1

            response_data['toomany'] = True
            # response_data['result'] = 'You reached the maximum number of participants you set up initially, go for a bigger size if needed.'
            # response_data['result2'] = 1
            response_data['talknumber'] = talknumber

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

        else:
            response_data['toomany'] = False
            response_data['cant'] = False

            userr = User.objects.filter(email__iexact=email)[0]
            print('confh',conftopass,talknumber)

            conftopassmast = CreateConf.objects.filter(id=confnummast)[0]
            print('conftopassmast', conftopassmast.title, conftopassmast.id, confnummast)
            if conftopassmast.masterconf:

                instance = RegisterConf.objects.filter(user=userr,
                                                       conference__masterconfpass=conftopassmast.masterconfpass).order_by('conference')
                print('instan', instance, talknumber)
                print('inq', instance[talknumber])
                # recalculate talknumber
                instancenew = RegisterConf.objects.filter(user=userr,
                                                          conference=instance[talknumber].conference).order_by(
                    'conference')
                print('new', len(instancenew))
                ii = 0
                for inew in instancenew:
                    if inew.title == instance[talknumber].title:
                        talknumber2 = ii
                    ii += 1

                instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber2]

            else:

                instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]

            cantchange = 0

            #print('agua')
            # check if trying to change master conf user
            daugh = CreateConf.objects.filter(id=confnum, daughterconf=True)
            if daugh:  # then add master conf creator to the daughter conf with attendance only
                #print('dddrreeff', daugh)
                masterconfcreatorid = CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass,
                                                                masterconf=True).values_list('user', flat=True)[0]

                masterconfcreator = User.objects.filter(id=masterconfcreatorid)[0]
                #print('gh', masterconfcreator, userr)
                if userr == masterconfcreator:
                    cantchange = 1
                    #print('userr,cg', userr)

            oldroleb = instance.role
            oldsoclocb = instance.socloc

            #print('oldrole', oldroleb, role, oldsoclocb, loc)

            if (oldroleb != int(role)) or (oldsoclocb != int(loc)):
                #print('no...?')
                if cantchange == 1:
                    response_data['cant'] = True

            instance.abstract=abs3
            instance.title = title
            # instance.biography=bio
            if cantchange == 0:
                instance.role = role
                instance.socloc = loc
            else:
                instance.role = oldroleb
                instance.socloc = oldsoclocb

            instance.type = talktype
            instance.free = isfree

            if not request.POST.get('title'):
                instance.title = 'Attendance only'

            #print('i', instance.role, oldroleb, type(instance.role), type(oldroleb))
            if ((int(instance.role) == 1 and oldroleb != 1) or (int(instance.role) == 3 and oldroleb != 3)):
                #print('nope')
                if ((int(instance.role) == 1 and oldroleb != 3) or (int(instance.role) == 3 and oldroleb != 1)):
                    # try:
                    #print('nope')
                    #print('1')

                    with sessions.Session() as session:
                        # log-in
                        try:
                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                server_url='https://chat.carbonfreeconf.com',
                                                session=session)
                        except:
                            subject = "Nooooooooo Rocket chat what????"
                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                            emailto = []
                            emailto.append("quentin.kral@gmail.com")
                            emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            #email.send(fail_silently=False)

                        if conftopass.title_extra:
                            slugtitleconf = slugify(str('%s' % (conftopass.title +' '+conftopass.title_extra)))
                        else:
                            slugtitleconf = slugify(str('%s' % (conftopass.title)))
                        #print('slug', slugtitleconf)

                        # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                        contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                        if contentroom['success'] == True:
                            keyroom = contentroom['group']['_id']

                            contentuser = rocket.users_info(username=userr.username).json()
                            key = contentuser['user']['_id']
                            #print('keyo', key, keyroom)

                            # add moderators to a room tbbbbbbbbbbbbb
                            modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
                            #print(modo)
                            # pprint(rocket.groups_remove_moderator(room_id=keyroom,user_id=key).json())
                            # pprint(rocket.groups_kick(room_id=keyroom,user_id=key).json())
                        rocket.logout()
                        # except:
                        #print('dommage')

            #print('i2', instance.role, oldroleb, type(instance.role), type(oldroleb))
            if ((int(instance.role) == 0 and oldroleb != 0) or (int(instance.role) == 2 and oldroleb != 2)):
                #print('nope')
                if ((int(instance.role) == 0 and oldroleb != 2) or (int(instance.role) == 2 and oldroleb != 0)):
                    # try:
                    if (int(instance.role) != 3 and (int(instance.socloc) != 1) and (int(instance.socloc) != 2)):
                        #print('nope')
                        #print('2')

                        with sessions.Session() as session:
                            # log-in
                            try:
                                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                    server_url='https://chat.carbonfreeconf.com',
                                                    session=session)
                            except:
                                subject = "Nooooooooo Rocket chat what????"
                                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                emailto = []
                                emailto.append("quentin.kral@gmail.com")
                                emailto.append("carbonfreeconf@gmail.com")

                                email = EmailMessage(
                                    subject,
                                    message,
                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                    emailto,  # to
                                    # getemails,  # bcc
                                    # reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                email.content_subtype = "html"

                                #email.send(fail_silently=False)
                            if conftopass.title_extra:
                                slugtitleconf = slugify(str('%s' % (conftopass.title +' '+conftopass.title_extra)))
                            else:
                                slugtitleconf = slugify(str('%s' % (conftopass.title)))
                            #print('slug', slugtitleconf)

                            # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                            contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                            keyroom = contentroom['group']['_id']

                            contentuser = rocket.users_info(username=userr.username).json()
                            key = contentuser['user']['_id']
                            #print('keyo', key, keyroom)

                            # add moderators to a room tbbbbbbbbbbbbb
                            modo = rocket.groups_remove_moderator(room_id=keyroom, user_id=key).json()
                            #print(modo)
                            # pprint(rocket.groups_remove_moderator(room_id=keyroom,user_id=key).json())
                            rocket.logout()
                            # except:
                            #print('dommage')
            #print('quoi?', instance.socloc, oldsoclocb)
            if ((int(instance.role) == 3 and oldroleb != 3) or (int(instance.socloc) != 0 and oldsoclocb == 0)):
                #print('3')

                with sessions.Session() as session:
                    # log-in

                    try:
                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                            server_url='https://chat.carbonfreeconf.com',
                                            session=session)
                    except:
                        subject = "Nooooooooo Rocket chat what????"
                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                        emailto = []
                        emailto.append("quentin.kral@gmail.com")
                        emailto.append("carbonfreeconf@gmail.com")

                        email = EmailMessage(
                            subject,
                            message,
                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                            emailto,  # to
                            # getemails,  # bcc
                            # reply_to=replylist,
                            headers={'Message-From': 'www.carbonfreeconf.com'},
                        )
                        email.content_subtype = "html"

                        #email.send(fail_silently=False)
                    if conftopass.title_extra:
                        slugtitleconf = slugify(str('%s' % (conftopass.title +' '+conftopass.title_extra)))
                    else:
                        slugtitleconf = slugify(str('%s' % (conftopass.title)))
                    #print('slug', slugtitleconf)
                    # list = rocket.groups_list_all().json()
                    # print('l', list)
                    # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                    contentuser = rocket.users_info(username=instance.user.username).json()
                    key = contentuser['user']['_id']
                    #print('keyo', key)

                    contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                    if contentroom['success']:
                        #print('c', contentroom)
                        keyroom = contentroom['group']['_id']

                        pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())
                        modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()

                    if conftopass.title_extra:
                        slugtitleconfcafe = slugify(str('%s' % ('Coffee break for '+ conftopass.title +' '+conftopass.title_extra)))
                    else:
                        slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title)))
                    contentroomcafe = rocket.groups_info(room_name=slugtitleconfcafe).json()
                    if contentroomcafe['success']:
                        #print('c', contentroomcafe)
                        keyroomcafe = contentroomcafe['group']['_id']

                        pprint(rocket.groups_invite(room_id=keyroomcafe, user_id=key).json())
                        modo = rocket.groups_add_moderator(room_id=keyroomcafe, user_id=key).json()
                    if conftopass.title_extra:
                        slugtitleconforg = slugify(str('%s' % ('organization of '+ conftopass.title +' '+conftopass.title_extra)))
                    else:
                        slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title)))
                    #print('slugorg', slugtitleconforg)

                    contentroomorg = rocket.groups_info(room_name=slugtitleconforg).json()
                    if contentroomorg['success']:
                        #print('corg', contentroomorg)
                        keyroomorg = contentroomorg['group']['_id']

                        pprint(rocket.groups_invite(room_id=keyroomorg, user_id=key).json())
                        modoorg = rocket.groups_add_moderator(room_id=keyroomorg, user_id=key).json()

                    rocket.logout()

            if ((int(instance.role) != 3 and oldroleb == 3) or (int(instance.socloc) == 0 and oldsoclocb > 0)):
                if (int(instance.role) != 3 and int(instance.socloc) == 0):
                    #print('4')
                    with sessions.Session() as session:
                        # log-in

                        try:
                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                server_url='https://chat.carbonfreeconf.com',
                                                session=session)
                        except:
                            subject = "Nooooooooo Rocket chat what????"
                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                            emailto = []
                            emailto.append("quentin.kral@gmail.com")
                            emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            #email.send(fail_silently=False)

                        if conftopass.title_extra:
                            slugtitleconf = slugify(str('%s' % (conftopass.title +' '+conftopass.title_extra)))
                        else:
                            slugtitleconf = slugify(str('%s' % (conftopass.title)))
                        #print('slug', slugtitleconf)
                        # list = rocket.groups_list_all().json()
                        # print('l', list)
                        # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                        contentuser = rocket.users_info(username=instance.user.username).json()
                        key = contentuser['user']['_id']
                        #print('keyo', key)
                        if conftopass.title_extra:
                            slugtitleconfcafe = slugify(str('%s' % ('Coffee break for '+ conftopass.title +' '+conftopass.title_extra)))
                        else:
                            slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conftopass.title)))

                        if (int(instance.role) != 1):
                            contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                            if contentroom['success']:
                                #print('c', contentroom)
                                keyroom = contentroom['group']['_id']

                                modo = rocket.groups_remove_moderator(room_id=keyroom, user_id=key).json()

                                # kick que si pas de talks acceptés
                                regtalkcheck = RegisterConf.objects.filter(user=userr, conference=conftopass, status=1)
                                if not regtalkcheck:
                                    pprint(rocket.groups_kick(room_id=keyroom, user_id=key).json())

                            contentroomcafe = rocket.groups_info(room_name=slugtitleconfcafe).json()
                            if contentroomcafe['success']:
                                #print('c', contentroomcafe)
                                keyroomcafe = contentroomcafe['group']['_id']

                                modocafe = rocket.groups_remove_moderator(room_id=keyroomcafe, user_id=key).json()

                                # kick que si pas de talks acceptés
                                regtalkcheck = RegisterConf.objects.filter(user=userr, conference=conftopass, status=1)
                                if not regtalkcheck:
                                    pprint(rocket.groups_kick(room_id=keyroomcafe, user_id=key).json())

                        if conftopass.title_extra:
                            slugtitleconforg = slugify(str('%s' % ('organization of '+ conftopass.title +' '+conftopass.title_extra)))
                        else:
                            slugtitleconforg = slugify(str('%s' % ('organization of ' + conftopass.title)))
                        #print('slugorg', slugtitleconforg)

                        contentroomorg = rocket.groups_info(room_name=slugtitleconforg).json()
                        if contentroomorg['success']:
                            #print('corg', contentroomorg)
                            keyroomorg = contentroomorg['group']['_id']

                            # modoorg = rocket.groups_add_moderator(room_id=keyroomorg, user_id=key).json()
                            pprint(rocket.groups_kick(room_id=keyroomorg, user_id=key).json())

                    rocket.logout()

            instance.save()
            # print('saved talk',title,abs,bio,role,loc,talktype)
            # also change user role and socloc for other talks of same user
            regtalkother = RegisterConf.objects.filter(user=userr, conference=conftopass)
            for talk in regtalkother:
                if cantchange == 0:
                    talk.socloc = loc
                    talk.role = role
                talk.free = isfree
                talk.save()

            if ((int(instance.role) == 3 and oldroleb != 3)):

                if not UserLink.objects.filter(conference=conftopass, user=userr):
                    userconf = CreateConf.objects.filter(id=conftopass.id)[0]

                    # userconf=CreateConf.objects.filter(conference=conftopass).values_list('user', flat=True)[0]
                    userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conftopass,
                                                                            user=userr,
                                                                            defaults={
                                                                                'mainuser': userconf.user})
                    userlink.save()

            if ((int(instance.role) != 3 and oldroleb == 3)):
                userconf = CreateConf.objects.filter(id=conftopass.id)[0]

                if UserLink.objects.filter(conference=conftopass, user=userr, mainuser=userconf.user).exists():
                    UserLink.objects.filter(conference=conftopass,user=userr,mainuser=userconf.user).delete()

            if conftopass.daughterconf or conftopass.masterconf:

                allconf = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).exclude(id=conftopass.id)
                for conf in allconf:
                    regtalkother = RegisterConf.objects.filter(user=userr, conference=conf)
                    for talk in regtalkother:
                        talk.free = isfree
                        talk.save()

                if conftopass.masterconf:
                    if ((int(instance.role) == 3 and oldroleb != 3)):
                        #print('uikjh mama')
                        for conf in allconf:
                            regtalkother = RegisterConf.objects.filter(user=userr, conference=conf,status=1,type=5)
                            #print('yepcreated')
                            if regtalkother:
                                for talk in regtalkother:
                                    talk.role = 3
                                    talk.save()
                            else:
                                createsupuser = RegisterConf.objects.create(user=userr, conference=conf,status=1,type=5,role=3)
                                #print('created')

                            if not UserLink.objects.filter(conference=conf, user=userr):
                                userconf = CreateConf.objects.filter(id=conf.id)[0]

                                # userconf=CreateConf.objects.filter(conference=conftopass).values_list('user', flat=True)[0]
                                userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conf,
                                                                                        user=userr,
                                                                                        defaults={
                                                                                            'mainuser': userconf.user})
                                userlink.save()
                    if ((int(instance.role) != 3 and oldroleb == 3)):
                        #print('uikjh mama2')
                        for conf in allconf:
                            regtalkother = RegisterConf.objects.filter(user=userr, conference=conf,status=1,type=5)
                            #print('yepcreated2')
                            if regtalkother:
                                for talk in regtalkother:
                                    talk.role = 2
                                    talk.save()

                            userconf = CreateConf.objects.filter(id=conf.id)[0]
                            #print('allconf',conf.title,userr,userconf.user)

                            if UserLink.objects.filter(conference=conf, user=userr,mainuser=userconf.user).exists():
                                UserLink.objects.filter(conference=conf, user=userr, mainuser=userconf.user).delete()

                            #else:
                            #    createsupuser = RegisterConf.objects.create(user=userr, conference=conf,status=1,type=5,role=3)
                            #    print('created2')

            response_data['talktype'] = talktype
            response_data['talknumber'] = talknumber
            response_data['title'] = title  # "titley"
            response_data['abs'] = abs  # "abs"
            response_data['bio'] = bio  # "bio"

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

@csrf_exempt
def updatepollmodal(request):
    if request.method == 'POST':

        #print('brah')
        #talktype = request.POST.get('part')
        #data = json.loads(request.body.decode('utf-8'))
        #print(request.FILES)
        #files = request.FILES

        #attached_file1 = files.get('uploadPicture', None)
        #print('att',attached_file1)

        #print(request.POST['confnum'])
        #print(request.POST)

        #print('tr',request.body)

        #formdata = json.loads(request.POST)

        #print('ok',formdata)


        #formdata = json.loads(request.body.decode('formData'))

        #confnum = request.POST.get('confnum')
        #pquestion = request.POST.get('pquestion')

        formdata=request.POST
        #print('len',len(formdata))
        anodata = formdata.get("ano", "0")
        #print('an',anodata)

        add2=0
        if 'uploadPicture' in request.FILES:
            add2=1

        if anodata=="0":
            add=0
            pano="off"
            #print('0')
        else:
            add=1
            pano="on"

        nbchoices=len(formdata)-4-add+add2
        # abs = request.POST.get('abs')

        #print('f',formdata)
        #print('f1',formdata[0])
        #print('f2',formdata[1]['value'])

        #confnum=formdata[1]['value']
        confnum=formdata['confnum']

        #pquestion=formdata[2]['value']
        pquestion=formdata['pquestion']

        #print('confnum',confnum)
        #print('pq',pquestion)

        pchoice=[]
        for i in range(nbchoices):
            #pchoice.append(formdata[3+i]['value'])
            nc=str(i+1)
            #print('nc',nc,i,nbchoices)
            pchoice.append(formdata['choice'+nc])


        #print('pchoice',pchoice)
        #pano=formdata[len(formdata)-1]['value']
        #print('pano',pano)
        # abs = inst_form[talknumber].cleaned_data['abstract']

        #talknumber = int(talknumber)
        # print('talktype',talktype)
        # print('email',email)
        # print('confnum',confnum)
        # print('talknumber',talknumber)
        response_data = {}
        response_data['success'] = False

        #print('okiy')
        conftopass = CreateConf.objects.filter(id=confnum)[0]
        #print('okiyd',pchoice[1])

        if pquestion and pchoice[0] and pchoice[1]:
            #print('okisdy')

            poll=CreatePoll()
            poll.conference=conftopass
            poll.question=pquestion
            poll.active=False
            poll.removed=False
            poll.user=request.user
            if pano=="on":
                poll.anonymous=True
            else:
                poll.anonymous=False

            #print('okiydsqd')

            if 'uploadPicture' in request.FILES:
                #print('found it')
                poll.pollimage = request.FILES['uploadPicture']
            else:
                print('nope')

            poll.save()

            for c in pchoice:
                if c:
                    choices=ChoicePoll()
                    choices.poll=poll
                    choices.choice_text=c
                    choices.save()

            response_data['success'] = True

        else:
            response_data['missing'] = True

        #response_data['toomany'] = True
        # response_data['result'] = 'You reached the maximum number of participants you set up initially, go for a bigger size if needed.'
        # response_data['result2'] = 1
        #response_data['talknumber'] = talknumber

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def newchoicepollmodal(request):
    if request.method == 'POST':
        import inflect
        p = inflect.engine()

        formdata = json.loads(request.POST.get('formData'))
        # confnum = request.POST.get('confnum')
        # pquestion = request.POST.get('pquestion')

        #print('formdata', formdata)
        #print('len', len(formdata),formdata[len(formdata)-1]['name'])

        if formdata[len(formdata)-1]['name'] != 'ano':
            add=0
            #pano="off"
            #print('0')
        else:
            add=1
            #print('ano')
            #pano="on"

        nbchoices = len(formdata) - 2 - add
        # abs = request.POST.get('abs')
        #print('u')
        #confnum = formdata[1]['value']

        #print('confnum',confnum)
        #print('pq',pquestion)
        nbword=p.number_to_words(p.ordinal(nbchoices)).title()

        response_data = {}
        response_data['success'] = True
        response_data['newfieldword'] = nbword
        response_data['newfieldnum'] = nbchoices

        #conftopass = CreateConf.objects.filter(id=confnum)[0]


        #response_data['missing'] = True

        #response_data['toomany'] = True
        # response_data['result'] = 'You reached the maximum number of participants you set up initially, go for a bigger size if needed.'
        # response_data['result2'] = 1
        #response_data['talknumber'] = talknumber

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def questionasked(request):
    #CHECKBOX_MAPPING = {'on': True,
    #                    'off': False, }

    if request.method == 'POST':
        question = request.POST.get('question')
        confnum = request.POST.get('confnum')
        anon = json.loads(request.POST.get('ano', 'false'))  # python boolean
        #anon = CHECKBOX_MAPPING.get(request.POST.get('ano'))

        the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()

        conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}

        if question:

            newq = CreateQuestion()
            newq.question=question
            newq.anonymous=anon
            newq.user=the_user
            newq.active=True
            newq.conference=conftopass
            newq.save()


            response_data['success'] = True

        else:

            response_data['success'] = False
            response_data['noq'] = True



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def addquestionasked(request):#paulain

    if request.method == 'POST':
        #question = request.POST.get('question')
        confnum = request.POST.get('confnum')
        init = request.POST.get('init')

        #print('init',init)

        #conftopass = CreateConf.objects.filter(id=confnum)[0]

        if request.user.is_authenticated:


            if UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).exists():
                question_last_updated = UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).values_list('question_last_updated',flat=True)[0]
                poll_last_updated = UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).values_list('poll_last_updated',flat=True)[0]
                #print('aqua',question_last_updated)
            else:
                question_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)
                poll_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)
                #print('aqui',question_last_updated)

            if poll_last_updated is None:
                poll_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)

            if question_last_updated is None:
                question_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)

            latestupdatedate=False
            if CreateQuestion.objects.filter(conference_id=confnum).exists():
                latestupdatedate = CreateQuestion.objects.filter(conference_id=confnum).latest('updated').updated

            latestupdatedatepoll=False
            if CreatePoll.objects.filter(conference_id=confnum).exists():
                latestupdatedatepoll = CreatePoll.objects.latest('updated').updated

            response_data = {}
            conftopass = CreateConf.objects.filter(id=confnum)[0]

            if latestupdatedatepoll and poll_last_updated is not None:
                #print('whoa1poll',poll_last_updated,latestupdatedate)

                #if not question_last_updated:
                    #x = datetime.tzinfo("UTC")

                if poll_last_updated<latestupdatedatepoll or init == '1':
                    response_data['successp'] = True
                    #print('whoa2poll')

                    if init=='0':
                        obj, created = UserUpdateQ.objects.update_or_create(
                            conference=conftopass,
                            user=request.user,
                            defaults={'poll_last_updated': timezone.now()},
                        )
                        #conftopass.question_last_updated = timezone.now()
                        #print('datepoll', timezone.now())
                        #obj.save()

                    qp_question = []
                    qp_user = []
                    #qp_vote = []
                    qp_high = []
                    qp_ano = []
                    qp_roleq = []
                    qp_id = []
                    qp_idq = []
                    qp_choices = []
                    qp_choices_len = []
                    qp_active = []
                    qp_showres = []
                    qp_removed = []
                    qp_alr = []
                    qp_voteid = []
                    qp_votetot=[]
                    qp_voteper=[]
                    qp_votetotal=[]
                    qp_max=[]
                    qp_image=[]

                    response_data['cantseepoll'] = False

                    rolep = False
                    if RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1).exists():
                        talka = RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1)
                        for tb in talka:
                            if tb.role == 1 or tb.role == 3 or tb.socloc == 2:
                                rolep = True

                    if rolep:
                        pollactive = CreatePoll.objects.filter(conference__id=confnum,removed=False).order_by('id')
                        #print('pollact',pollactive)

                    else:
                        pollactive = CreatePoll.objects.filter(conference__id=confnum, active=True, removed=False).order_by('id')
                        #print('pollact2',pollactive)

                    ip = 0

                    for qp in pollactive:

                        qp_question.append(qp.question)
                        #qp_vote.append(qp.votes.count())
                        qp_high.append(qp.highlight)
                        qp_ano.append(qp.anonymous)
                        qp_roleq.append(rolep)
                        qp_id.append(qp.id)
                        qp_active.append(qp.active)
                        qp_showres.append(qp.showres)
                        qp_removed.append(qp.removed)
                        #print('qp.pollimage',qp.pollimage)
                        if qp.pollimage:
                            #print('qp.pollimage2', qp.pollimage.url)
                            qp_image.append(qp.pollimage.url)
                        else:
                            qp_image.append('')

                        #from django.templatetags.static import static

                        #url = static('myapp/')

                        #qp_image.append(qp.pollimage.url)

                        if qp.anonymous:
                            qp_user.append("Anonymous")
                        else:
                            qp_user.append(qp.user.first_name + ' ' + qp.user.last_name)

                        choices = ChoicePoll.objects.filter(poll=qp).order_by('created')
                        choice=[]
                        idch=[]
                        voteschoices=[]
                        sumvotes=0
                        for ch in choices:
                            choice.append(ch.choice_text)
                            idch.append(int(ch.id))
                            voteschoices.append(ch.votes.count())
                            sumvotes+=ch.votes.count()


                        qp_idq.append(idch)

                        qp_choices.append(choice)
                        qp_choices_len.append(len(choice))
                        qp_votetot.append(voteschoices)
                        qp_votetotal.append(sumvotes)

                        voteschoicesper = [0.]*len(voteschoices)
                        for i in range(len(voteschoices)):
                            if sumvotes != 0.:
                                voteschoicesper[i] = round(voteschoices[i]/sumvotes*100,2)

                        qp_voteper.append(voteschoicesper)
                        m = max(voteschoices)
                        maxi=[ig for ig, jg in enumerate(voteschoices) if jg == m]
                        #print('m',m,maxi)
                        qpmaxper = ['0']*len(voteschoices)
                        for i in range(len(voteschoices)):
                            if i in maxi:
                                qpmaxper[i]='1'
                            else:
                                qpmaxper[i]='0'

                        qp_max.append(qpmaxper)

                        #print('qpmax',qp_max)

                        al = 0
                        voteid=-1
                        for q in choices:
                            if q.votes.exists(request.user.id):
                                al = 1
                                voteid=int(q.id)

                        qp_alr.append(al)
                        qp_voteid.append(voteid)

                        ip += 1

                    #print("voteid",qp_voteid)

                    response_data['questionp'] = qp_question
                    #response_data['votep'] = qp_vote
                    response_data['userp'] = qp_user
                    response_data['highlightp'] = qp_high
                    response_data['anonymousp'] = qp_ano
                    response_data['rolep'] = qp_roleq
                    response_data['qidp'] = qp_id
                    response_data['idqp'] = qp_idq
                    response_data['choicep'] = qp_choices
                    response_data['choiceplen'] = qp_choices_len
                    response_data['active'] = qp_active
                    response_data['showres'] = qp_showres
                    response_data['removed'] = qp_removed
                    response_data['alr'] = qp_alr
                    response_data['voteid'] = qp_voteid
                    response_data['votetot'] = qp_votetot
                    response_data['votetotal'] = qp_votetotal
                    response_data['voteper'] = qp_voteper
                    response_data['imagepoll'] = qp_image
                    #print('qp_image',qp_image)
                    response_data['max'] = qp_max

                    #else:
                    #    response_data['cantseepoll'] = True

            else:
                response_data['successp'] = False

            if latestupdatedate:
                #print('whoa1',question_last_updated,latestupdatedate)

                #if not question_last_updated:
                    #x = datetime.tzinfo("UTC")

                if question_last_updated<latestupdatedate or init == '1':
                    response_data['success'] = True
                    #print('whoa2')
                    #conftopass = CreateConf.objects.filter(id=confnum)[0]

                    if init=='0':
                        obj, created = UserUpdateQ.objects.update_or_create(
                            conference=conftopass,
                            user=request.user,
                            defaults={'question_last_updated': timezone.now()},
                        )
                        #conftopass.question_last_updated = timezone.now()
                        #print('date', timezone.now())
                        #obj.save()

                    qq_question=[]
                    qq_user=[]
                    qq_vote=[]
                    qq_high=[]
                    qq_ano=[]
                    qq_roleq=[]
                    qq_id=[]
                    qq_idq=[]

                    roleq=False
                    if RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1).exists():
                        talka = RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1)
                        for tb in talka:
                            if tb.role == 1 or tb.role == 3:
                                roleq = True

                    questionactive = CreateQuestion.objects.filter(conference__id=confnum, active=True).order_by('created')
                    iq=0

                    for qq in questionactive:

                        qq_question.append(qq.question)
                        qq_vote.append(qq.votes.count())
                        qq_high.append(qq.highlight)
                        qq_ano.append(qq.anonymous)
                        qq_roleq.append(roleq)
                        qq_id.append(qq.id)
                        qq_idq.append(iq)

                        if qq.anonymous:
                            qq_user.append("Anonymous")
                        else:
                            qq_user.append(qq.user.first_name+' '+qq.user.last_name)

                        iq+=1

                    #X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
                    #Y = [0, 1, 1, 0, 1, 2, 2, 0, 1]

                    #print(Z)  # ["a", "d", "h", "b", "c", "e", "i", "f", "g"]

                    #print('qavant', qq_question)
                    #print('qvoteavant', qq_vote)

                    #print('zip',set(zip(qq_vote, qq_question)))

                    qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]
                    qq_roleq = [x for y, x in sorted(zip(qq_vote, qq_roleq), key=lambda x: x[0], reverse=True)]
                    qq_user = [x for y, x in sorted(zip(qq_vote, qq_user), key=lambda x: x[0], reverse=True)]
                    qq_ano = [x for y, x in sorted(zip(qq_vote, qq_ano), key=lambda x: x[0], reverse=True)]
                    qq_high = [x for y, x in sorted(zip(qq_vote, qq_high), key=lambda x: x[0], reverse=True)]
                    qq_id = [x for y, x in sorted(zip(qq_vote, qq_id), key=lambda x: x[0], reverse=True)]
                    qq_idq = [x for y, x in sorted(zip(qq_vote, qq_idq), key=lambda x: x[0], reverse=True)]
                    #qq_vote = [x for _, x in sorted(zip(qq_vote, qq_vote))]

                    qq_vote.sort(key=lambda x: x, reverse=True)

                    #print('zip2',sorted(zip(qq_vote, qq_question)))

                    #qq_question.sort(key=qq_vote)
                    #print('qvoteapres', qq_vote)

                    #print('qapres', qq_question)

                    #from django.core import serializers
                    #data = serializers.serialize('json', list(questionactive))
                    response_data['question'] = qq_question
                    response_data['vote'] = qq_vote
                    response_data['user'] = qq_user
                    response_data['highlight'] = qq_high
                    response_data['anonymous'] = qq_ano
                    response_data['roleq'] = qq_roleq
                    response_data['qid'] = qq_id
                    response_data['idq'] = qq_idq


            else:
                response_data['success'] = False


        else:
            response_data={}
            response_data['success'] = False

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def checkmin(request):#paulain

    if request.method == 'POST':
        confnum = request.POST.get('confnum')

        response_data = {}
        conf=CreateConf.objects.filter(id=confnum)[0]
        #if MinLeftModel.objects.filter(user=request.user,conference=conf).exists():
        #    minleftu=MinLeftModel.objects.filter(user=request.user,conference=conf).order_by('-created')[0]#.exclude(minleftidu=0)

        minleftu, createde = MinLeftModel.objects.update_or_create(
            user=request.user,
            conference=conf,
            defaults={},
        )

        tinow=timezone.now()
        #print('minlu',minleftu)
        #print('conf.minleft,minleftu.minleftidu,conf.minleftid',conf.minleft,minleftu.minleftidu,conf.minleftid)

        minn=conf.minleft
        if minn==100:
            minn=1
        timenew=tinow-timedelta(minutes=minn)

        #print(conf.minleftcreated,timezone.now(),timenew)

        if conf.minleft != 0:
            if minleftu.minleftidu != conf.minleftid and conf.minleftcreated>timenew:
                tzloc = request.session.get('django_timezone', 'UTC')
                local = pytz.timezone(tzloc)
                shift = tinow.astimezone(local).replace(tzinfo=None) - tinow.replace(tzinfo=None)
                print('shift', shift)
                response_data['success'] = True
                response_data['minleft'] = conf.minleft
                response_data['minleftcreated'] = (conf.minleftcreated+shift).strftime("%I:%M %p")#qu.created.strftime("%A %d %b %Y at %I:%M %p")
                response_data['namemod'] = conf.minleftuserfln

                minleftu.minleftidu=conf.minleftid
                minleftu.save()

        else:
            response_data['success'] = False

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def checkfornewqandp(request,confnum=None):#paulain

    if request.method == 'POST' and confnum:
        print('post')
        #question = request.POST.get('question')
        #confnum = request.POST.get('confnum')
        #init = request.POST.get('init')

        #print('init',init)

        #conftopass = CreateConf.objects.filter(id=confnum)[0]

        countq=0
        countp=0
        if request.user.is_authenticated:
            print('authe')
            response_data = {}
            response_data['success'] = False
            #response_data['successp'] = False

            if UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).exists():
                question_last_updated = UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).values_list('question_last_updated',flat=True)[0]
                poll_last_updated = UserUpdateQ.objects.filter(conference__id=confnum,user=request.user).values_list('poll_last_updated',flat=True)[0]
                #print('aqua',question_last_updated)
            else:
                question_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)
                poll_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)
                #print('aqui',question_last_updated)

            if poll_last_updated is None:
                poll_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)

            if question_last_updated is None:
                question_last_updated = datetime(1800, 7, 29, 12, 0, 13, 204815, tzinfo=timezone.utc)

            latestupdatedate=False
            if CreateQuestion.objects.filter(conference_id=confnum).exists():
                latestupdatedate = CreateQuestion.objects.filter(conference_id=confnum).latest('updated').updated

            latestupdatedatepoll=False
            if CreatePoll.objects.filter(conference_id=confnum).exists():
                latestupdatedatepoll = CreatePoll.objects.latest('updated').updated

            response_data = {}
            conftopass = CreateConf.objects.filter(id=confnum)[0]

            if latestupdatedatepoll and poll_last_updated is not None:
                print('whoa1poll',poll_last_updated,latestupdatedatepoll)

                #if not question_last_updated:
                    #x = datetime.tzinfo("UTC")

                if poll_last_updated<latestupdatedatepoll:# or init == '1':
                    response_data['success'] = True
                    print('whoa2poll')
                    countp=CreatePoll.objects.filter(conference_id=confnum,updateactive__gt=poll_last_updated,active=True,removed=False).count()
                    print('countp',countp)
                    #if init=='0':
                    #obj, created = UserUpdateQ.objects.update_or_create(
                    #    conference=conftopass,
                    #    user=request.user,
                    #    defaults={'poll_last_updated': timezone.now()},
                    #)

            if latestupdatedate:
                print('whoa1b',question_last_updated,latestupdatedate)

                #if not question_last_updated:
                    #x = datetime.tzinfo("UTC")

                if question_last_updated<latestupdatedate:# or init == '1':
                    response_data['success'] = True
                    print('whoa2b')
                    countq = CreateQuestion.objects.filter(conference_id=confnum,created__gt=question_last_updated,active=True).count()
                    print('countq', countq)
                    #conftopass = CreateConf.objects.filter(id=confnum)[0]

                    #if init=='0':
                    #    obj, created = UserUpdateQ.objects.update_or_create(
                    #        conference=conftopass,
                    #        user=request.user,
                    #        defaults={'question_last_updated': timezone.now()},
                    #    )


        else:
            print('dans else')
            response_data = {}
            response_data['success'] = False

        response_data['countqandp'] = countp+countq

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def removequestion(request):

    if request.method == 'POST':
        idq = request.POST.get('idq')
        iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()

        #conftopass = CreateConf.objects.filter(id=confnum)[0]

        #print('rem',idq,iddel)

        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        response_data['idq'] = idq

        if iddel:
            if str(idq).isnumeric():
                quest = CreateQuestion.objects.filter(id=iddel)[0]
                quest.active = False
            else:
                quest = CreatePoll.objects.filter(id=iddel)[0]
                quest.removed = True


            quest.save()


            response_data['success'] = True

        else:

            response_data['success'] = False


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def removeallquestion(request):

    if request.method == 'POST':
        #idq = request.POST.get('idq')
        #iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()

        #conftopass = CreateConf.objects.filter(id=confnum)[0]


        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        #response_data['idq'] = idq

        if confnum:
            quest = CreateQuestion.objects.filter(conference_id=confnum,active=True)
            for qu in quest:
                qu.active=False
                qu.save()


            response_data['success'] = True

        else:

            response_data['success'] = False



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def removeallpoll(request):

    if request.method == 'POST':
        #idq = request.POST.get('idq')
        #iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()

        #conftopass = CreateConf.objects.filter(id=confnum)[0]


        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        #response_data['idq'] = idq

        if confnum:
            quest = CreatePoll.objects.filter(conference_id=confnum,removed=False)
            for qu in quest:
                qu.removed=True
                qu.save()


            response_data['success'] = True

        else:

            response_data['success'] = False


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def thumbquestion(request):

    if request.method == 'POST':
        idq = request.POST.get('idq')
        iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()

        #conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        response_data['idq'] = idq

        if iddel:
            quest = CreateQuestion.objects.filter(id=iddel)[0]

            #quest.save()
            if quest.votes.exists(request.user.id) == False:

                quest.votes.up(request.user.id)

                response_data['result'] = "Thanks, your vote for this question was accounted for!"
                response_data['result2'] = 0


            else:
                response_data['result'] = "You have already voted for this question!"
                response_data['result2'] = 1


            response_data['success'] = True

        else:

            response_data['success'] = False



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def highquestion(request):

    if request.method == 'POST':
        idq = request.POST.get('idq')
        iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()
        #print('idfff',idq,iddel)
        #conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        response_data['idq'] = idq

        if iddel:
            if str(idq).isnumeric():
                quest = CreateQuestion.objects.filter(id=iddel)[0]
            else:
                quest = CreatePoll.objects.filter(id=iddel)[0]

            if quest.highlight == False:
                quest.highlight = True
            else:
                quest.highlight = False

            quest.save()

            response_data['success'] = True

        else:

            response_data['success'] = False



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def activate(request):

    if request.method == 'POST':
        idq = request.POST.get('idq')
        iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()
        #print('idfff',idq,iddel)
        #conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        response_data['idq'] = idq

        if iddel:
            quest = CreatePoll.objects.filter(id=iddel)[0]

            if quest.active == False:
                quest.active = True
                if quest.activedonce == False:
                    quest.activedonce = True
                quest.updateactive = timezone.now()
            else:
                quest.active = False

            quest.save()

            response_data['success'] = True

        else:

            response_data['success'] = False



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def showres(request):

    if request.method == 'POST':
        idq = request.POST.get('idq')
        iddel = request.POST.get('iddell')
        confnum = request.POST.get('confnum')

        #the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user,question,anon,request.POST.get('ano'))
        #the_user.userprofileinfo.isinconf = False
        #the_user.userprofileinfo.save()
        #print('idfff',idq,iddel)
        #conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
        response_data = {}
        response_data['idq'] = idq

        if iddel:
            quest = CreatePoll.objects.filter(id=iddel)[0]

            if quest.showres == False:
                quest.showres = True
                quest.updateactive = timezone.now()

            else:
                quest.showres = False

            quest.save()

            response_data['success'] = True

        else:

            response_data['success'] = False



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def isinconfb(request):
    if request.method == 'POST':
        # talktype = request.POST.get('talktype')

        the_user = User.objects.get(username=request.user.username)
        #print('theuser', the_user)
        the_user.userprofileinfo.isinconf = False
        the_user.userprofileinfo.save()

        # conftopass = CreateConf.objects.filter(id=confnum)[0]
        # userr = User.objects.filter(email__iexact=email)[0]
        # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]

        response_data = {}

        response_data['success'] = True


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def reloadtweet(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')

        conftopass = CreateConf.objects.filter(id=confnum)[0]

        # twittere
        api = utils.startapi()

        removehashtag = conftopass.twitterhashtag.split('#')
        #print('rem', removehashtag)
        tweet_user = []
        tweet_screenuser = []
        tweet_text = []
        tweet_image = []
        tweet_id = []
        tweet_date = []
        tweet_retweet = []
        tweet_retweetcount = []
        tweet_count = 0

        query = conftopass.twitterhashtag  # '#science'
        max_tweets = 6  # 1000
        apitwitexc=False
        try:
            searched_tweets = [status for status in
                           tweepy.Cursor(api.search, q=query, include_entities=True, tweet_mode="extended").items(
                               max_tweets)]
        except:
            apitwitexc = True

        # for tweet in api.search(q="carbon-neutral",rpp=25):#conftopass[0].twitterhashtag):

        if apitwitexc==False:
            for tweet in searched_tweets:
                status = api.get_status(tweet.id, tweet_mode="extended")
                try:
                    #print('t', status.retweeted_status.full_text)
                    tweet_text.append(status.retweeted_status.full_text)

                except AttributeError:  # Not a Retweet
                    #print('r', status.full_text)
                    tweet_text.append(status.full_text)

                tweet_user.append(tweet.user.name)
                tweet_screenuser.append(tweet.user.screen_name)
                tweet_date.append(tweet.created_at.strftime("%b. %d, %Y, %-I:%M %p"))
                tweet_retweet.append(tweet.retweeted)
                tweet_retweetcount.append(tweet.retweet_count)
                tweet_id.append(str(tweet.id))

                # tweet_text.append(tweet.full_text)
                tweet_count = tweet_count + 1

                if 'media' in tweet.entities:
                    for media in tweet.extended_entities['media']:
                        print('med', media['media_url'])
                    tweet_image.append(media['media_url'])

                else:
                    tweet_image.append('')

            response_data = {}

            if len(tweet_text) > 0:
                response_data['tweettext'] = tweet_text
                response_data['tweetusers'] = tweet_user
                response_data['tweetscreenusers'] = tweet_screenuser
                response_data['tweetimage'] = tweet_image
                response_data['tweetdate'] = tweet_date  # Nov. 17, 2020, 4:25 p.m.
                response_data['tweetid'] = tweet_id
                #print('twit_id', tweet_id)
                response_data['tweetretweet'] = tweet_retweet
                response_data['tweetretweetcount'] = tweet_retweetcount
                response_data['twitterwhashtag'] = removehashtag[1]
                response_data['maxtweets'] = max_tweets
                response_data['success'] = True
            else:
                response_data['success'] = False
                response_data['success2'] = True
                response_data['twitterwhashtag'] = removehashtag[1]

        else:
            response_data = {}
            response_data['success'] = False
            response_data['success2'] = False

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def instantzoom(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')

        starturl = utils.createconffunczoominstant(confnum, 0)

        response_data = {}
        response_data['starturl'] = starturl

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def minleft(request):#pleure
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        minleft = request.POST.get('minleft')
        sound = request.POST.get('togglesound')

        print('sound',sound)
        response_data = {}

        if sound=='true':

            conf=CreateConf.objects.filter(id=confnum)[0]
            conf.minleft=minleft
            conf.minleftid=random.randint(100000000, 1000000000)
            conf.minleftcreated=timezone.now()
            conf.minleftuserfln=request.user.first_name+' '+request.user.last_name

            conf.save()

            response_data['success'] = True
        else:
            response_data['success'] = False


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def calculateschedule(request):#pleure
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        tinow=timezone.now()

        datenowmin=tinow-timedelta(minutes=60)
        datenowmax=tinow+timedelta(minutes=120)

        #datenow2=datetime.now(tz=pytz.utc)

        print('date',datenowmin,datenowmax)
        #print('timed',datenow+timedelta(minutes=60))


        #scheduletimemax=Schedule.objects.filter(conference__id=confnum,start_date__gt=datenowmi)
        conf=CreateConf.objects.filter(id=confnum)[0]


        if conf.masterconf or conf.daughterconf:
            schedule = Schedule.objects.filter(
                Q(conference__masterconfpass=conf.masterconfpass, start_date__gt=datenowmin, start_date__lt=datenowmax) | Q(
                    conference__masterconfpass=conf.masterconfpass, end_date__gt=datenowmin, end_date__lt=datenowmax)).order_by(
                'start_date')
            # schedule = Schedule.objects.filter(conference__id=confnum).order_by(
            #    'start_date')
            print('schmast', schedule)
            multi=True
        else:
            schedule = Schedule.objects.filter(
                Q(conference__id=confnum, start_date__gt=datenowmin, start_date__lt=datenowmax) | Q(
                    conference__id=confnum, end_date__gt=datenowmin, end_date__lt=datenowmax)).order_by(
                'start_date')
            # schedule = Schedule.objects.filter(conference__id=confnum).order_by(
            #    'start_date')
            multi=False
            print('sch', schedule)

        text=[]
        abstract=[]
        truncabs=[]
        start=[]
        end=[]
        speaker=[]
        important=[]
        notpart=[]
        type=[]
        othersession=[]
        sessionname=[]
        joinurl=[]

        tzloc = request.session.get('django_timezone', 'UTC')
        local = pytz.timezone(tzloc)
        shift = tinow.astimezone(local).replace(tzinfo=None) - tinow.replace(tzinfo=None)
        print('shift',shift)

        printnow=(tinow+shift).strftime("%A %d %b %Y %I:%M %p")

        for s in schedule:
            if (multi==False) or (multi==True and s.conference.daughterconf and s.conference.acceptconf) or (multi==True and s.conference.masterconf):
                #if s.end_date>datenowmin
                print('trunc',Truncator(s.abstract).words(2))
                if s.conference != conf:
                    othersession.append('1')
                    sessionname.append(s.conference.title)
                    joinurl.append(str(s.conference.id))
                else:
                    othersession.append('0')
                    sessionname.append('')
                    joinurl.append('')

                text.append(s.text)
                abstract.append(s.abstract)
                truncabs.append(Truncator(s.abstract).words(15))
                start.append((s.start_date+shift).strftime("%I:%M %p"))#qu.created.strftime("%A %d %b %Y at %I:%M %p")
                end.append((s.end_date+shift).strftime("%I:%M %p"))
                speaker.append(s.speaker)
                important.append(s.important)
                notpart.append(s.notpart)
                type.append(s.get_type_display())

                print('sstart',s.start_date)


        response_data = {}
        response_data['othersession'] = othersession
        response_data['sessionname'] = sessionname
        response_data['joinurl'] = joinurl
        response_data['multi'] = multi
        response_data['success'] = True
        response_data['text'] = text
        response_data['abstract'] = abstract
        response_data['truncabs'] = truncabs
        response_data['start'] = start
        response_data['end'] = end
        response_data['speaker'] = speaker
        response_data['important'] = important
        response_data['notpart'] = notpart
        response_data['type'] = type
        response_data['printnow'] = printnow

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

def whoactiveb(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')

        useractive = UserProfileInfo.objects.filter(isinconf=True).values_list('user', flat=True)
        #print('uac', useractive)

        nbpeople = RegisterConf.objects.filter(conference__id=confnum, user__in=useractive)
        item_nbpeople = [nbpeople.filter(user=item['user']).first() for item in
                         nbpeople.values('user').distinct()]
        # print('nb',nbplive)
        #print('item_nbpeople', nbpeople.values_list('user__username', flat=True))

        #si ya un meeting id et now, c'est du live et sinon c'est du test

        visio=CreateVisio.objects.filter(conference__id=confnum,testroom=False)
        todaytime = datetime.utcnow().replace(tzinfo=pytz.utc)
        #visio = CreateVisio.objects.filter(conference_id=idcf, testroom=False)
        #getnumberofdays = abs(end - start).days + 1
        #idconf = visio[0].idconf

        clou=0
        for i in range(len(visio)):
            starttime = visio[i].date
            endtime = visio[i].date + timedelta(minutes=visio[i].duration)

            #if starttime > todaytime.date():
            if starttime - timedelta(minutes=60) < todaytime and endtime > todaytime and clou==0:
                clou=1
                meetingid=visio[i].idconf


        if clou==1:
            conn = http.client.HTTPSConnection("api.zoom.us")

            headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                       'content-type': 'application/json'}

            conn.request("GET", "/v2/metrics/meetings/"+meetingid+"/participants?page_size=1&type=live", headers=headers)

            res = conn.getresponse()
            data = res.read()
            #print('livepersons',data.decode("utf-8"))

            livep = json.loads(data)
            if res.status == 200:
                #print(livep["total_records"])
                nbplive=livep["total_records"]
            else:
                #print('pb donc pas live')#quand je passerai de pro à business ca va marcher... à retester then
                nbplive = len(item_nbpeople)

        else:
            #print('pas live')
            nbplive = len(item_nbpeople)


        response_data = {}

        response_data['success'] = True
        response_data['nbplive'] = nbplive


        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def whoactivec(request):
    if request.method == 'POST':

        confnum = request.POST.get('confnum')

        useractive = UserProfileInfo.objects.filter(isinconf=True).values_list('user', flat=True)
        #print('uac', useractive)

        nbpeople = RegisterConf.objects.filter(conference__id=confnum, user__in=useractive).order_by('user__last_name')
        item_nbpeople = [nbpeople.filter(user=item['user']).first() for item in
                         nbpeople.values('user').distinct()]
        #print('nb', item_nbpeople)
        peopactive = []
        for part in item_nbpeople:
            #print('item_nbpeople', part.user.email)
            peopactive.append(part.user.email)

        # status = 1, role = 3, socloc = 1, 2
        nbpeopletot = RegisterConf.objects.filter(
            Q(conference__id=confnum, status=1) | Q(conference__id=confnum, role=3) | Q(conference__id=confnum,
                                                                                        socloc__in=[1, 2])).order_by('user__last_name')

        item_nbpeopletot = [nbpeopletot.filter(user=item['user']).first() for item in
                            nbpeopletot.values('user').distinct()]

        peopactemail = []
        peopactfname = []
        peopactlname = []
        peopactorcid = []
        for part in item_nbpeopletot:
            #print('item_nbpeopletot', part.user.email)
            peopactemail.append(part.user.email)
            peopactorcid.append(part.user.userprofileinfo.orcid)
            peopactfname.append(part.user.first_name)
            peopactlname.append(part.user.last_name)

        response_data = {}

        response_data['success'] = True
        response_data['peopactive'] = peopactive
        response_data['peopactemail'] = peopactemail
        response_data['peopactfname'] = peopactfname
        response_data['peopactlname'] = peopactlname
        response_data['peopactorcid'] = peopactorcid



        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def changetalktype(request):
    if request.method == 'POST':
        talktype = request.POST.get('talktype')
        email = request.POST.get('email')
        confnum = request.POST.get('confnum')
        confnummast = request.POST.get('confnummast')
        talknumber = request.POST.get('talknumber')
        #print('ta', talknumber, type(talknumber))
        talknumber = int(talknumber)
        # print('talktype',talktype)
        # print('email',email)
        # print('confnum',confnum)
        # print('talknumber',talknumber)
        abs3 = request.POST.get('abs3')
        #abs4 = request.POST.get('abs4')

        print('confnummast',confnum,confnummast,talknumber)
        #print('b',abs4)

        conftopass = CreateConf.objects.filter(id=confnum)[0]
        userr = User.objects.filter(email__iexact=email)[0]
        conftopassmast = CreateConf.objects.filter(id=confnummast)[0]
        print('conftopassmast', conftopassmast.title, conftopassmast.id, confnummast)
        if conftopassmast.masterconf:

            instance = RegisterConf.objects.filter(user=userr,
                                                   conference__masterconfpass=conftopassmast.masterconfpass).order_by(
                'conference')
            print('instan', instance, talknumber)
            print('inq', instance[talknumber])
            # recalculate talknumber
            instancenew = RegisterConf.objects.filter(user=userr,
                                                      conference=instance[talknumber].conference).order_by(
                'conference')
            print('new', len(instancenew))
            ii = 0
            for inew in instancenew:
                print('i',ii,inew.title,instance[talknumber].title)
                if inew.title == instance[talknumber].title:
                    talknumber2 = ii
                ii += 1
            instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber2]
            print('talk',talknumber,talknumber2)
        else:
            instance = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]

        response_data = {}

        response_data['talktype'] = talktype
        response_data['talknumber'] = talknumber
        response_data['titley'] = instance.title  # "titley"
        response_data['abs'] = instance.abstract  # "abs"
        response_data['bio'] = instance.biography  # "bio"
        if conftopass.hybrid:
            response_data['ftf'] = instance.facetoface  # "bio"

        response_data['abs3'] = abs3  # "bio"

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def valperson(request, email=None, confnum=None):
    conftopass = CreateConf.objects.filter(id=confnum)[0]
    print('c', conftopass, confnum)
    userr = User.objects.filter(email__iexact=email)[0]
    #print('u', userr, email)

    if conftopass.masterconf:
        instance = RegisterConf.objects.filter(user=userr, conference__masterconfpass=conftopass.masterconfpass).order_by('conference')
    else:
        instance = RegisterConf.objects.filter(user=userr, conference=conftopass)

    #print('i', instance)
    if instance:

        cb = len(instance) - 1
        #print('cb', cb)
        ArticleFormSet = formset_factory(InstForm, extra=cb)
        build = []
        for i in range(len(instance)):
            build.append({'abstract': instance[i].abstract})
            #print('build', build)
            #print('fff', instance[i].abstract)

        formset = ArticleFormSet(initial=build)
        #print('ff',formset)

    else:
        formset = InstForm()

    context = {
        'instance': instance,
        'inst_form': formset,  # inst_form
        'conftopass':conftopass
    }

    print('confs',conftopass.size)

    if conftopass.size == '<10':
        size = 10
    elif conftopass.size == '10-50':
        size = 50
    elif conftopass.size == '50-100':
        size = 100
    elif conftopass.size == '100-300':
        size = 300
    elif conftopass.size == '300-500':
        size = 500
    elif conftopass.size == '500-1000':
        size = 1000

    userconf = RegisterConf.objects.filter(
        Q(conference=conftopass, role=3) | Q(conference=conftopass, socloc__in=[1, 2]) | Q(
            conference=conftopass, status=1))
    #print('userconf', userconf, len(userconf))
    item_nbuser = [userconf.filter(user=item['user']).first() for item in
                   userconf.values('user').distinct()]
    #print('item', item_nbuser)
    nbuserconf = len(item_nbuser)

    #for user in userconf:
    #    print('username', user.user.username)

    if nbuserconf > 1.1 * size:
        # faire un truc
        print('attention too many participants')
        context.update({'toomany': True})

    if request.method == 'POST':
        # typetalk = request.POST.get('typetalk')
        ##print('typetalk',typetalk)
        # response_data = {}

        # response_data['typetalk'] = typetalk
        # return HttpResponse(
        #    json.dumps(response_data),
        #    content_type="application/json"
        # )
        cantchange = 0

        print('aguakl')
        # check if trying to change master conf user
        daugh = CreateConf.objects.filter(id=confnum, daughterconf=True)
        if daugh:  # then add master conf creator to the daughter conf with attendance only
            print('dddrree.???', daugh)
            masterconfcreatorid = CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass,
                                                            masterconf=True).values_list('user', flat=True)[0]

            masterconfcreator = User.objects.filter(id=masterconfcreatorid)[0]
            if userr == masterconfcreator:
                regtalku = RegisterConf.objects.filter(user=userr, conference=conftopass, status=1)
                #print(len(regtalku))
                if len(regtalku) == 1:
                    cantchange = 1
                    #print('cestcantchangeeq1')

        talknumber = request.POST.get('forloop2')
        confnummast = request.POST.get('confnummast')
        confnum2 = request.POST.get('confnum')

        talknumber = int(talknumber)
        confnummast = int(confnummast)
        confnum2 = int(confnum2)

        print('th',talknumber,confnummast,confnum2)

        if request.POST.get('tittalk2'):
            print('titalk2')
            tittalk2 = request.POST.get('tittalk2')
            regtalk = RegisterConf.objects.filter(user=userr, conference=conftopass)[talknumber]
            oldroleb = regtalk.role
            oldsoclocb = regtalk.socloc

            # ArticleFormSet = formset_factory(InstForm, extra=cb)
            # build = []
            # for i in range(len(instance)):
            #    build.append({'abstract': instance[i].abstract})
            #    print('build', build)
            #    print('fff', instance[i].abstract)

            # formset = ArticleFormSet(initial=build)
            # print('ff',formset)

            inst_form = InstForm(request.POST)
            #print('nope')
            if inst_form.is_valid():
                #print('joejoe', inst_form.cleaned_data['abstract'])
                # users = User.objects.filter(username=request.user)
                # createpeop = createpeople_form.save(commit=False)
                # createpeop.conference = objects
                # #print('user', request.user)
                # createconff.user(users)

                regtalk.abstract = inst_form.cleaned_data['abstract']

                # talk.save()

            # tbbbbbbbbbbbbbbbbbbbb
            regtalk.title = request.POST.get('title')
            # regtalk.abstract = request.POST.get('abstract')
            regtalk.biography = request.POST.get('biography')
            if conftopass.hybrid:
                regtalk.facetoface = request.POST.get('facetoface')

            regtalk.role = request.POST.get('role2')
            regtalk.type = request.POST.get('part2')
            if request.POST.get('paid2') == 'true':
                regtalk.free = True
            else:
                regtalk.free = False

            regtalk.socloc = request.POST.get('loc2')

            # print('role',request.POST.get('part2'),request.POST.get('loc2'),request.POST.get('role2'),request.POST.get('title'),request.POST.get('abstract'),request.POST.get('biography'))
            if not request.POST.get('title'):
                regtalk.title = 'Attendance only'
            regtalk.save()
            # also change user role and socloc for other talks of same user
            regtalkother = RegisterConf.objects.filter(user=userr, conference=conftopass)
            for talk in regtalkother:
                talk.socloc = request.POST.get('loc2')
                talk.role = request.POST.get('role2')
                talk.save()

            # redirect(reverse('post_detail', post.slug) + '#comments')

            return HttpResponseRedirect(reverse('my_app:createconf'))
            # return HttpResponseRedirect('my_app/createconf#register')

        if request.POST.get('tittalk'):
            print('titalk1')

            #confnum2 = request.POST.get('confnum2')
            #print('confn2',confnum2)
            conftopassmast = CreateConf.objects.filter(id=confnum2)[0]
            print('conftopassmast',conftopassmast.title,conftopassmast.id,confnummast)
            if conftopassmast.masterconf:# or conftopassmast.daughterconf:

                instance = RegisterConf.objects.filter(user=userr,
                                                       conference__masterconfpass=conftopassmast.masterconfpass).order_by('conference')
                print('instan', instance, talknumber)
                print('inq', instance[talknumber])
                #recalculate talknumber
                instancenew = RegisterConf.objects.filter(user=userr,
                                                       conference=instance[talknumber].conference).order_by('conference')
                print('new',len(instancenew))
                ii=0
                for inew in instancenew:
                    if inew.title==instance[talknumber].title:
                        talknumber=ii
                    ii+=1

            joe=utils.funcvalidate(conftopass,size,userr,talknumber,cantchange)
            # if RegisterConf(conference=objects,status=1,socloc=1ou2,role=3)
            print('reg')
            if joe==1:
                print('joel')
                return HttpResponseRedirect(reverse('my_app:createconf'))

        # else:
        # can't change the master conf user details
        # print('cantttt')

    #print('!!!!!!!!!!!!!!!!!!!!')
    return render(request, 'my_app/modal.html', context)


def deletepeople(request):
    deleted = 0
    if request.method == 'POST':
        # print('deleted')
        # item_id = int(request.POST.get(email=peopleemail))
        ##print(request.POST.get('peoplefn'),request.POST.get('peopleln'),request.POST.get('peopleemail'))
        # peoplefn=request.POST.get('peoplefn')
        # peopleln=request.POST.get('peopleln')
        # peopleemail=request.POST.get('peopleemail')
        # confnum=request.POST.get('confnum')

        # conftopass = CreateConf.objects.filter(id=confnum)[0]

        # item = People.objects.get(email=peopleemail,firstname=peoplefn, lastname=peopleln,conference=conftopass)
        # item.delete()
        #print('aguadel')
        cantchange = 0
        # check if trying to change master conf user
        daugh = CreateConf.objects.filter(id=request.POST.get('confnum'), daughterconf=True)
        if daugh:  # then add master conf creator to the daughter conf with attendance only
            #print('dddrreeffdel', daugh)
            masterconfcreatorid = CreateConf.objects.filter(masterconfpass=daugh[0].masterconfpass,
                                                            masterconf=True).values_list('user', flat=True)[0]

            masterconfcreator = User.objects.filter(id=masterconfcreatorid)[0]
            #print('ghdel', masterconfcreator)
            if masterconfcreator.email.lower() == request.POST.get('email').lower():
                cantchange = 1
                #print('userr,cgdel', masterconfcreator.email, request.POST.get('email'))

        if 1 == 1:  # request.POST.get('action') == 'addpeople':
            email = request.POST.get('email')
            confnum = request.POST.get('confnum')
            idarg = request.POST.get('idarg')
            conftopass = CreateConf.objects.filter(id=confnum)[0]
            #print('em', email, confnum, conftopass, idarg)

            response_data = {}

            response_data['result'] = 'Delete people successful!'
            response_data['result2'] = 0
            response_data['email'] = email
            response_data['idarg'] = idarg
            response_data['confnum'] = conftopass.id
            # print('whyyyyyyyyyuuu',response_data,json.dumps(response_data))
            # print('whattt',conftopass)

            if cantchange == 0:
                #print('0')
                item = People.objects.get(email__iexact=email, conference=conftopass)
                item.delete()
                peop = People.objects.filter(conference=conftopass)
                if len(peop) == 1:
                    response_data['nbparl'] = ''
                else:
                    response_data['nbparl'] = 's'

                response_data['nbpar'] = str(len(peop))

            else:
                #print('1')
                response_data['result2'] = 1
                response_data['result'] = 'Cannot delete the master conference organizer!'

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

        # return render_to_response('inventory.html', {
        #   'form': form, 'inventory': inventory,
        # }, RequestContext(request))
        # customer = Customer.objects.get(id=5)
        # customer.delete()
        deleted = 1
    return HttpResponseRedirect(reverse('my_app:createconf'))


def deleteconf(request):
    deleted = 0
    if request.method == 'POST':
        # print('deleted')
        # item_id = int(request.POST.get(email=peopleemail))
        # print(request.POST.get('deleteconf'))
        confnum = request.POST.get('deleteconf')

        item = CreateConf.objects.get(id=confnum)

        if item.daughterconf:
            if item.status > 0:
                # find all daughter conferences
                alldaugh = CreateConf.objects.filter(masterconfpass=item.masterconfpass, daughterconf=True,
                                                         status__gt=0)
                #print('alldaugh', alldaugh, len(alldaugh))

                # update position and session's name
                if item.acceptconf:
                    for al in alldaugh:
                        if al.masterconfdaughterposition > item.masterconfdaughterposition:
                            al.masterconfdaughtername = utils.starwarsplanets(al.masterconfdaughterposition - 2)
                            al.masterconfdaughterposition = al.masterconfdaughterposition-1
                            al.save()

        visio = CreateVisio.objects.filter(conference__id=confnum, testroom=False)
        for vis in visio:
            if item.roomtype == "Big Marker":
                delconfinfo = utils.delconffunc(vis.idconf)  # mila
            else:
                delconfinfo = utils.delconffunczoom(vis.idconf)  # mila

            if delconfinfo is None:
                print('prob delconfinfo')
            else:
                print('delconfinfo', delconfinfo)

        with sessions.Session() as session:
            # delete the poster's chat room
            # print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
            try:
                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                    server_url='https://chat.carbonfreeconf.com',
                                    session=session)
            except:
                subject = "Nooooooooo Rocket chat what????"
                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                emailto = []
                emailto.append("quentin.kral@gmail.com")
                emailto.append("carbonfreeconf@gmail.com")

                email = EmailMessage(
                    subject,
                    message,
                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                    emailto,  # to
                    # getemails,  # bcc
                    # reply_to=replylist,
                    headers={'Message-From': 'www.carbonfreeconf.com'},
                )
                email.content_subtype = "html"

                #email.send(fail_silently=False)

            # pprint(rocket.groups_list().json())
            # pprint(rocket.groups_list_all().json())

            if item.title_extra:
                slugtitleconf = slugify(str('%s' % (item.title +' '+item.title_extra)))
                slugtitleconforg = slugify(str('%s' % ('organization of '+ item.title +' '+item.title_extra)))
                slugtitleconfcafe = slugify(str('%s' % ('Coffee break for '+ item.title +' '+item.title_extra)))

            else:
                slugtitleconf = slugify(str('%s' % (item.title)))
                slugtitleconforg = slugify(str('%s' % ('organization of ' + item.title)))
                slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + item.title)))

            #print('slug', slugtitleconf)
            #print('slugorg', slugtitleconforg)

            listgroup = rocket.groups_list_all().json()
            for i in range(len(listgroup['groups'])):
                #print('listgroup', listgroup['groups'][i]['_id'])
                if listgroup['groups'][i]['name'].startswith(slugtitleconf):
                    pprint(rocket.groups_delete(room_id=listgroup['groups'][i]['_id']).json())

            # pprint(rocket.groups_delete(group=slugtitleconf).json())
            pprint(rocket.groups_delete(group=slugtitleconforg).json())
            pprint(rocket.groups_delete(group=slugtitleconfcafe).json())

            rocket.logout()

        item.delete()

        # delete elastic search id in indices
        # Pass index and list of id that you want to delete.
        utils.delete_by_ids('conf-index', confnum)  # [str(confnum)])

        # check if a previous conf or not
        objects = CreateConf.objects.filter(user=request.user).last()
        if objects:
            idlast = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
            request.session['confid'] = idlast
        else:
            request.session['confid'] = ''

        # return render_to_response('inventory.html', {
        #   'form': form, 'inventory': inventory,
        # }, RequestContext(request))
        # customer = Customer.objects.get(id=5)
        # customer.delete()
        deleted = 1
    return HttpResponseRedirect(reverse('my_app:createconf'))


# @csrf_exempt
def set_timezone(request,dir=None,timel=None):#dans base.html from javascript
    #print('dans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezonedans timezone')
    if request.is_ajax():
        # do something
        request_data = request.POST
        # print('timezone locale',request.POST['timez'])
        tz = request.session.get('django_timezone')
        #print('jque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezone')
        #print('ajax',tz,request.POST['timez'])
        if not tz:
            #print(request.POST['timez']+'joeque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezone')
            request.session['django_timezone'] = request.POST['timez']
            timezone.activate(pytz.timezone(request.POST['timez']))
        # return HttpResponseRedirect(reverse('my_app:createconf'))

        return HttpResponse("OK")

    if request.method == 'POST':
        #print('post')
        #print('que???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezoneque???timezone')
        request.session['django_timezone'] = request.POST['timezone']
        timezone.activate(pytz.timezone(request.POST['timezone']))
        if dir:
            if timel:
                return HttpResponseRedirect(reverse('my_app:website', args=(dir, 'timeline')))
            else:
                return HttpResponseRedirect(reverse('my_app:website', args=(dir, 'program')))
        else:
            return HttpResponseRedirect(reverse('my_app:createconf'))
        # return render(request, 'my_app/createconf.html', {'timezones': pytz.common_timezones})

    else:
        # return redirect('/')

        return render(request, 'my_app/template.html', {'timezones': pytz.common_timezones})


class PostList(generic.ListView):
    queryset = Post.objects.filter(status=1).order_by('-created_on')
    template_name = 'my_app/news.html'


class PostDetail(generic.DetailView):
    model = Post
    template_name = 'my_app/post_detail.html'


class ConfList(generic.ListView):
    try:
        queryset = CreateConf.objects.filter(Q(start_date__gte=date.today()) | Q(start_date=None)).exclude(
            status=0).order_by(
            'start_date')  # (start_date>date.today()).order_by('-start_date')

    except OperationalError:
        pass  # happens when db doesn't exist yet, views.py should be
        # importable without this side effect otherwise migration doesn't want to proceed
    # queryset = CreateConf.objects.filter(Q(start_date__gte=date.today())|Q(start_date=None)).order_by('-start_date')#(start_date>date.today()).order_by('-start_date')
    ##print('query',queryset)
    template_name = 'my_app/listconf.html'


class ConfDetail(generic.DetailView):
    model = CreateConf
    template_name = 'my_app/conf_detail.html'


class ConfListPast(generic.ListView):
    try:
        queryset = CreateConf.objects.filter(Q(start_date__lt=date.today()) | Q(start_date=None)).exclude(
            status=0).order_by(
            '-start_date')  # (start_date>date.today()).order_by('-start_date')

    except OperationalError:
        pass  # happens when db doesn't exist yet, views.py should be
        # importable without this side effect otherwise migration doesn't want to proceed
    # queryset = CreateConf.objects.filter(Q(start_date__gte=date.today())|Q(start_date=None)).order_by('-start_date')#(start_date>date.today()).order_by('-start_date')
    ##print('query',queryset)
    template_name = 'my_app/listconfpast.html'


class ConfDetailPast(generic.DetailView):
    model = CreateConf
    template_name = 'my_app/conf_detail_past.html'

    def get(self, request, *args, **kwargs):
        try:
            self.object = self.get_object()
        except Http404:
            # return custom template
            return render(request, 'my_app/conf_detail_past.html', status=404)
        context = self.get_context_data(object=self.object)
        return self.render_to_response(context)

def searcharchivepastconf(request):
    # queryset = Visio.objects.all()
    queryseto = CreateConf.objects.filter(Q(start_date__lt=date.today()) | Q(start_date=None)).exclude(
        status=0).order_by(
        '-start_date')

    query = request.GET.get('q')
    context = {
        'qs': query,
        'search': True
    }
    #print('qs', query, queryseto)

    if query:
        #print('f')
        queryset = queryseto.filter(
            Q(title__icontains=query) |
            Q(abstract__icontains=query)
        ).distinct()
        #print('z')

        context.update({'object_list': queryset})

    return render(request, 'my_app/listconfpast.html', context)


def searcharchiveconf(request):
    # queryset = Visio.objects.all()
    queryseto = CreateConf.objects.filter(Q(start_date__gte=date.today()) | Q(start_date=None)).exclude(
        status=0).order_by(
        '-start_date')

    query = request.GET.get('q')
    context = {
        'qs': query,
        'search': True
    }
    #print('qs', query, queryseto)

    if query:
        #print('f')
        queryset = queryseto.filter(
            Q(title__icontains=query) |
            Q(abstract__icontains=query)
        ).distinct()
        #print('z')

        context.update({'object_list': queryset})

    return render(request, 'my_app/listconf.html', context)


def minesweeper(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/demineur.html', stuff_for_frontend)

def pacman(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/pacman.html', stuff_for_frontend)

def simon(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/simon.html', stuff_for_frontend)


def conv(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/guide.html', stuff_for_frontend)


@confirm_password
def guide(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/guide.html', stuff_for_frontend)


# @csrf_exempt
def signaturezoom(request):  # ,role=role,meetingnum=meetingnum):

    # headers = {'authorization': 'Bearer %s' % utils.generateToken(),
    #           'content-type': 'application/json'}

    # r = requests.get('https://api.zoom.us/v2/users/', headers=headers)

    # print('fdsfdsf',r.text)

    # conn = http.client.HTTPSConnection("api.zoom.us")

    # conn.request("GET", "/v2/users?page_size=30&status=active", headers=headers)

    # res = conn.getresponse()
    # data = res.read()

    # print('sd'+data.decode("utf-8"))

    # for meetings
    # payload = "{\"topic\":\"string\",\"type\":\"integer\",\"start_time\":\"string [date-time]\",\"duration\":\"integer\",\"schedule_for\":\"string\",\"timezone\":\"string\",\"password\":\"string\",\"agenda\":\"string\",\"settings\":{\"host_video\":\"boolean\",\"participant_video\":\"boolean\":\"join_before_host\":\"boolean\"
    # payload = "{\"topic\":\"Test Meeting\",\"type\":2,\"start_time\":\"2020-12-07T11:00:00Z\",\"duration\":\"600\",\"timezone\":\"Europe/London\",\"password\":\"avfhfghjk\",\"agenda\":\"Test Meeting\",\"settings\":{\"host_video\":\"true\",\"participant_video\":\"true\",\"hd_video\":\"true\",\"waiting_room\":\"false\",\"join_before_host\":\"true\",\"mute_upon_entry\":\"true\",\"watermark\":\"false\",\"use_pmi\":\"false\",\"approval_type\":\"2\",\"audio\":\"both\",\"auto_recording\":\"local\",\"auto_recording\":\"none\",\"meeting_authentification\":\"false\",\"registrants_email_notification\":\"false\"}}"

    ##conn.request("POST", "/v2/users/admin@carbonfreeconf.com/meetings", payload, headers)

    # for webinars
    # payload = "{\"topic\":\"Test Webinar\",\"type\":5,\"start_time\":\"2020-12-06T15:25:00Z\",\"duration\":\"600\",\"timezone\":\"Europe/London\",\"password\":\"avfhfgh\",\"agenda\":\"Test Webinar\",\"settings\":{\"host_video\":\"true\",\"panelists_video\":\"true\",\"practice_session\":\"true\",\"hd_video\":\"true\",\"approval_type\":2,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":\"false\",\"close_registration\":\"true\",\"show_share_button\":\"true\",\"allow_multiple_devices\":\"false\",\"registrants_email_notification\":\"false\"}}"
    # conn.request("POST", "/v2/users/admin@carbonfreeconf.com/webinars", payload, headers)

    ##res = conn.getresponse()
    ##data = res.read()

    ##print(data.decode("utf-8"))

    if request.method == 'POST':
        data = json.loads(request.body.decode("utf-8"))
        tag = data['meetingData']['meetingNumber']
        role = data['meetingData']['role']

        print('role',role)
        #print(tag)

        # meetingData = request.POST.get('body')
        # print('meet',body)
        # print('mee2t',body.meetingData)

        data = {'apiKey': "dlDAD3ZyRUiT8zM3uxPU3g",
                'apiSecret': "kc74rP8JQEcurDTKTuFEu9TMFNsRYXFcVNXZ",
                'meetingNumber': tag,
                'role': role}

        sign = utils.generateSignature(data)
        print('gen', sign)

        return (JsonResponse({'sign': sign}))  # 0#sign


@confirm_password
def testzoom(request):
    stuff_for_frontend = {
        'pricing': 1,
    }

    return render(request, 'my_app/testzoom.html', stuff_for_frontend)


@confirm_password
def testzoombis(request):
    stuff_for_frontend = {
        'pricing': 1,
    }

    return render(request, 'my_app/testzoombis.html', stuff_for_frontend)


@confirm_password
def zoomroom(request, confnum=None, idconf=None, indiv=None, exit=None):
    stuff_for_frontend = {}
    cur_language = get_language()

    #print('idconf+lang',idconf)
    print('lang',cur_language)
    stuff_for_frontend.update(
            {
                'langua': cur_language,
             })
    if confnum and idconf:
        print('confnum',confnum,indiv)
        conftopass = CreateConf.objects.filter(id=confnum)[0]
        recordornot = CreateConf.objects.filter(id=confnum).values_list('recording', flat=True)[0]

        if conftopass.activateqandp:
            qa='1'
        else:
            qa='0'
            
        stuff_for_frontend.update(
            {
                'qandaact': qa,
             })
        
        if indiv == 1:#individual room
            conn = http.client.HTTPSConnection("api.zoom.us")

            headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                       'content-type': 'application/json'}

            conn.request("GET", "/v2/meetings/" + str(idconf), headers=headers)

            res = conn.getresponse()
            dataz = res.read()
            print('res indiv', res.status)
            print(dataz.decode("utf-8"))

            if res.status == 200:
                passzoom = json.loads(dataz)['password']
            else:
                #print('problem ici ff')
                stuff_for_frontend.update({'problem': 1})

        else:
            if indiv==2:#coffee break room
                print('okcoffee')
                visio = CreateVisio.objects.filter(conference__id=confnum, idconfcb=idconf)[0]
                passzoom = visio.passzoomcb
            else:
                visio = CreateVisio.objects.filter(conference__id=confnum, idconf=idconf)[0]
                passzoom = visio.passzoom

        role = 0
        notalright = 0

        #piradon
        if RegisterConf.objects.filter(conference__id=confnum, user=request.user, status=1).exists():
            talk = RegisterConf.objects.filter(conference__id=confnum, user=request.user, status=1)
            for ta in talk:
                print('ta',ta.title,ta.role)
                if ta.role == 1 or ta.role == 3:
                    role = 1

            print('rolez',role)

            stuff_for_frontend.update(
                {'meetingnumber': idconf, 'userName': request.user.first_name + ' ' + request.user.last_name,
                 'userEmail': request.user.email, 'password': passzoom, 'role': role,
                 'exit': "https://www.carbonfreeconf.com/" + exit, 'APIKEYZOOM': settings.APIKEYZOOM,
                 'recordornot': recordornot})

        elif conftopass.masterconf or conftopass.daughterconf:
            parsest = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,
                                                masterconf=True).values_list('parsession', flat=True)[0]

            if parsest:
                querysetexist = RegisterConf.objects.filter(conference__masterconfpass=conftopass.masterconfpass,
                                                            user=request.user,
                                                            status=1)
            else:
                querysetexist = RegisterConf.objects.filter(conference__id=confnum, user=request.user,
                                                            status=1)  # tbb
            if querysetexist:
                stuff_for_frontend.update(
                    {'meetingnumber': idconf, 'userName': request.user.first_name + ' ' + request.user.last_name,
                     'userEmail': request.user.email, 'password': passzoom, 'role': role,
                     'exit': "https://www.carbonfreeconf.com/" + exit, 'APIKEYZOOM': settings.APIKEYZOOM,
                     'recordornot': recordornot})
            else:
                if request.user.is_superuser:
                    role = 1
                    stuff_for_frontend.update({'meetingnumber': idconf,
                                               'userName': request.user.first_name + ' ' + request.user.last_name,
                                               'userEmail': request.user.email,
                                               'password': passzoom,
                                               'role': role,
                                               'exit': "https://www.carbonfreeconf.com/" + exit,
                                               'APIKEYZOOM': settings.APIKEYZOOM, 'recordornot': recordornot})
                else:
                    print('ppppppppp')
                    stuff_for_frontend.update({'problem': 1})


        elif conftopass.priv == "Public" and conftopass.privpass != '':

            stuff_for_frontend.update({'meetingnumber': idconf,
                                       'userName': request.user.first_name + ' ' + request.user.last_name,
                                       'userEmail': request.user.email,
                                       'password': passzoom,
                                       'role': role,
                                       'exit': "https://www.carbonfreeconf.com/" + exit,
                                       'APIKEYZOOM': settings.APIKEYZOOM, 'recordornot': recordornot})

        elif request.user.is_superuser:

            role=1
            stuff_for_frontend.update({'meetingnumber': idconf,
                                   'userName': request.user.first_name + ' ' + request.user.last_name,
                                   'userEmail': request.user.email,
                                   'password': passzoom,
                                   'role': role,
                                   'exit': "https://www.carbonfreeconf.com/" + exit,
                                   'APIKEYZOOM': settings.APIKEYZOOM, 'recordornot': recordornot})

        else:
            notalright=1
            stuff_for_frontend.update({'problem': 1})

        if notalright == 0:
            request.session['joinconftuto'] = True


        # to end a meeting
        if 1 == 0:
            payload = "{\"action\":\"end\"}"

            headers = {'authorization': 'Bearer %s' % utils.generateToken(),
                       'content-type': 'application/json'}

            conn = http.client.HTTPSConnection("api.zoom.us")

            conn.request("PUT", "/v2/meetings/" + idconf + "/status", payload, headers)

            res = conn.getresponse()
            data = res.read()

            #print('finish meeting', data.decode("utf-8"))

    else:
        stuff_for_frontend.update({'problem': 1})

    return render(request, 'my_app/zoomroom.html', stuff_for_frontend)



def calculator(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    if request.method == 'POST':

        duration = request.POST.get('duration')
        para = request.POST.get('para')
        size = request.POST.get('size')
        rec = json.loads(request.POST.get('rec'))
        you = json.loads(request.POST.get('you'))
        #who = request.POST.get('who')
        only = json.loads(request.POST.get('only'))
        all = json.loads(request.POST.get('all'))

        #print('who',only,all)

        proc = json.loads(request.POST.get('proc'))

        if only == True:
            who = "Only conference participants"
        else:
            who = "Everyone"

        #print('rnkdfberkfbrekl', duration, size, rec, you, who, proc)

        prep = []
        off = []
        offseto = 0.
        format = 0  # '13.37'.replace(".","").isnumeric()
        if duration and size:
            if duration.replace(".", "").replace("-", "").isnumeric() and size.replace(".", "").replace("-",
                                                                                                        "").isnumeric():
                if float(duration) > 0 and float(size) > 0:
                    prepo, offseto = utils.pricebis(duration=float(duration), size=float(size), rec=rec, youtube=you,
                                                    who=who, proc=proc)
                    #print('pppp', prepo, offseto)
                else:
                    format = 2
            else:
                format = 1

        response_data = {}
        response_data['nada'] = 0

        if format != 0:
            response_data['format'] = format
        else:
            if offseto > 0:
                if para:
                    if para.isnumeric():
                        if float(para)>1:
                            response_data['offsetcost'] = round(float(offseto)*float(1.5), 2)
                            offs=float(offseto)*float(1.5)
                        else:
                            response_data['offsetcost'] = round(float(offseto), 2)
                            offs = float(offseto)
                    else:
                        response_data['offsetcost'] = round(float(offseto), 2)
                        offs=float(offseto)

                else:
                    response_data['offsetcost'] = round(float(offseto), 2)
                    offs = float(offseto)

                returnflight = 1100  # kg from paris to new york
                caronekm = 0.33  # kg for one km
                if offs > returnflight:
                    response_data['flight'] = 'This is equivalent to ' + str(
                        round(offs / returnflight, 1)) + ' Paris/New-york return flights.'
                else:
                    response_data['flight'] = 'This is equivalent to a ' + str(
                        round(offs / caronekm, 1)) + ' km ride by car.'
                response_data['perperson'] = round(offs / float(size), 2)
                # response_data['result'] = 'You reached the maximum number of participants you set up initially, go for a bigger size if needed.'
                # response_data['result2'] = 1
                # response_data['talknumber'] = talknumber

            else:
                response_data['nada'] = 1

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return render(request, 'my_app/calculator.html', stuff_for_frontend)


def loadoldqaa(request):
    stuff_for_frontend = {}
    if request.method == 'POST':

        confnum = request.POST.get('confnum')
        #para = request.POST.get('para')
        #print('r',confnum)
        response_data={}
        conftopass=CreateConf.objects.filter(id=confnum)[0]
        start_time = datetime.combine(conftopass.start_date, datetime.min.time())
        #print('s',start_time)

        p = []
        pusers = []
        pcreated = []
        qusers = []
        qcreated = []
        purl=[]
        qp_choices = []
        qp_choices_len = []
        qp_votetot = []
        qp_votetotal = []
        qp_voteper = []
        qp_max = []

        if CreatePoll.objects.filter(conference_id=confnum,removed=True, activedonce=True,updated__gte=start_time).exists():
        #if CreatePoll.objects.filter(conference_id=confnum, activedonce=True, removed=True).exists():
            polls = True
            p = CreatePoll.objects.filter(conference_id=confnum,removed=True, activedonce=True,updated__gte=start_time).order_by('created')
            #p = CreatePoll.objects.filter(conference_id=confnum, activedonce=True, removed=True).order_by('created')
            for po in p:
                if po.anonymous:
                    pusers.append("Anonymous")
                else:
                    pusers.append(po.user.first_name + ' ' + po.user.last_name)
                if po.pollimage:
                    purl.append(po.pollimage.url)
                else:
                    purl.append("")

                pcreated.append(po.created.strftime("%A %d %b %Y at %I:%M %p"))
                # print('i',po.question)
                choices = ChoicePoll.objects.filter(poll=po).order_by('created')
                choice = []
                idch = []
                voteschoices = []
                sumvotes = 0
                for ch in choices:
                    choice.append(ch.choice_text)
                    idch.append(int(ch.id))
                    voteschoices.append(ch.votes.count())
                    sumvotes += ch.votes.count()

                # qp_idq.append(idch)

                qp_choices.append(choice)
                qp_choices_len.append(len(choice))
                qp_votetot.append(voteschoices)
                qp_votetotal.append(sumvotes)

                voteschoicesper = [0.] * len(voteschoices)
                for i in range(len(voteschoices)):
                    if sumvotes != 0.:
                        voteschoicesper[i] = round(voteschoices[i] / sumvotes * 100, 2)

                qp_voteper.append(voteschoicesper)
                m = max(voteschoices)
                maxi = [ig for ig, jg in enumerate(voteschoices) if jg == m]
                # print('m',m,maxi)
                qpmaxper = ['0'] * len(voteschoices)
                for i in range(len(voteschoices)):
                    if i in maxi:
                        qpmaxper[i] = '1'
                    else:
                        qpmaxper[i] = '0'

                qp_max.append(qpmaxper)

        else:
            # no polls
            polls = False

        q = []
        voteq = []
        if CreateQuestion.objects.filter(conference_id=confnum,active=False,updated__gte=start_time).exists():
        #if CreateQuestion.objects.filter(conference_id=confnum, active=False).exists():
            questions = True
            q = CreateQuestion.objects.filter(conference_id=confnum,active=False,updated__gte=start_time).order_by('created')
            #q = CreateQuestion.objects.filter(conference_id=confnum,active=False).order_by('created')
            for qu in q:
                if qu.anonymous:
                    qusers.append("Anonymous")
                else:
                    qusers.append(qu.user.first_name + ' ' + qu.user.last_name)
                print('qu',qu)

                qcreated.append(qu.created.strftime("%A %d %b %Y at %I:%M %p"))
                voteq.append(qu.votes.count())
                # print('i',qu.question)
        else:
            # no polls
            questions = False

        pl=p
        if pl:
            pl=list(p.values('question', 'anonymous'))

        ql=q
        if ql:
            ql=list(q.values('question', 'anonymous'))

        response_data['p'] = pl
        response_data['polls'] = polls
        response_data['pusers'] = pusers
        response_data['pcreated'] = pcreated
        response_data['purl'] = purl
        response_data['qp_choices'] = qp_choices
        response_data['qp_choices_len'] = qp_choices_len
        response_data['qp_votetot'] = qp_votetot
        response_data['qp_votetotal'] = qp_votetotal
        response_data['qp_voteper'] = qp_voteper
        response_data['qp_max'] = qp_max
        response_data['q'] = ql
        response_data['qusers'] = qusers
        response_data['qcreated'] = qcreated
        response_data['voteq'] = voteq
        response_data['questions'] = questions

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return render(request, 'my_app/joinconf.html', stuff_for_frontend)

def seehow(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/seehow.html', stuff_for_frontend)


def team(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/team.html', stuff_for_frontend)


def coronavirus(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/coronavirus.html', stuff_for_frontend)


def supportus(request):
    stuff_for_frontend = {
        'pricing': 1
    }
    if request.method == 'POST':
        ticked = request.POST.get('ticked')
        confnum = request.POST.get('confnum')

        #print('ticked', ticked)
        if ticked == '1':
            #print('ici')
            prepeuro1, offseteuro1 = utils.price(confnum, help=1)
        else:
            prepeuro1, offseteuro1 = utils.price(confnum)

        total = prepeuro1 + offseteuro1
        response_data = {}

        convoff = str(offseteuro1)
        convprep = str(prepeuro1)
        convtota = str(total)

        amountoff = convoff.split('.')[0] + '.' + convoff.split('.')[1][0:2]
        if convprep == '0':
            amountprep = '0.00'
        else:
            amountprep = convprep.split('.')[0] + '.' + convprep.split('.')[1][0:2]

        amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

        # 'prepeuro': prepeuro, 'offseteuro': offseteuro, 'total': prepeuro + offseteuro
        response_data['good'] = True

        response_data['off'] = amountoff
        response_data['prep'] = amountprep
        response_data['tota'] = amounttota
        response_data['currency'] = 'EUR'
        response_data['unit'] = ' €'#mathilde
        #response_data['couponused'] = 'EUR'

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:checkout'))

def changecurrencycrea(request):
    stuff_for_frontend = {
        'pricing': 1
    }
    print('in changecurrency')

    if request.method == 'POST':
        currency = request.POST.get('currency')

        tota=settings.COST_PER_PARTICIPANT#20
        unitt = 'EUR'

        print('currency',currency)

        response_data = {}
        '''
        if oldcurr == '$':
            unitt = 'USD'
        elif oldcurr == '£':
            unitt = 'GBP'
        else:
            unitt = 'EUR'
        '''
        if currency == '':
            currency = 'EUR'
        if currency == 'Euros':
            currency='EUR'
        if currency == 'US Dollars':
            currency='USD'
        if currency == 'GB Pounds':
            currency='GBP'

        if currency:
            #print('re1',off,unitt)
            response_data['good'] = True
            response_data['currency'] = currency

            # request.session['currency'] = currency

            # OpenExchangeRatesBackend().update_rates()
            # rate = get_rate(currency, 'EUR', backend=OpenExchangeRatesBackend.name)
            #convoff = convert_money(Money(off, unitt), currency)
            #convprep = convert_money(Money(prep, unitt), currency)
            convtota = convert_money(Money(tota, unitt), currency)
            #convtota = convert_money(Money(tota, unitt), 'EUR')

            #print('re2',convoff.amount)

            # print('rate',rate,convoff.amount)

            #convoff = str(convoff.amount)
            #convprep = str(convprep.amount)
            convtota = str(convtota.amount)

            #print('re3',convoff,convprep,convtota)

            #print('mila', convprep, convoff.split('.')[0], convoff.split('.')[1])
            #amountoff = convoff.split('.')[0] + '.' + convoff.split('.')[1][0:2]
            #print('re3b',amountoff)


            if len(convtota.split('.')) < 2:
                amounttota = convtota.split('.')[0] + '.0'
                print('r', amounttota)
            else:
                amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            #amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            #print('re4',amountprep,amountoff,amounttota)

            if currency == 'USD':
                unit = '$'
            elif currency == 'GBP':
                unit = '£'
            else:
                unit = ' €'

            #print('dfs', amountprep)

            response_data['unit'] = unit


            #response_data['off'] = amountoff
            #response_data['prep'] = amountprep
            response_data['tota'] = amounttota
            #print('re4')

        else:
            response_data['good'] = False
            #print('re5')#pass re en prod et test ou ca buggue

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:checkout_website'))


def changecurrency(request):
    stuff_for_frontend = {
        'pricing': 1
    }
    if request.method == 'POST':
        currency = request.POST.get('currency')
        off = request.POST.get('off')
        prep = request.POST.get('prep')
        prepinit = request.POST.get('prepinit')
        tota = request.POST.get('tota')
        oldcurra = request.POST.get('oldcurra')
        oldcurrb = request.POST.get('oldcurrb')
        coupon = request.POST.get('coupon')
        couponused = request.POST.get('couponused')

        #print('couponused',couponused,coupon)
        #print('currency',currency)
        #print('off,prep',off,prep)
        #print('prepinit',prepinit)
        #print('tota',tota)
        #print('oldcurra',oldcurra)
        #print('oldcurrb',oldcurrb)

        if oldcurra:
            oldcurr = oldcurra
        else:
            oldcurr = oldcurrb

        #print('cu', currency, coupon, off, prep, tota)
        response_data = {}

        if oldcurr == '$':
            unitt = 'USD'
        elif oldcurr == '£':
            unitt = 'GBP'
        else:
            unitt = 'EUR'

        if currency == '':
            currency = 'EUR'


        if currency:
            #print('re1',off,unitt)
            response_data['good'] = True
            response_data['currency'] = currency

            # request.session['currency'] = currency

            # OpenExchangeRatesBackend().update_rates()
            # rate = get_rate(currency, 'EUR', backend=OpenExchangeRatesBackend.name)
            convoff = convert_money(Money(off, unitt), currency)
            convprep = convert_money(Money(prep, unitt), currency)
            convtota = convert_money(Money(tota, unitt), currency)

            #print('re2',convoff.amount)

            # print('rate',rate,convoff.amount)

            convoff = str(convoff.amount)
            convprep = str(convprep.amount)
            convtota = str(convtota.amount)

            #print('re3',convoff,convprep,convtota)

            #print('mila', convprep, convoff.split('.')[0], convoff.split('.')[1])
            amountoff = convoff.split('.')[0] + '.' + convoff.split('.')[1][0:2]
            #print('re3b',amountoff)
            if prep == '0.00' or prep == '0.0':
                #print('re3c', prep)
                amountprep = '0.00'
            else:
                #print('re3d', amountoff)
                amountprep = convprep.split('.')[0] + '.' + convprep.split('.')[1][0:2]
                #print('re3e', amountprep)

            #print('re3f', amountoff)
            amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            #print('re4',amountprep,amountoff,amounttota)

            if currency == 'USD':
                unit = '$'
            elif currency == 'GBP':
                unit = '£'
            else:
                unit = ' €'

            #print('dfs', amountprep)

            discountprep = 0.
            response_data['unit'] = unit
            response_data['couponused'] = couponused

            if coupon:
                #check if coupon already applied first
                if couponused=='0':
                    #print('coupon', coupon)
                    user = User.objects.get(username=request.user.username)
                    status = validate_coupon(coupon_code=coupon, user=user)
                    print('status',status,user)
                    if status['valid']:
                        response_data['coupon'] = True
                        getcoupon = Coupon.objects.get(code=coupon)
                        # getcoupon.use_coupon(user=request.user)
                        print('amountprep,prepinit',amountprep,prepinit)
                        discountprep = getcoupon.get_discounted_value(initial_value=float(amountprep))
                        # discount = getcoupon.get_discount()  # Example: {'value': 50, 'is_percentage': True}
                        # print('cc',discount,discount_value)

                        amountprep = str(discountprep)
                        amounttota = str(discountprep + float(amountoff))
                        amountprep = amountprep.split('.')[0] + '.' + amountprep.split('.')[1][0:2]
                        amounttota = amounttota.split('.')[0] + '.' + amounttota.split('.')[1][0:2]
                        response_data['couponused2'] = 1
                else:
                    response_data['couponused2'] = 1
                    response_data['coupon'] = True

            response_data['off'] = amountoff
            response_data['prep'] = amountprep
            response_data['tota'] = amounttota
            #print('re4')

        else:
            response_data['good'] = False
            #print('re5')#pass re en prod et test ou ca buggue

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:checkout'))


def changecurrencyweb(request):
    stuff_for_frontend = {
        'pricing': 1
    }
    if request.method == 'POST':
        currency = request.POST.get('currency')
        off = request.POST.get('off')
        prep = request.POST.get('prep')
        prepinit = request.POST.get('prepinit')
        tota = request.POST.get('tota')
        oldcurra = request.POST.get('oldcurra')
        oldcurrb = request.POST.get('oldcurrb')
        coupon = request.POST.get('coupon')
        couponused = request.POST.get('couponused')

        #print('couponused',couponused,coupon)
        #print('currency',currency)
        #print('off,prep',off,prep)
        #print('prepinit',prepinit)
        #print('tota',tota)
        print('oldcurra',oldcurra)
        print('oldcurrb',oldcurrb)
        print('prep',prep)
        print('cc',currency)

        if oldcurra.strip() != '':
            oldcurr = oldcurra.strip()
            print('aie')
        else:
            oldcurr = oldcurrb.strip()


        #print('cu', currency, coupon, off, prep, tota)
        response_data = {}

        if oldcurr == '$':
            unitt = 'USD'
        elif oldcurr == '£':
            unitt = 'GBP'
        else:
            unitt = 'EUR'

        if currency == '':
            currency = unitt#'EUR'

        print('un',unitt)
        print('oldcurr',oldcurr)

        if currency:
            #print('re1',off,unitt)
            response_data['good'] = True
            response_data['currency'] = currency

            # request.session['currency'] = currency

            # OpenExchangeRatesBackend().update_rates()
            # rate = get_rate(currency, 'EUR', backend=OpenExchangeRatesBackend.name)
            #convoff = convert_money(Money(off, unitt), currency)
            convprep = convert_money(Money(prep, unitt), currency)
            convtota = convert_money(Money(tota, unitt), currency)

            #print('re2',convoff.amount)

            # print('rate',rate,convoff.amount)

            #convoff = str(convoff.amount)
            convprep = str(convprep.amount)
            convtota = str(convtota.amount)

            #print('re3',convoff,convprep,convtota)

            #print('mila', convprep, convoff.split('.')[0], convoff.split('.')[1])
            #amountoff = convoff.split('.')[0] + '.' + convoff.split('.')[1][0:2]
            #print('re3b',amountoff)
            if prep == '0.00' or prep == '0.0':
                #print('re3c', prep)
                amountprep = '0.00'
            else:
                print('re3d', convprep.split('.'),len(convprep.split('.')))
                if len(convprep.split('.')) < 2:
                    amountprep = convprep.split('.')[0] + '.0'
                    print('r',amountprep)
                else:
                    amountprep = convprep.split('.')[0] + '.' + convprep.split('.')[1][0:2]
                    #print('re3e', amountprep)

            #print('re3f', amountoff)
            if tota == '0.00' or tota == '0.0':
                #print('re3c', prep)
                amounttota = '0.00'
            else:
                if len(convtota.split('.')) < 2:
                    amounttota = convtota.split('.')[0] + '.0'
                    print('r', amounttota)
                else:
                    amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            #amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            #print('re4',amountprep,amountoff,amounttota)

            if currency == 'USD':
                unit = '$'
            elif currency == 'GBP':
                unit = '£'
            else:
                unit = ' €'

            #print('dfs', amountprep)

            discountprep = 0.
            response_data['unit'] = unit
            response_data['couponused'] = couponused

            if coupon:
                #check if coupon already applied first
                if couponused=='0':
                    #print('coupon', coupon)
                    user = User.objects.get(username=request.user.username)
                    status = validate_coupon(coupon_code=coupon, user=user)
                    print('status',status,user)
                    if status['valid']:
                        response_data['coupon'] = True
                        getcoupon = Coupon.objects.get(code=coupon)
                        # getcoupon.use_coupon(user=request.user)
                        print('amountprep,prepinit',amountprep,prepinit)
                        discountprep = getcoupon.get_discounted_value(initial_value=float(amountprep))
                        # discount = getcoupon.get_discount()  # Example: {'value': 50, 'is_percentage': True}
                        # print('cc',discount,discount_value)

                        amountprep = str(discountprep)
                        amounttota = str(discountprep)# + float(amountoff))
                        amountprep = amountprep.split('.')[0] + '.' + amountprep.split('.')[1][0:2]
                        amounttota = amounttota.split('.')[0] + '.' + amounttota.split('.')[1][0:2]
                        response_data['couponused2'] = 1
                else:
                    response_data['couponused2'] = 1
                    response_data['coupon'] = True

            #response_data['off'] = amountoff
            response_data['prep'] = amountprep
            response_data['tota'] = amounttota
            #print('re4')

        else:
            response_data['good'] = False
            #print('re5')#pass re en prod et test ou ca buggue

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:checkout_website'))

def changecurrencywebb(request):
    stuff_for_frontend = {
        'pricing': 1
    }
    if request.method == 'POST':
        currency = request.POST.get('currency')
        prep = request.POST.get('prep')
        tota = request.POST.get('tota')
        coupon = request.POST.get('coupon')

        #print('cu', currency, coupon)
        response_data = {}

        if currency == '':
            currency = 'EUR'

        if currency:
            response_data['good'] = True
            response_data['currency'] = currency

            # request.session['currency'] = currency

            # OpenExchangeRatesBackend().update_rates()
            # rate = get_rate(currency, 'EUR', backend=OpenExchangeRatesBackend.name)
            convprep = convert_money(Money(prep, 'EUR'), currency)
            convtota = convert_money(Money(tota, 'EUR'), currency)

            # print('rate',rate,convoff.amount)

            convprep = str(convprep.amount)
            convtota = str(convtota.amount)

            # print('mila', convoff.split('.')[0], convoff.split('.')[1])
            print('convprep',convprep)

            amountprep = convprep.split('.')[0] + '.' + convprep.split('.')[1][0:2]
            amounttota = convtota.split('.')[0] + '.' + convtota.split('.')[1][0:2]

            if currency == 'USD':
                unit = '$'
            elif currency == 'GBP':
                unit = '£'
            else:
                unit = ' €'

            #print('dfs', amountprep)

            discountprep = 0.
            response_data['unit'] = unit
            if coupon:
                #print('coupon', coupon)
                user = User.objects.get(username=request.user.username)
                status = validate_coupon(coupon_code=coupon, user=user)
                if status['valid']:
                    response_data['coupon'] = True
                    getcoupon = Coupon.objects.get(code=coupon)
                    # getcoupon.use_coupon(user=request.user)
                    discountprep = getcoupon.get_discounted_value(initial_value=float(amountprep))
                    # discount = getcoupon.get_discount()  # Example: {'value': 50, 'is_percentage': True}
                    # print('cc',discount,discount_value)

                    amountprep = str(discountprep)
                    amounttota = str(discountprep)
                    amountprep = amountprep.split('.')[0] + '.' + amountprep.split('.')[1][0:2]
                    amounttota = amounttota.split('.')[0] + '.' + amounttota.split('.')[1][0:2]

            response_data['prep'] = amountprep
            response_data['tota'] = amounttota

        else:
            response_data['good'] = False

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:checkout_website'))


def whatdo(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/whatdo.html', stuff_for_frontend)

@xframe_options_exempt
def exitpage(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpage.html', stuff_for_frontend)

@xframe_options_exempt
def exitpageprerec(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpageprerec.html', stuff_for_frontend)

@xframe_options_exempt
def exitpageparticipants(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpageparticipants.html', stuff_for_frontend)

@xframe_options_exempt
def exitpageparticipantsprerec(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpageparticipantsprerec.html', stuff_for_frontend)

@xframe_options_exempt
def exitpageparticipantstest(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpageparticipantstest.html', stuff_for_frontend)

@xframe_options_exempt
def exitpagetest(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exitpagetest.html', stuff_for_frontend)


def tutorial(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/tutorial.html', stuff_for_frontend)


def faq(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/faq.html', stuff_for_frontend)


def legalnotice(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/legalnotice.html', stuff_for_frontend)


def contactform(request):
    stuff_for_frontend = {}
    if request.method == 'GET':
        form = ContactForm()
        ucl=utils.conf_list_user(request)
        stuff_for_frontend.update({
                'conf_list_user': ucl
            })
        stuff_for_frontend.update({
            'contactform': form
        })
    else:
        form = ContactForm(request.POST)
        #print('ok')
        if form.is_valid():
            subjecte = form.cleaned_data['subjecte']
            from_email = form.cleaned_data['from_email']
            message = form.cleaned_data['message']
            domain = from_email.split("@")[1]
            # print('domain',domain)
            notloading = 0
            try:
                responseapi = requests.get('https://block-temporary-email.com/check/domain/' + domain, headers={"x-api-key":settings.BLOCK_TEMPORARY_EMAIL})
                # print(responseapi.status_code)
                if responseapi.status_code == 403:
                    notloading = 1
            except:
                notloading=1

            #print('what')

            if notloading==0:
                if responseapi.status_code == 200:
                    #print('here')
                    info = json.loads(responseapi.content.decode('utf-8'))
                    # print('info',info, info['temporary'], info['dns'])

                    if (info['temporary'] == False) and (info['dns'] == True):
                        print('reg test good')
                    else:
                        #print('not good')
                        messages.error(request,
                                       "Oops, the email address you provided is not right.", extra_tags='err')
                        return HttpResponseRedirect(reverse('my_app:contactform'))


                else:
                    #print('there')
                    messages.error(request,
                                   "Oops, we have a problem when processing your email address.", extra_tags='err')

            try:
                emailcon = EmailMessage(
                    subjecte,
                    message,
                    from_email,  # from
                    ["carbonfreeconf@gmail.com"],  # to
                    # getemails,  # bcc
                    # reply_to=replylist,
                    headers={'Message-From': 'www.carbonfreeconf.com'},
                )
                emailcon.send(fail_silently=False)

                messages.success(request,
                                 "Great! Your email was successfully sent.", extra_tags='suc')

            except BadHeaderError:
                messages.error(request,
                               "Invalid header found.", extra_tags='err')
                return HttpResponseRedirect(reverse('my_app:contactform'))

            form = ContactForm()
            stuff_for_frontend.update({
                'contactform': form
            })
        else:
            messages.error(request,
                           "Oopsie, retry the math problem one more time.", extra_tags='err')
            form = ContactForm()
            stuff_for_frontend.update({
                'contactform': form
            })

        ucl=utils.conf_list_user(request)
        stuff_for_frontend.update({
                'conf_list_user': ucl
            })

    return render(request, 'my_app/contactform.html', stuff_for_frontend)


def demo(request):
    stuff_for_frontend = {}
    if request.method == 'GET':
        cur_language = get_language()
        print('lang',cur_language)
        if cur_language == 'fr':
            form = DemoForm(initial={'message': "Dites nous en plus à propos de votre projet ainsi que la date et l'heure qui vous conviendrez le mieux pour la démo."})
        else:
            form = DemoForm(initial={'message': 'Here, tell us more about you and your project as well as the date and time that would best suit you for the live demo.'})

        stuff_for_frontend.update({
            'demoform': form
        })
    else:
        form = DemoForm(request.POST)
        #print('ok')
        if form.is_valid():

            fname = form.cleaned_data['fname']
            lname = form.cleaned_data['lname']
            from_email = form.cleaned_data['from_email']
            company = form.cleaned_data['company']
            phone = form.cleaned_data['phone']
            message = form.cleaned_data['message']
            domain = from_email.split("@")[1]
            # print('domain',domain)
            notloading = 0
            try:
                responseapi = requests.get('https://block-temporary-email.com/check/domain/' + domain, headers={"x-api-key":settings.BLOCK_TEMPORARY_EMAIL})
                # print(responseapi.status_code)
                if responseapi.status_code == 403:
                    notloading = 1
            except:
                notloading = 1

            #print('what')

            if notloading == 0:
                if responseapi.status_code == 200:
                    #print('here')
                    info = json.loads(responseapi.content.decode('utf-8'))
                    # print('info',info, info['temporary'], info['dns'])

                    if (info['temporary'] == False) and (info['dns'] == True):
                        print('reg test good')
                    else:
                        #print('not good')
                        messages.error(request,
                                       "Oh no, the email address you provided is not right.", extra_tags='err')
                        return HttpResponseRedirect(reverse('my_app:demo'))


                else:
                    #print('there')
                    messages.error(request,
                                   "Oopsie, we have a problem when processing your email address.", extra_tags='err')

                # emailcontent=

            # Send an email to say it has been paid
            message2 = "Dear " + fname + " " + lname + ",<br><br>"
            message2 += "You have just requested a demo of our virtual conference platform CarbonFreeConf.<br>"
            message2 += "We will get back to you shortly.<br><br>"
            message2 += "The CarbonFreeConf demo Team.<br>"
            if message:
                message2 += "<small>Your message: " + message + "</small><br>"
            if company:
                message2 += "<small>Your company:" + company + "</small><br>"
            if phone:
                message2 += "<small>Your phone number:" + phone + "</small><br>"

            try:
                emailcon = EmailMessage(
                    "Demo request by " + fname + ' ' + lname,
                    message2,
                    'CarbonFreeConf <admin@carbonfreeconf.com>',  # from
                    [from_email],  # to
                    ['communication@carbonfreeconf.com'],  # bcc
                    reply_to=["admin@carbonfreeconf.com"],
                    headers={'Message-From': 'www.carbonfreeconf.com'},
                )
                emailcon.content_subtype = "html"

                emailcon.send(fail_silently=False)

                messages.success(request,
                                 "Your free request demo was successfully sent. You are on the right track!",
                                 extra_tags='suc')

            except BadHeaderError:
                messages.error(request,
                               "Invalid header found.", extra_tags='err')
                return HttpResponseRedirect(reverse('my_app:demo'))

            form = DemoForm(initial={'message': 'Thank you.'})
            stuff_for_frontend.update({
                'demoform': form
            })
        else:
            messages.error(request,
                           "Whoops, retry the math problem! You can do it!", extra_tags='err')
            cur_language = get_language()
            print('lang2',cur_language)
            if cur_language == 'fr':
                form = DemoForm(initial={'message': "Dites nous en plus à propos de votre projet ainsi que la date et l'heure qui vous conviendrez le mieux pour la démo."})
            else:
                form = DemoForm(initial={'message': 'Here, tell us more about you and your project as well as the date and time that would best suit you for the live demo.'})
            stuff_for_frontend.update({
                'demoform': form
            })

    return render(request, 'my_app/demo.html', stuff_for_frontend)


def pricing(request):
    prep = []
    off = []
    # prepo,offseto = utils.pricebis(duration=3.4, size=1422, rec=False, youtube=False, who="Everyone", proc=False)
    # print('pppp',prepo,offseto)

    # 1 day
    prepeuro, offseteuro = utils.pricebis(duration=1, size=50, rec=False, youtube=False, who="Nada", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=1, size=100, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=1, size=500, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)

    # 3 days
    prepeuro, offseteuro = utils.pricebis(duration=3, size=50, rec=False, youtube=False, who="Nada", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=3, size=100, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=3, size=500, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)

    # 5 days
    prepeuro, offseteuro = utils.pricebis(duration=5, size=50, rec=False, youtube=False, who="Nada", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=5, size=100, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)
    prepeuro, offseteuro = utils.pricebis(duration=5, size=500, rec=True, youtube=True, who="Everyone", proc=True)
    off.append(offseteuro)
    prep.append(prepeuro + offseteuro)

    ucl=utils.conf_list_user(request)

    stuff_for_frontend = {
        'total': prep,
        'offseteuro': off,
        'conf_list_user':ucl
    }

    return render(request, 'my_app/pricing.html', stuff_for_frontend)


def terms(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/terms.html', stuff_for_frontend)

def saleterms(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/saleterms.html', stuff_for_frontend)


def privacy(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/privacy.html', stuff_for_frontend)


def about(request):
    ucl=utils.conf_list_user(request)
    stuff_for_frontend = {
        'conf_list_user': ucl
    }

    return render(request, 'my_app/about.html', stuff_for_frontend)


def offset(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/offset.html', stuff_for_frontend)


@confirm_password
def checkout(request, confnum=None):
    #import braintree
    if not request.user.is_authenticated:
        stuff_for_frontend = {
            'comingfrom': 'createconf',
            'linkfrom': '',
            'confnum': 0
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)
    else:
        #check who can access here

        import pycountry
        stuff_for_frontend = {'countries': pycountry.countries}
        print('cf',confnum)

        if confnum:

            #print('cf2', confnum)
            if CreateConf.objects.filter(id=confnum).exists():
                conff = CreateConf.objects.filter(id=confnum)[0]
                #print('cf3', conff.status)

                users = RegisterConf.objects.filter(conference__id=confnum, role=3)
                print('users',users,request.user.id)
                access=0

                for us in users:
                    print('us',us.user.id,request.user.id)
                    if us.user.id==request.user.id:
                        access=1

                if access==1 or request.user.is_superuser:
                    print('you have access')

                    if conff.status!=2:
                        # add formula that sets the price here...
                        if conff.masterconf and conff.payingatonce:
                            # find all daughter conf+master conf and loop over
                            # Q(account_type=3) | Q(account_type=4)
                            allconf = CreateConf.objects.filter(Q(masterconfidfordaughter=conff.id, status=1) | Q(id=conff.id))

                            # allconf=CreateConf.objects.filter(masterconfidfordaughter=conff.id)
                            prepeuro1 = 0.
                            offseteuro1 = 0.
                            prepeuro = 0.
                            offseteuro = 0.
                            for conf in allconf:
                                #print('conf', conf.title)
                                prepeuro1, offseteuro1 = utils.price(conf.id)
                                #print('prepeuro1,offseteuro1', prepeuro1, offseteuro1)
                                prepeuro = prepeuro + prepeuro1
                                offseteuro = offseteuro + offseteuro1

                            stuff_for_frontend.update(
                                {'confnum': confnum, 'title': conff.title, 'prepeuro': prepeuro, 'offseteuro': offseteuro,
                                 'total': prepeuro + offseteuro})
                            #print('confnumdjfkhdfkjghdfzzzz', confnum, prepeuro,
                               #   offseteuro)

                        else:
                            prepeuro, offseteuro = utils.price(confnum)
                            stuff_for_frontend.update(
                                {'conftopass': conff, 'confnum': confnum, 'title': conff.title, 'prepeuro': prepeuro,
                                 'offseteuro': offseteuro, 'total': prepeuro + offseteuro})
                            #print('confnumdjfkhdfkjghdfkjgvbfdjkvbfdkjgvbfdjkgbfdkjgfbdkjgbdfkjjgbdfkbgd', confnum, prepeuro,
                               #   offseteuro)
                    else:
                        #already paid
                        #print('aqu')
                        stuff_for_frontend.update(
                            {'alpaid':True})
                else:
                    stuff_for_frontend.update(
                        {'notexist': True})
            else:
                stuff_for_frontend.update(
                    {'notexist': True})
        else:
            print('confnumb', confnum)

        #gateway = braintree.BraintreeGateway(
        #    braintree.Configuration(
        #        environment=braintree.Environment.Sandbox,
        #        merchant_id='2pv485tgx9hp2393',
        #        public_key='j9tbhk2yr4w8s66k',
        #        private_key='36d414ed534409fdf22c8829fd36bfa8'
        #    )
        #)

        #the_user = User.objects.get(username=request.user.username)

        #if the_user.userprofileinfo.customerid:#charles
        #    client_token = gateway.client_token.generate({
        #        "customer_id": the_user.userprofileinfo.customerid
        #    })
        #else:
        #    client_token = gateway.client_token.generate({
        #    })
        #stuff_for_frontend.update({'token': client_token})

        #print('client', client_token)

        if request.method == 'POST':
            # if request.POST.get('comingfrom')=='website':
            #    confnum = request.POST.get('confnum')
            #    comingfromweb = request.POST.get('comingfromweb')
            #    comingfrom=request.POST.get('comingfrom')
            # return render(request, 'my_app/checkout.html', stuff_for_frontend)

            # else:
            paynonce = request.POST.get('paymentMethodNonce')
            firstname = request.POST.get('firstname')
            email = request.POST.get('email')
            accpay = request.POST.get('accpay')
            vat = request.POST.get('vat')
            address = request.POST.get('address')
            zip = request.POST.get('zip')
            city = request.POST.get('city')
            country = request.POST.get('country')
            conum = request.POST.get('conum')
            amount = request.POST.get('total')
            amounteuro = request.POST.get('totaleuro')
            currency = request.POST.get('currency')
            coupon = request.POST.get('coupon')
            prep = request.POST.get('prep')
            off = request.POST.get('off')

            print('accpay',accpay)

            #print('p', prep, off, amount)
            if currency == '':
                currency = 'EUR'
            #print('a', amount)
            # amount=int(''.join(filter(str.isdigit, amount)))
            # print('a',amount)

            #print('mila', amount, float(amount)*100)
            #print('int mil',round(float(amount)*100))

            if len(amount.split('.')[1]) > 2:
                amountstr = amount.split('.')[0] + '.' + amount.split('.')[1][0:2]
            #    amount = int(amount*100)

            else:
                amountstr = amount.split('.')[0] + '.' + amount.split('.')[1]
            #    amount = int(amount*100)
            amount = round(float(amount) * 100)

            #print('amountstr',amountstr)
            #print('paynonce', paynonce)
            #print('jill', firstname, email, address, zip, city, country, conum)

            response_data = {}

            try:
                validate_email(email)
                # return True
                response_data['wrongemail'] = False
            except ValidationError:
                #print('jacques')
                stuff_for_frontend.update({'wrongemail': 1})
                response_data['wrongemail'] = True

            if firstname:
                response_data['firstname'] = False
            else:
                response_data['firstname'] = True

            if accpay=='true':
                response_data['accpay'] = False
            else:
                response_data['accpay'] = True

            if address:
                response_data['address'] = False
            else:
                response_data['address'] = True

            if city:
                response_data['city'] = False
            else:
                response_data['city'] = True

            if zip:
                response_data['zip'] = False
            else:
                #print('zip')
                response_data['zip'] = True

            if country:
                response_data['country'] = False
            else:
                response_data['country'] = True
            # return HttpResponse('The email you entered is not in the correct form.')

            if not response_data['wrongemail'] and not response_data['firstname'] and not response_data['address'] and not \
            response_data['city'] and not response_data['zip'] and not response_data['country'] and not response_data['accpay']:
                #print('conum', conum)
                conftopass = CreateConf.objects.filter(id=conum)[0]

                if conftopass.status != 2:
                    if currency == 'USD':
                        merchantaccountid = "dollaraccount"
                    elif currency == 'GBP':
                        merchantaccountid = "poundaccount"
                    else:
                        merchantaccountid = "carbonfreeconf"

                    existing_user = User.objects.get(username=request.user.username)
                    import stripe
                    stripe.api_key = settings.STRIPE_SECRET_KEY
                    print('stripe key', stripe.api_key)
                    statuspay = 0

                    if existing_user.userprofileinfo.customerid:
                        print('alrea')
                        #customerId=existing_user.userprofileinfo.customerid
                        customer = stripe.Customer.create()

                        try:
                            customerId=customer['id']
                            #payment_methods = stripe.PaymentMethod.list(
                            #    customer=customerId,
                            #    type='card'
                            #)
                            #print('alreadf',payment_methods)

                            # Charge the customer and payment method immediately
                            intent = stripe.PaymentIntent.create(
                                amount=amount,
                                currency=currency,
                                customer=customerId,
                                setup_future_usage='off_session',
                                #payment_method=payment_methods.data[0].id,
                                #off_session=False,
                                #confirm=True,
                                payment_method_types=["card"],
                                description = "CarbonFreeConf payment for organizing your meeting: " + conftopass.title,
                                receipt_email = email,
                                shipping = {
                                    "name": firstname,
                                    "address": {
                                        "line1": address,
                                        "city": city,
                                        # "state": "CA",
                                        "country": country,
                                        "postal_code": zip,
                                    },
                                },
                            )
                            print('intent',intent)
                            statuspay = 1
                            if intent.status == 'succeeded':
                                statuspay=1
                                print('Successfully charged card off session')

                            response_data['clientSecret'] = intent['client_secret']
                            response_data['id'] = intent['id']

                            stuffforjson = {'clientSecret': intent['client_secret']}
                            # return JsonResponse({'clientSecret': intent['client_secret']})

                        except Exception as e:
                            print('err', e)
                            return JsonResponse({'error': str(e)})



                        #print('existing', existing_user.userprofileinfo.customerid)
                        #print('amount', amount)
                        #result = gateway.transaction.sale({
                        #    "amount": amount,
                        #    "merchant_account_id": merchantaccountid,  # "carbonfreeconf",#dollaraccount,poundaccount
                        #    "payment_method_nonce": 'fake-valid-nonce',
                        #    "customer_id": existing_user.userprofileinfo.customerid,
                        #    "billing": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "street_address": address,
                        #        "locality": city,
                        #        "postal_code": zip,
                        #        "country_name": country,
                        #    },
                        #    "options": {
                        #        "submit_for_settlement": True,
                        #        "store_in_vault_on_success": True
                        #    }
                        #})
                    else:
                        #domain_url = request.build_absolute_uri('/')

                        customer = stripe.Customer.create()

                        try:
                            customerId=customer['id']
                            # data = json.loads(request.data)
                            intent = stripe.PaymentIntent.create(
                                customer=customer['id'],
                                setup_future_usage='off_session',
                                amount=amount,  # calculate_order_amount(data['items']),
                                currency=currency,
                                description="CarbonFreeConf payment for organizing your meeting: "+conftopass.title,
                                receipt_email=email,
                                payment_method_types=["card"],
                                shipping={
                                    "name": firstname,
                                    "address": {
                                        "line1": address,
                                        "city": city,
                                        #"state": "CA",
                                        "country": country,
                                        "postal_code": zip,
                                    },
                                },
                                #shipping.name=firstname,
                                #shipping.address.line1=address,
                                #shipping.address.city = city,
                                #shipping.address.country = country,
                                #shipping.address.postal_code = zip,

                            )
                            print('intent', intent)
                            response_data['clientSecret'] = intent['client_secret']
                            response_data['id'] = intent['id']
                            statuspay = 1

                            if intent.status == 'succeeded':
                                statuspay=1
                                print('statuspay',statuspay)
                            stuffforjson={'clientSecret': intent['client_secret']}
                            #return JsonResponse({'clientSecret': intent['client_secret']})

                        except Exception as e:
                            print('err', e)
                            return JsonResponse({'error': str(e)})


                        #print('notexisting', existing_user.userprofileinfo.customerid)
                        #print('amount', amount)
                        #result = gateway.transaction.sale({
                        #    "amount": amount,
                        #    "merchant_account_id": merchantaccountid,  # "dollaraccount",  # dollaraccount,poundaccount
                        #    "payment_method_nonce": 'fake-valid-nonce',
                        #    "customer": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "email": email,
                        #    },
                        #    "billing": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "street_address": address,
                        #        "locality": city,
                        #        "postal_code": zip,
                        #        "country_name": country,
                        #    },
                        #    "options": {
                        #        "submit_for_settlement": True,
                        #        "store_in_vault_on_success": True
                        #    }
                        #})

                        existing_user.userprofileinfo.customerid = customer['id']
                        #existing_user.userprofileinfo.customerid = result.transaction.customer_details.id

                        existing_user.userprofileinfo.save()

                    #print('resul', result)
                    #print('resul', type(result))
                    #print('resulid', result.transaction.id)
                    #print('resulcrea', result.transaction.created_at)
                    #print('resulcreditcard', result.transaction.credit_card_details.token)
                    #print('resulcustid', result.transaction.customer_details.id)

                    # from conf.tasks import add
                    # res=add.delay(2, 2)
                    # adde=res.get(timeout=1)
                    # print('add',adde)
                    # rate,conv 0.926829 US$107.89
                    # print('rate,conv',rate,conversion)
                    # result.transaction.customer_details.id
                    # => e.g. "131866"
                    # result.transaction.credit_card_details.token
                    # id=iddelatransaction, created_at,customerid=je sais pas ou c

                    # response_data['firstname'] = firstname
                    couponrec = ''
                    discountprep = 0
                    discountval = 0
                    discountisper = False
                    if coupon:
                        #print('coupon', coupon)
                        user = User.objects.get(username=request.user.username)
                        status = validate_coupon(coupon_code=coupon, user=user)
                        if status['valid']:
                            # response_data['coupon'] = True
                            couponrec = coupon
                            getcoupon = Coupon.objects.get(code=coupon)
                            # getcoupon.use_coupon(user=user)
                            # discountprep = getcoupon.get_discounted_value(initial_value=float(prep))
                            discount = getcoupon.get_discount()  # Example: {'value': 50, 'is_percentage': True}
                            #print('cc', discount['value'], discount['is_percentage'])
                            discountval = discount['value']
                            discountisper = discount['is_percentage']
                            # amountprep = str(discountprep)
                            # amounttota = str(discountprep + float(amountoff))

                    Transac.objects.create(
                        user=request.user,
                        conference=conftopass,
                        email=email,
                        vat=vat,
                        insti=firstname,
                        amount=amount,
                        amountprep=float(prep),
                        amountoff=float(off),
                        discount=discountval,
                        discountispercentage=discountisper,
                        coupon=couponrec,
                        currency=currency,
                        balance=Money(amounteuro, 'EUR'),
                        address=address,
                        city=city,
                        zip=zip,
                        country=country,
                        #transacid=result.transaction.id,
                        transacid=intent['id'],
                        transaccreated=intent['created'],
                        #transacdate=result.transaction.created_at,
                        transacdate=datetime.now(tz=pytz.utc),
                        #creditcartoken=result.transaction.credit_card_details.token,
                        creditcartoken=intent['client_secret'],
                        customerid=customerId,
                        #customerid = result.transaction.customer_details.id
                    # and save that dans user aussi et check si existe plus haut quand on crée le token
                    )

                    if statuspay==1:
                        #conftopass.status = 2
                        #conftopass.save()
                        response_data['success'] = True

                        # Send an email to say it has been paid
                        #subject = "Receipt for creating the CarbonFreeConf-erence entitled " + conftopass.title
                        #message = "Dear " + request.user.first_name + " " + request.user.last_name + ",<br><br>"
                        #message += "Thank you for your payment. We hereby acknowledge a transaction of <strong>" + amountstr + currency + "</strong> by credit card from " + firstname + " for organizing the conference entitled <i>" + conftopass.title + "</i>.<br>"
                        #message += "Part of this amount (" + off + currency + ") will be used to offset the carbon emissions of the conference. Thank you for that! We will send you a certificate proving that the emission was offset when it is actually done.<br>"
                        #message += "The invoice address is (let us know if it's wrong): " + address + ", " + zip + ", " + city + ", " + country + ".<br>"
                        #message += "We will send you the receipt when the money will be transferred to us.<br>"
                        #message += "We are looking forward to the start of this conference and if you have any pending questions about what's coming next or your payment, please do not hesitate to contact us.<br><br>"
                        #message += "Kind regards,<br>"
                        #message += "The CarbonFreeConf accounting Team<br><br><br>"  # d_obj.strftime("%d %B %Y")
                        #message += "<small>Your conference will start on " + conftopass.start_date.strftime(
                        #    "%d %B %Y") + " and finish on " + conftopass.end_date.strftime(
                        #    "%d %B %Y") + ". It will host " + conftopass.size + " persons.</small><br>"
                        #if conftopass.fee:
                        #    message += "<small>Your participants must pay a one-off fee of " + str(
                        #        conftopass.fee_amount) + conftopass.fee_currency + " to register.</small><br>"
                        #else:
                        #    message += "<small>The conference is free for your participants.</small><br>"
                        #if conftopass.poster:
                        #    message += "<small>There will be a poster session.</small><br>"
                        #else:
                        #    message += "<small>You have not chosen to host a poster session during this conference.</small><br>"
                        #if conftopass.recording:
                        #    message += "<small>The talks will be recorded and accessible to " + conftopass.whorecording + " from CarbonFreeConf.</small><br>"
                        #    if conftopass.youtuberecording:
                        #        message += "<small>The talks will also be posted to Youtube.</small><br>"
                        #else:
                        #    message += "<small>You have chosen to not record the talks during this conference.</small><br>"
                        #if conftopass.proceedin:
                        #    message += "<small>Your participants can write a proceeding on our platform, which will be accessible online.</small><br>"
                        #if vat:
                        #    message += "<small>The VAT identification number you provided is: " + vat + " (if it is incorrect contact us rapidly).</small><br>"
                        #websiteorno = Website.objects.filter(conference=conftopass)
                        #if websiteorno:
                        #    message += "<small>We remind you that your conference website can be accessed from <a href='https://www.carbonfreeconf.com/website/" + str(
                        #        conftopass.id) + "/home'>here</a>.</small>"

                        #emailto = []
                        #emailto.append(email)
                        #print('emailto', emailto)
                        #print(subject)
                        #print(message)
                        #email2 = EmailMessage(
                        #    subject,
                        #    message,
                        #    'CarbonFreeConf <conference@carbonfreeconf.com>',  # from
                        #    emailto,  # to
                            # getemails,  # bcc
                            # reply_to=replylist,
                        #    headers={'Message-From': 'www.carbonfreeconf.com'},
                        #)
                        #email2.content_subtype = "html"

                        #email2.send(fail_silently=False)

                        # People.objects.create(
                        #    firstname=firstname,
                        #    lastname=lastname,
                        #    email=email,
                        #    conference=objects
                        # )

                    else:
                        print('reui')
                        response_data['success'] = False
                        response_data['pb'] = True

                else:
                    response_data['alreadypaid'] = True

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

        return render(request, 'my_app/checkout.html', stuff_for_frontend)


def validatepay(request):
    if request.method == 'POST':

        confnum = request.POST.get('conum')
        firstname = request.POST.get('firstname')
        email = request.POST.get('email')
        accpay = request.POST.get('accpay')
        vat = request.POST.get('vat')
        address = request.POST.get('address')
        zip = request.POST.get('zip')
        city = request.POST.get('city')
        country = request.POST.get('country')
        amount = request.POST.get('total')
        amounteuro = request.POST.get('totaleuro')
        currency = request.POST.get('currency')
        coupon = request.POST.get('coupon')
        prep = request.POST.get('prep')
        off = request.POST.get('off')

        if currency == '':
            currency = 'EUR'

        if len(amount.split('.')[1]) > 2:
            amountstr = amount.split('.')[0] + '.' + amount.split('.')[1][0:2]
        #    amount = int(amount*100)

        else:
            amountstr = amount.split('.')[0] + '.' + amount.split('.')[1]
        #    amount = int(amount*100)

        conftopass = CreateConf.objects.filter(id=confnum)[0]

        conftopass.status = 2
        conftopass.save()
        response_data={}
        response_data['success'] = True

        # Send an email to say it has been paid
        subject = "Receipt for creating the CarbonFreeConf-erence entitled " + conftopass.title
        message = "Dear " + request.user.first_name + " " + request.user.last_name + ",<br><br>"
        message += "Thank you for your payment. We hereby acknowledge a transaction of <strong>" + amountstr + currency + "</strong> by credit card from " + firstname + " for organizing the conference entitled <i>" + conftopass.title + "</i>.<br>"
        message += "Part of this amount (" + off + currency + ") will be used to offset the carbon emissions of the conference. Thank you for that! We will send you a certificate proving that the emission was offset when it is actually done.<br>"
        message += "The invoice address is (let us know if it's wrong): " + address + ", " + zip + ", " + city + ", " + country + ".<br>"
        message += "We will send you the receipt when the money will be transferred to us.<br>"
        message += "We are looking forward to the start of this conference and if you have any pending questions about what's coming next or your payment, please do not hesitate to contact us.<br><br>"
        message += "Kind regards,<br>"
        message += "The CarbonFreeConf accounting Team<br><br><br>"  # d_obj.strftime("%d %B %Y")
        message += "<small>Your conference will start on " + conftopass.start_date.strftime(
            "%d %B %Y") + " and finish on " + conftopass.end_date.strftime(
            "%d %B %Y") + ". It will host " + conftopass.size + " persons.</small><br>"
        if conftopass.fee and not conftopass.feeunique:
            message += "<small>Your participants must pay a one-off fee of " + str(
                conftopass.fee_amount) + conftopass.fee_currency + " to register.</small><br>"
        if conftopass.feeunique:
            message += "<small>The conference fees are shared across all participants.</small><br>"
        if not conftopass.fee and not conftopass.feeunique:
            message += "<small>The conference is free for your participants.</small><br>"
        if conftopass.poster:
            message += "<small>There will be a poster session.</small><br>"
        else:
            message += "<small>You have not chosen to host a poster session during this conference.</small><br>"
        if conftopass.recording:
            message += "<small>The talks will be recorded and accessible to " + conftopass.whorecording + " from CarbonFreeConf.</small><br>"
            if conftopass.youtuberecording:
                message += "<small>The talks will also be posted to Youtube.</small><br>"
        else:
            message += "<small>You have chosen to not record the talks during this conference.</small><br>"
        if conftopass.proceedin:
            message += "<small>Your participants can write a proceeding on our platform, which will be accessible online.</small><br>"
        if vat:
            message += "<small>The VAT identification number you provided is: " + vat + " (if it is incorrect contact us rapidly).</small><br>"
        websiteorno = Website.objects.filter(conference=conftopass)
        if websiteorno:
            message += "<small>We remind you that your conference website can be accessed from <a href='https://www.carbonfreeconf.com/website/" + str(
                conftopass.id) + "/home'>here</a>.</small>"

        emailto = []
        emailto.append(email)
        # print('emailto', emailto)
        # print(subject)
        # print(message)
        email2 = EmailMessage(
            subject,
            message,
            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
            emailto,  # to
            # getemails,  # bcc
            # reply_to=replylist,
            headers={'Message-From': 'www.carbonfreeconf.com'},
        )
        email2.content_subtype = "html"

        email2.send(fail_silently=False)

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    stuff_for_frontend={'notexist': True}
    return render(request, 'my_app/checkout.html', stuff_for_frontend)


@confirm_password
def checkout_website(request, confnum=None):
    #import braintree
    if not request.user.is_authenticated:
        if not confnum:
            confnum=1

        stuff_for_frontend = {
            'comingfrom': 'website',
            'linkfrom': '',
            'confnum': confnum
        }
        return render(request, 'my_app/pay_website.html', stuff_for_frontend)
    else:
        import pycountry
        stuff_for_frontend = {'countries': pycountry.countries}

        if confnum:
            conff = CreateConf.objects.filter(id=confnum)[0]
            currency = 'EUR'
            # add formula that sets the price here...
            if conff.feeunique:
                costconfperparticipant = conff.fee_amount_unique#settings.COST_PER_PARTICIPANT#20.
                print('cu2',costconfperparticipant)

                currencyconf = conff.fee_currency_unique#'Euros'

            else:
                costconfperparticipant = conff.fee_amount
                currencyconf = conff.fee_currency


            # CURRENCY_CHOICES = (
            #    (EUR, "Euros"),
            #    (USD, "US Dollars"),
            #    (GBP, "GB Pounds"),
            # )
            if currencyconf == "US Dollars":
                curr = 'USD'
                uniteb='$'
                unitea=''
            elif currencyconf == "GB Pounds":
                curr = 'GBP'
                uniteb = '£'
                unitea = ''
            else:
                curr = 'EUR'
                uniteb = ''
                unitea = '€'

            #print('currencyconf', currencyconf, curr)
            # if curr != 'EUR':
            ##convcost = convert_money(Money(costconfperparticipant, curr), currency)
            #print('convcost', convcost)

            ##convcost = str(round(convcost.amount, 2))
            #print('convcost2', convcost)

            ##convcost = convcost.split('.')[0] + '.' + convcost.split('.')[1][0:2]

            convcost=costconfperparticipant
            #print('convcost3', convcost)

            hasalreadypaidd = False
            if RegisterConf.objects.filter(conference__id=confnum, user=request.user).exists():
                usertalks = RegisterConf.objects.filter(conference__id=confnum, user=request.user)
                if usertalks[0].haspaid:
                    hasalreadypaidd = True

                isfree = False
                if usertalks[0].free:
                    isfree = True

                usertalksacc = RegisterConf.objects.filter(conference__id=confnum, user=request.user, status=1)

                notalkaccepted = True
                if usertalksacc:
                    notalkaccepted = False

                stuff_for_frontend.update(
                    {'conftopass': conff, 'confnum': confnum, 'title': conff.title, 'cost': convcost, 'total': convcost,
                     'paid': hasalreadypaidd, 'free': isfree, 'notalkaccepted': notalkaccepted,'unitea':unitea,'uniteb':uniteb})
                #print('confnumdjfkhdfkjghdfkjgvbfdjkvbfdkjgvbfdjkgbfdkjgfbdkjgbdfkjjgbdfkbgd', confnum, costconfperparticipant)
            else:
                stuff_for_frontend.update(
                    {'notmember':True})
        else:
            print('confnumb', confnum)



        if request.method == 'POST':

            # else:
            paynonce = request.POST.get('paymentMethodNonce')
            firstname = request.POST.get('firstname')
            email = request.POST.get('email')
            vat = request.POST.get('vat')
            address = request.POST.get('address')
            zip = request.POST.get('zip')
            city = request.POST.get('city')
            accpay=request.POST.get('accpay')
            country = request.POST.get('country')
            conum = request.POST.get('conum')
            amount = request.POST.get('total')
            amounteuro = request.POST.get('totaleuro')
            currency = request.POST.get('currency')
            coupon = request.POST.get('coupon')
            prep = request.POST.get('prep')
            # off = request.POST.get('off')

            # print('p',prep,off,amount)
            if currency == '':
                currency = 'EUR'
            #print('a', amount)
            # amount=int(''.join(filter(str.isdigit, amount)))
            # print('a',amount)

            #change , in .
            if prep and amount:
                prep=prep.replace(',','.')
                amount=amount.replace(',','.')

            #print('mila', amount.split('.')[0], amount.split('.')[1])
            if len(amount.split('.'))>2:
                if len(amount.split('.')[1]) > 2:
                    amountstr = amount.split('.')[0] + '.' + amount.split('.')[1][0:2]
                else:
                    amountstr = amount.split('.')[0] + '.' + amount.split('.')[1]
            else:
                amountstr = amount.split('.')[0] + '.0'


            amount = round(float(amount) * 100)
            print('amount',amount)
            #print('paynonce', paynonce)
            print('jill', firstname, email, address, zip, city, country, conum)

            response_data = {}

            try:
                validate_email(email)
                # return True
                response_data['wrongemail'] = False
            except ValidationError:
                #print('jacques')
                stuff_for_frontend.update({'wrongemail': 1})
                response_data['wrongemail'] = True

            if firstname:
                response_data['firstname'] = False
            else:
                response_data['firstname'] = True

            if accpay=='true':
                response_data['accpay'] = False
            else:
                response_data['accpay'] = True

            if address:
                response_data['address'] = False
            else:
                response_data['address'] = True

            if city:
                response_data['city'] = False
            else:
                response_data['city'] = True

            if zip:
                response_data['zip'] = False
            else:
                #print('zip')
                response_data['zip'] = True

            if country:
                response_data['country'] = False
            else:
                response_data['country'] = True
            # return HttpResponse('The email you entered is not in the correct form.')

            if not response_data['wrongemail'] and not response_data['firstname'] and not response_data['address'] and not \
                    response_data['city'] and not response_data['zip'] and not response_data['country'] and not response_data['accpay']:
                #print('conum', conum)
                conftopass = CreateConf.objects.filter(id=conum)[0]

                hasalreadypaid = False
                usertalks = RegisterConf.objects.filter(conference__id=conum, user=request.user)
                if usertalks[0].haspaid:
                    hasalreadypaid = True

                if not hasalreadypaid:
                    if currency == 'USD':
                        merchantaccountid = "dollaraccount"
                    elif currency == 'GBP':
                        merchantaccountid = "poundaccount"
                    else:
                        merchantaccountid = "carbonfreeconf"

                    existing_user = User.objects.get(username=request.user.username)
                    import stripe
                    stripe.api_key = settings.STRIPE_SECRET_KEY
                    print('stripe key', stripe.api_key)
                    err=0

                    if existing_user.userprofileinfo.customerid:
                        #print('existing', existing_user.userprofileinfo.customerid)
                        #print('amount', amount)
                        #result = gateway.transaction.sale({
                        #    "amount": amount,
                        #    "merchant_account_id": merchantaccountid,  # "carbonfreeconf",#dollaraccount,poundaccount
                        #    "payment_method_nonce": 'fake-valid-nonce',
                        #    "customer_id": existing_user.userprofileinfo.customerid,
                        #    "billing": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "street_address": address,
                        #        "locality": city,
                        #        "postal_code": zip,
                        #        "country_name": country,
                        #    },
                        #    "options": {
                        #        "submit_for_settlement": True,
                        #        "store_in_vault_on_success": True
                        #    }
                        #})
                        print('alrea2')
                        #customerId = existing_user.userprofileinfo.customerid
                        customer = stripe.Customer.create()

                        try:
                            customerId = customer['id']

                        #try:

                            #payment_methods = stripe.PaymentMethod.list(
                            #    customer=customerId,
                            #    type='card'
                            #)
                            # print('alreadf',payment_methods)

                            # Charge the customer and payment method immediately
                            intent = stripe.PaymentIntent.create(
                                amount=amount,
                                currency=currency,
                                customer=customerId,
                                setup_future_usage='off_session',
                                # payment_method=payment_methods.data[0].id,
                                # off_session=False,
                                # confirm=True,
                                payment_method_types=["card"],
                                description="CarbonFreeConf payment for organizing your meeting: " + conftopass.title,
                                receipt_email=email,
                                shipping={
                                    "name": firstname,
                                    "address": {
                                        "line1": address,
                                        "city": city,
                                        # "state": "CA",
                                        "country": country,
                                        "postal_code": zip,
                                    },
                                },
                            )
                            print('intent', intent)
                            statuspay = 1
                            if intent.status == 'succeeded':
                                statuspay = 1
                                print('Successfully charged card off session2')

                            response_data['clientSecret'] = intent['client_secret']
                            response_data['id'] = intent['id']

                            stuffforjson = {'clientSecret': intent['client_secret']}

                        except Exception as e:
                            print('err', e)
                            err=1
                            errmes=str(e)

                            #messages.error(request,"Error: "+str(e))
                            #return JsonResponse({'error': str(e)})


                    else:
                        #print('notexisting', existing_user.userprofileinfo.customerid)
                        #print('amount', amount)
                        #result = gateway.transaction.sale({
                        #    "amount": amount,
                        #    "merchant_account_id": merchantaccountid,  # "dollaraccount",  # dollaraccount,poundaccount
                        #    "payment_method_nonce": 'fake-valid-nonce',
                        #    "customer": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "email": email,
                        #    },
                        #    "billing": {
                        #        "first_name": request.user.first_name,
                        #        "last_name": request.user.last_name,
                        #        "company": firstname,
                        #        "street_address": address,
                        #        "locality": city,
                        #        "postal_code": zip,
                        #        "country_name": country,
                        #    },
                        #    "options": {
                        #        "submit_for_settlement": True,
                        #        "store_in_vault_on_success": True
                        #    }
                        #})

                        customer = stripe.Customer.create()

                        try:
                            customerId = customer['id']
                            # data = json.loads(request.data)
                            intent = stripe.PaymentIntent.create(
                                customer=customer['id'],
                                setup_future_usage='off_session',
                                amount=amount,  # calculate_order_amount(data['items']),
                                currency=currency,
                                description="CarbonFreeConf payment for organizing your meeting: " + conftopass.title,
                                receipt_email=email,
                                payment_method_types=["card"],
                                shipping={
                                    "name": firstname,
                                    "address": {
                                        "line1": address,
                                        "city": city,
                                        # "state": "CA",
                                        "country": country,
                                        "postal_code": zip,
                                    },
                                },
                                # shipping.name=firstname,
                                # shipping.address.line1=address,
                                # shipping.address.city = city,
                                # shipping.address.country = country,
                                # shipping.address.postal_code = zip,

                            )
                            print('intent', intent)
                            response_data['clientSecret'] = intent['client_secret']
                            response_data['id'] = intent['id']
                            statuspay = 1

                            if intent.status == 'succeeded':
                                statuspay = 1
                                print('statuspay', statuspay)
                            stuffforjson = {'clientSecret': intent['client_secret']}
                            # return JsonResponse({'clientSecret': intent['client_secret']})

                        except Exception as e:
                            print('err', e)
                            err=1
                            errmes=str(e)
                            #return JsonResponse({'error': str(e)})

                        existing_user.userprofileinfo.customerid = customer['id']
                        existing_user.userprofileinfo.save()

                    #print('resul', result)
                    #print('resul', type(result))
                    #print('resulid', result.transaction.id)
                    #print('resulcrea', result.transaction.created_at)
                    #print('resulcreditcard', result.transaction.credit_card_details.token)
                    #print('resulcustid', result.transaction.customer_details.id)

                    # from conf.tasks import add
                    # res=add.delay(2, 2)
                    # adde=res.get(timeout=1)
                    # print('add',adde)
                    # rate,conv 0.926829 US$107.89
                    # print('rate,conv',rate,conversion)
                    # result.transaction.customer_details.id
                    # => e.g. "131866"
                    # result.transaction.credit_card_details.token
                    # id=iddelatransaction, created_at,customerid=je sais pas ou c

                    # response_data['firstname'] = firstname
                    couponrec = ''
                    discountprep = 0
                    discountval = 0
                    discountisper = False
                    if coupon:
                        #print('coupon', coupon)
                        user = User.objects.get(username=request.user.username)
                        status = validate_coupon(coupon_code=coupon, user=user)
                        if status['valid']:
                            # response_data['coupon'] = True
                            couponrec = coupon
                            getcoupon = Coupon.objects.get(code=coupon)
                            # getcoupon.use_coupon(user=user)
                            # discountprep = getcoupon.get_discounted_value(initial_value=float(prep))
                            discount = getcoupon.get_discount()  # Example: {'value': 50, 'is_percentage': True}
                            #print('cc', discount['value'], discount['is_percentage'])
                            discountval = discount['value']
                            discountisper = discount['is_percentage']
                            # amountprep = str(discountprep)
                            # amounttota = str(discountprep + float(amountoff))

                    if err==0:
                        Transac.objects.create(
                            user=request.user,
                            conference=conftopass,
                            isparticipantfee=True,
                            email=email,
                            vat=vat,
                            insti=firstname,
                            amount=amount,
                            amountprep=float(prep),
                            amountoff=0.,  # float(off),
                            discount=discountval,
                            discountispercentage=discountisper,
                            coupon=couponrec,
                            currency=currency,
                            balance=Money(amounteuro, 'EUR'),
                            address=address,
                            city=city,
                            zip=zip,
                            country=country,
                            transacid=intent['id'],
                            transaccreated=intent['created'],
                            # transacdate=result.transaction.created_at,
                            transacdate=datetime.now(tz=pytz.utc),
                            # creditcartoken=result.transaction.credit_card_details.token,
                            creditcartoken=intent['client_secret'],
                            customerid=customerId,
                            # and save that dans user aussi et check si existe plus haut quand on crée le token
                        )

                        # conftopass.status=2
                        # conftopass.save()

                        if statuspay==1:
                            #conftopass.status = 2
                            #conftopass.save()
                            response_data['success'] = True
                            #response_data['success'] = True

                            #usertalks = RegisterConf.objects.filter(conference__id=conum, user=request.user)

                            #for talk in usertalks:
                            #    talk.haspaid = True
                            #    talk.save()

                            # Send an email to say it has been paid
                            #subject = "Receipt for participating to the CarbonFreeConf-erence entitled " + conftopass.title
                            #message = "Dear " + request.user.first_name + " " + request.user.last_name + ",<br><br>"
                            #message += "Thank you for your payment. We hereby acknowledge a transaction of <strong>" + amountstr + currency + "</strong> by credit card from " + firstname + " for registering to the conference entitled <i>" + conftopass.title + "</i>.<br>"
                            #message += "The invoice address is (let us know if it's wrong): " + address + ", " + zip + ", " + city + ", " + country + ".<br>"
                            #message += "We are looking forward to the start of the conference and if you have any pending questions about your registration, please do not hesitate to contact us if it is not already answered on the conference website <a href='https://www.carbonfreeconf.com/website/" + str(
                            #    conftopass.id) + "/fees'>here</a>.<br><br>"
                            #message += "Kind regards,<br>"
                            #message += "The CarbonFreeConf accounting Team<br><br><br>"
                            #message += "<small>You should soon receive a receipt of the transaction via the email you provided. This is automatic and will be done once the money is transferred.</small><br>"
                            #message += "<small>If you want to organize a carbon neutral conference yourself, go explore <a href='https://www.carbonfreeconf.com'>CarbonFreeConf.com</a>.</small>"

                            #emailto = []
                            #emailto.append(email)
                            #print('emailto', emailto)
                            #print(subject)
                            #print(message)
                            #email2 = EmailMessage(
                            #    subject,
                            #    message,
                            #    'CarbonFreeConf <conference@carbonfreeconf.com>',  # from
                            #    emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                            #    headers={'Message-From': 'www.carbonfreeconf.com'},
                            #)
                            #email2.content_subtype = "html"

                            #email2.send(fail_silently=False)

                            # People.objects.create(
                            #    firstname=firstname,
                            #    lastname=lastname,
                            #    email=email,
                            #    conference=objects
                            # )
                        else:
                            print('reui2')
                            response_data['success'] = False
                            response_data['pb'] = True
                    else:
                        response_data['success'] = False
                        response_data['pb'] = True
                        response_data['err']=True
                        response_data['errmes']=errmes

                else:
                    response_data['alreadypaid'] = True

            return HttpResponse(
                json.dumps(response_data),
                content_type="application/json"
            )

        return render(request, 'my_app/pay_website.html', stuff_for_frontend)

def validatepayfee(request):
    if request.method == 'POST':

        confnum = request.POST.get('conum')
        firstname = request.POST.get('firstname')
        email = request.POST.get('email')
        accpay = request.POST.get('accpay')
        vat = request.POST.get('vat')
        address = request.POST.get('address')
        zip = request.POST.get('zip')
        city = request.POST.get('city')
        country = request.POST.get('country')
        amount = request.POST.get('total')
        amounteuro = request.POST.get('totaleuro')
        currency = request.POST.get('currency')
        coupon = request.POST.get('coupon')
        prep = request.POST.get('prep')
        off = request.POST.get('off')

        if currency == '':
            currency = 'EUR'

        if len(amount.split('.')) > 2:
            if len(amount.split('.')[1]) > 2:
                amountstr = amount.split('.')[0] + '.' + amount.split('.')[1][0:2]
            else:
                amountstr = amount.split('.')[0] + '.' + amount.split('.')[1]
        else:
            amountstr = amount.split('.')[0] + '.0'

        conftopass = CreateConf.objects.filter(id=confnum)[0]

        #conftopass.status = 2
        #conftopass.save()
        response_data={}
        response_data['success'] = True

        usertalks = RegisterConf.objects.filter(conference__id=confnum, user=request.user)

        for talk in usertalks:
            talk.haspaid = True
            talk.save()

        # Send an email to say it has been paid
        subject = "Receipt for participating to the CarbonFreeConf-erence entitled " + conftopass.title
        message = "Dear " + request.user.first_name + " " + request.user.last_name + ",<br><br>"
        message += "Thank you for your payment. We hereby acknowledge a transaction of <strong>" + amountstr + currency + "</strong> by credit card from " + firstname + " for registering to the conference entitled <i>" + conftopass.title + "</i>.<br>"
        message += "The invoice address is (let us know if it's wrong): " + address + ", " + zip + ", " + city + ", " + country + ".<br>"
        message += "We are looking forward to the start of the conference and if you have any pending questions about your registration, please do not hesitate to contact us if it is not already answered on the conference website <a href='https://www.carbonfreeconf.com/website/" + str(
            conftopass.id) + "/fees'>here</a>.<br><br>"
        message += "Kind regards,<br>"
        message += "The CarbonFreeConf accounting Team<br><br><br>"
        message += "<small>You should soon receive a receipt of the transaction via the email you provided. This is automatic and will be done once the money is transferred.</small><br>"
        message += "<small>If you want to organize a carbon neutral conference yourself, go explore <a href='https://www.carbonfreeconf.com'>CarbonFreeConf.com</a>.</small>"

        emailto = []
        emailto.append(email)
        # print('emailto', emailto)
        # print(subject)
        # print(message)
        email2 = EmailMessage(
            subject,
            message,
            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
            emailto,  # to
            # getemails,  # bcc
            # reply_to=replylist,
            headers={'Message-From': 'www.carbonfreeconf.com'},
        )
        email2.content_subtype = "html"

        email2.send(fail_silently=False)

        # People.objects.create(
        #    firstname=firstname,
        #    lastname=lastname,
        #    email=email,
        #    conference=objects
        # )

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    stuff_for_frontend={'notmember': True}
    return render(request, 'my_app/pay_website.html', stuff_for_frontend)


def codeofconduct(request):
    stuff_for_frontend = {}
    return render(request, 'my_app/codeofconduct.html', stuff_for_frontend)


@confirm_password
def participations(request):
    stuff_for_frontend = {
    }

    if request.user.is_authenticated:
        # if (CreateConf.objects.filter(user=request.user)):
        #   if request.session.get('conftit', ''):
        #      idcf = CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list('id',flat=True)[0]
        #     conftopass = CreateConf.objects.filter(id=idcf)[0]

        # else:
        #   idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
        #  conftopass = CreateConf.objects.filter(id=idcf)[0]

        if RegisterConf.objects.filter(user=request.user):
            # print('hereeeeparticipations')

            talks = RegisterConf.objects.filter(user=request.user).order_by('-created')

            stuff_for_frontend.update({
                'talks': talks,
            })
    else:
        stuff_for_frontend = {
            'comingfrom': 'participations',
            'linkfrom': '',
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)

    return render(request, 'my_app/participations.html', stuff_for_frontend)


@confirm_password
def proceedings(request):
    clui2 = utils.conf_list_user_inv2(request)

    stuff_for_frontend={
        'conf_list_user_inv2': clui2,
    }
    #stuff_for_frontend = {}

    if request.user.is_authenticated:

        # print('que?',request.session.get('conftit', ''))
        # confnum=109
        # if (CreateConf.objects.filter(user=request.user)):
        idcf = -1
        if request.session.get('conftit2', ''):
            idcf = int(request.session.get('conftit2', ''))
            conftopass = CreateConf.objects.filter(id=idcf)[0]
            title = \
                CreateConf.objects.filter(id=int(request.session.get('conftit2', ''))).values_list('title', flat=True)[
                    0]
        elif request.session.get('confid', ''):
            if request.user.is_superuser:
                if CreateConf.objects.filter(id=request.session.get('confid', '')):
                    idcf = int(request.session.get('confid', ''))#CreateConf.objects.filter(id=request.session.get('confid', '')).values_list('id',
                                                                                                          # flat=True).last()
                    conftopass = CreateConf.objects.filter(id=idcf)[0]
                    title = CreateConf.objects.filter(id=idcf).values_list('title', flat=True)[0]
                    #print('sup', idcf, title)
            else:
                if CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')):
                    idcf = int(request.session.get('confid', ''))
                    #CreateConf.objects.filter(user=request.user, title=request.session.get('conftit', '')).values_list(
                    #    'id', flat=True)[0]
                    conftopass = CreateConf.objects.filter(id=idcf)[0]
                    title = \
                    CreateConf.objects.filter(user=request.user, id=request.session.get('confid', '')).values_list(
                        'title', flat=True)[0]
        else:
            if CreateConf.objects.filter(user=request.user).order_by('-id'):
                idcf = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('id', flat=True)[0]
                conftopass = CreateConf.objects.filter(id=idcf)[0]
                title = CreateConf.objects.filter(user=request.user).order_by('-id').values_list('title', flat=True)[0]

        if idcf > -1:

            if CreateConf.objects.filter(id=idcf).values_list('proceedin', flat=True)[0] == False:
                stuff_for_frontend = {
                    'status': '3'  # 'nada'
                }
            if RegisterConf.objects.filter(conference=conftopass):
                # print('hereeeeproceedings')

                talks = RegisterConf.objects.filter(conference=conftopass)
                if request.session.get('talknum', ''):
                    talkid = request.session.get('talknum', '')
                    #print('vla')
                    # print('aqui',conftopass,talkid)
                    # if RegisterConf.objects.filter(conference=conftopass, user=request.user, id=talkid):
                    talktitle = \
                    RegisterConf.objects.filter(conference=conftopass, id=talkid).values_list('title', flat=True)[0]
                else:
                    #print('vla2')
                    talkid = \
                    RegisterConf.objects.filter(conference=conftopass).order_by('-id').values_list('id', flat=True)[0]
                    talktitle = \
                    RegisterConf.objects.filter(conference=conftopass).order_by('-id').values_list('title', flat=True)[
                        0]

                stuff_for_frontend.update({
                    'talks': talks,
                    'talktitle': talktitle
                })

            if request.method == 'POST':
                # print('jh')
                confnum = request.POST.get('confnum')
                htmlproc = request.POST.get('htmlproc')
                htmlproc2 = request.POST.get('htmlproc2')
                bibproc2 = request.POST.get('bibproc2')

                # print('firsthtmlproc2',htmlproc2)
                exppdf = request.POST.get('exppdf')
                confnum2 = request.POST.get('confinv')
                talknum = request.POST.get('confpinv')
                if talknum:
                    request.session['talknum'] = talknum
                    talkid = talknum
                if CreateConf.objects.filter(id=confnum2):
                    request.session['conftit2'] = confnum2
                #print('jh2')

                if request.session.get('talknum', ''):
                    #print('vla3')
                    talkid = request.session.get('talknum', '')
                    talktitle = \
                    RegisterConf.objects.filter(conference=conftopass, id=talkid).values_list('title', flat=True)[0]
                else:
                    #print('vla4')
                    talkid = \
                    RegisterConf.objects.filter(conference=conftopass).order_by('-id').values_list('id', flat=True)[0]
                    talktitle = \
                    RegisterConf.objects.filter(conference=conftopass).order_by('-id').values_list('title', flat=True)[
                        0]

                stuff_for_frontend.update({
                    'talktitle': talktitle
                })

                # print('htmlproc',htmlproc,confnum2)

                if confnum2:
                    # check if invited
                    #print('vla5')
                    querysetexist = RegisterConf.objects.filter(conference__id=confnum2, user=request.user,
                                                                status=1)  # tbb
                    # print('tttrrezdddfer23', querysetexist)
                    if querysetexist:
                        idcf = confnum2
                        conftopass = CreateConf.objects.filter(id=idcf)[0]
                        start = CreateConf.objects.filter(id=idcf).values_list('start_date', flat=True)[0]
                        end = CreateConf.objects.filter(id=idcf).values_list('end_date', flat=True)[0]
                        # idconf = CreateConf.objects.filter(id=idcf).values_list('idconf',
                        #   flat=True)[0]
                        title = CreateConf.objects.filter(id=idcf).values_list('title', flat=True)[0]
                        # print('titooo',title,idcf,conftopass)

                        talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                        # print('ttalkss',talks[0])

                        talkid = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                            '-id').values_list('id', flat=True)[0]
                        talktitle = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                            '-id').values_list('title', flat=True)[0]
                        request.session['talknum'] = talkid

                        if CreateConf.objects.filter(id=idcf).values_list('proceedin', flat=True)[0] == False:
                            stuff_for_frontend.update({
                                'status': '3'  # 'nada'
                            })
                        else:
                            stuff_for_frontend.update({
                                'status': '0'  # 'nada'
                            })

                        stuff_for_frontend.update({
                            'talks': talks,
                            'talktitle': talktitle
                        })

                    else:
                        stuff_for_frontend = {
                            'status': '2'  # 'nada'
                        }
                        # return render(request, 'my_app/proceedings.html', stuff_for_frontend)

                if (Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)):
                    noproc = 0
                    #print('vla6')
                    proc = Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)[0]

                    if htmlproc == '':
                        htmlproc = proc.texthtml
                        # htmlproc2 = proc.texthtml
                        # print('htmlprocb', htmlproc)
                    if htmlproc2 == '' or not htmlproc2:
                        htmlproc2 = proc.text

                    if bibproc2 == '' or not bibproc2:
                        bibproc2 = proc.bibtex

                        # print('htmlproc2b', htmlproc2,proc.conference.start_date.year)
                else:
                    # no procceding saved yet
                    noproc = 1

                if exppdf == 'yes':
                    if noproc == 0:
                        # template = get_template(createproc.title)
                        # TBB
                        if not 'ON_HEROKU' in os.environ:

                            download_pandoc()

                        else:
                            PYPANDOC_PANDOC = os.environ.get('PYPANDOC_PANDOC', '')
                            # print('pandoc version',pypandoc.get_pandoc_version())
                            # print(pypandoc.get_pandoc_path())
                            # print(pypandoc.get_pandoc_formats())
                            # must install tex and packages from https://github.com/Thermondo/heroku-buildpack-tex
                        #    #print('gga')
                        #    os.environ.setdefault('PYPANDOC_PANDOC', 'app/vendor/pandoc/bin/pandoc')
                        #    import django
                        #    django.setup()
                        #    heroku config:set PYPANDOC_PANDOC='/vendor/pandoc/bin/pandoc'

                        #print('bib', bibproc2)
                        if bibproc2 != '':
                            filebibname = 'file' + request.user.username + '.bib'
                            with open(filebibname, 'w') as f:
                                f.write(bibproc2)

                        if bibproc2 == '':
                            pdoc_args = ['--mathjax', '-V', 'geometry:a4paper', '-V',
                                         'geometry:top=1.cm']  # geometry:margin=1.5cm
                        else:
                            pdoc_args = ['--mathjax', '-V', 'geometry:a4paper', '-V', 'geometry:top=1.cm',
                                         '--bibliography', filebibname]  # geometry:margin=1.5cm
                        titlemd = proc.title
                        # titlemd = "**{0}**".format(proc.title)
                        # titlemd = "# {0}".format(titlemd)
                        titlemd = '$$ \\text{{ {0} }} $$'.format(titlemd)
                        titlemd = "**{0}**".format(titlemd)
                        titlemd = "# {0}".format(titlemd)
                        procmd = 'Published online by CarbonFreeConf ' + str(
                            proc.conference.start_date.year) + '  \n  \n' + 'Proceedings for conference entitled *' + proc.conference.title + '* by ' + proc.user.first_name + '$\,$' + proc.user.last_name + '  \n   \n   \n   \n   \n'
                        mdtext = procmd + titlemd + '  \n   \n   \n   \n   \n' + htmlproc2  # +proc.text
                        # print('proc',titlemd, proc.text)
                        outputtitle = "proceedingfilefor" + proc.user.first_name + "-" + proc.user.last_name + "-" + proc.title + ".pdf"
                        # print('out',outputtitle)
                        # output = pypandoc.convert_file('somefile.md', 'pdf', outputfile="static/somefileee.pdf")

                        # output = pypandoc.convert_text('# some title', 'pdf', format='md')

                        ##print('output',output)

                        output = pypandoc.convert_text(mdtext, 'pdf', format='md', extra_args=pdoc_args,
                                                       outputfile=outputtitle)
                        # output = pypandoc.convert_text(mdtext,'pdf', format='md', outputfile=outputtitle)
                        # git @ github.com: jgm / pandoc.git
                        # output = pypandoc.convert_text(
                        #   '# some title $t\sim7$',
                        #  'pdf', format='md', extra_args=pdoc_args,
                        # outputfile="somefile2.pdf")
                        # print('what')
                        if bibproc2 != '':
                            os.remove(filebibname)
                        try:
                            with open(outputtitle, "rb") as fid:
                                filedata = fid.read()

                            # remove the file
                            p = Popen("rm %s" % outputtitle, shell=True)

                            # make response
                            response = HttpResponse(filedata, content_type="application/pdf")

                            return response

                            ##print('rem',settings.BASE_DIR+'/'+outputtitle)
                            # os.remove(settings.BASE_DIR+'/'+outputtitle)
                            # return FileResponse(open(outputtitle, 'rb'), content_type='application/pdf')
                            # os.remove(outputtitle)
                            # os.remove(os.path.join(settings.BASE_DIR, outputtitle))

                        except FileNotFoundError:
                            raise Http404()
                    else:
                        # no proceedings saved yet
                        stuff_for_frontend.update({
                            'noproc': 1,
                        })
                        # raise Http404()

                    # with open('somefile2.pdf', 'r') as pdf:
                    #   #print('what2')
                    #  response = HttpResponse(pdf, content_type='application/pdf')
                    # #print('what2a')
                    # response['Content-Disposition'] = 'inline;filename=somefile2.pdf'
                    ##print('what2b')
                    # return response

                    ##print('what3')
                    # templ = 'pdf/template.html'

                    # contextval = {
                    #   'pagesize': 'A4',
                    #  'mylist': htmlproc2,
                    # }

                    # html = template.render(context)
                    # pdf = utils.render_to_pdf(templ, contextval)
                    ##print('pdf', pdf)

                    # if pdf:
                    #   response = HttpResponse(pdf, content_type='application/pdf')
                    #   filename = "ProceedingCarbonFreeConf.pdf"
                    #   content = "inline; filename=%s" % (filename)
                    #   download = request.GET.get("download")
                    #   if download:
                    #       content = "attachment; filename='%s'" % (filename)
                    #   response['Content-Disposition'] = content
                    #   return response
                    # return HttpResponse("Not found")

                # create a form instance and populate it with data from the request:
                proceeding_form = ProceedingForm(request.POST)
                # check whether it's valid:
                # print('brkllooooooooooooooooooooooooooooooooooooo')
                if proceeding_form.is_valid():
                    # process the data in form.cleaned_data as required
                    # ...
                    # redirect to a new URL:
                    createproc = proceeding_form.save(commit=False)
                    # print('brkllooooooooooooooooooooooooooooooooooooo2',talkid,talktitle)

                    regtalk = RegisterConf.objects.filter(conference=conftopass, id=talkid)[0]
                    # conftopass = CreateConf.objects.filter(id=confnum)[0]

                    if request.user.is_superuser:
                        if (Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)):
                            usereffb = \
                            Proceeding.objects.filter(conference=conftopass, regconf__id=talkid).values_list('user',
                                                                                                             flat=True)[
                                0]
                            usereff = User.objects.get(id=usereffb)

                            #print('usereff', usereff, request.user.id, conftopass, talkid)
                        else:
                            usereff = request.user

                    else:
                        usereff = request.user
                        #print('use', usereff)

                    #print('yy', usereff)
                    obj, created = Proceeding.objects.update_or_create(
                        user=usereff, conference=conftopass, regconf__id=talkid,
                        defaults={'text': createproc.text, 'texthtml': htmlproc, 'title': createproc.title,
                                  'bibtex': createproc.bibtex, 'status': createproc.status,
                                  'user': usereff, 'conference': conftopass, 'regconf': regtalk}
                        # 'start_date': '','end_date': '',
                    )
                    #print('yy2', usereff)

                    messages.success(request,
                                     "Your proceeding was recorded. You can modify it and submit it again if needed.")

                    #print('brkllooooooooooooooooooooooooooooooooooooo3', createproc.text)

                if (Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)):
                    proc = Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)[0]
                    # print('brkllooooooooooooooooooooooooooooooooooooo4',talkid,conftopass)
                    #print('vla7')

                    proceeding_form = ProceedingForm(
                        initial={'title': proc.title, 'text': proc.text, 'bibtex': proc.bibtex, 'status': proc.status})
                else:
                    #print('vla8')

                    proceeding_form = ProceedingForm()
                    # print('brkllooooooooooooooooooooooooooooooooooooo5')

                    # return HttpResponseRedirect('/thanks/')
                # if a GET (or any other method) we'll create a blank form
            else:
                if (Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)):
                    proc = Proceeding.objects.filter(conference=conftopass, regconf__id=talkid)[0]
                    #print('vla9')

                    proceeding_form = ProceedingForm(
                        initial={'title': proc.title, 'text': proc.text, 'bibtex': proc.bibtex, 'status': proc.status})
                    stuff_for_frontend.update({
                        'noproc2': 1
                    })
                else:
                    proceeding_form = ProceedingForm()
                    #print('vla10')

            print('jh')

            stuff_for_frontend.update({
                'proceeding_form': proceeding_form,
                'confnum': idcf,
                'title': title
            })
        else:
            stuff_for_frontend = {
                'status': '4',
            }
    else:
        stuff_for_frontend = {
            'comingfrom': 'proceedings',
            'linkfrom': '',
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)

    return render(request, 'my_app/proceedings.html', stuff_for_frontend)


def voteup(request):
    if request.method == 'POST':

        talkid = request.POST.get('talkid')
        review = RegisterConf.objects.get(pk=talkid)

        response_data = {}

        if request.user.is_anonymous:
            response_data['voter'] = 'Anonymous'
            response_data['result'] = "You need to be logged-in to vote!"
            response_data['result2'] = 3

        else:
            response_data['voter'] = request.user.first_name + ' ' + request.user.last_name
            # review.votes.delete(request.user.id)

            nbvoteuser = review.votes.all(request.user.id)  # problem is that it is not for a conf specifically
            #print('nbvoteuser', nbvoteuser, len(nbvoteuser))
            #print('que?', review.votes.exists(request.user.id), talkid)  # , review.votes.up(request.user.id))
            if 1 == 1:  # len(nbvoteuser) < 4:
                if review.votes.exists(request.user.id) == False:

                    review.votes.up(request.user.id)

                    response_data['result'] = "Thanks, your vote for this poster was accounted for!"
                    response_data['result2'] = 0


                else:
                    response_data['result'] = "You have already voted for this poster!"
                    response_data['result2'] = 1
            else:
                response_data['result'] = "You have reached the maximum number of 3 votes allowed!"
                response_data['result2'] = 2

        response_data['nbvote'] = review.votes.count()

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )


def addtoschedule(request):
    added = 0
    if request.method == 'POST':
        # print('addedtoschedule')
        # item_id = int(request.POST.get(email=peopleemail))
        ##print(request.POST.get('peoplefn'), request.POST.get('peopleln'), request.POST.get('peopleemail'))
        # peoplefn = request.POST.get('peoplefn')
        # peopleln = request.POST.get('peopleln')
        # peopleemail = request.POST.get('peopleemail')
        confnum = request.POST.get('confnum')

        peoplefn = request.POST.get('firstname')
        peopleln = request.POST.get('lastname')
        peopleemail = request.POST.get('email')
        other2 = request.POST.get('other')

        response_data = {}

        response_data['firstname'] = peoplefn
        response_data['lastname'] = peopleln
        response_data['email'] = peopleemail
        response_data['confnum'] = confnum

        if other2 == 'y':
            response_data['other'] = 1
        else:
            response_data['other'] = 0

        response_data['result2'] = 1

        conftopass = CreateConf.objects.filter(id=confnum)[0]

        start_time = datetime.combine(conftopass.start_date, datetime.min.time())

        start_time_str = start_time.strftime("%Y-%m-%d %H:%M")

        # start_time=datetime.strptime(createconff.start_date,'%m/%d/%y')#put midnight local time for now
        # print('start', start_time_str)

        item = RegisterConf.objects.filter(user__email__iexact=peopleemail, conference=conftopass, status=1)
        # print('item',item)

        hourstart=ProgramDesign.objects.filter(conference=conftopass).values_list('timestart', flat=True)[0]
        print('hourstart',hourstart)

        if hourstart==0:
            hs=9
        else:
            hs=hourstart

        if item:
            for i in range(len(item)):

                tzloc = request.session['django_timezone']
                local = pytz.timezone(tzloc)  # pytz.timezone("America/Los_Angeles")
                # my_date = datetime.now(local)
                my_date = start_time  # .astimezone(local)
                # print('start_time', start_time)
                # print('my_date', my_date)
                my_date = my_date + timedelta(days=0, hours=hs + 2 * i)  # datetime.now(local)
                # print('my_date2', my_date)
                my_date = my_date  # .astimezone(local)#.replace(tzinfo=None)
                # print('local', local)
                shift = my_date - my_date.astimezone(local).replace(tzinfo=None)
                # print('my_date3', my_date, shift, my_date + shift)
                my_date = my_date + shift
                # print('mydate4', my_date)
                my_date_end = my_date + timedelta(days=0, hours=2)
                # if(my_date.date() != my_date_end.date()):
                #   my_date = my_date + timedelta(days=0, hours=16)
                #  my_date_end = my_date + timedelta(days=0, hours=2)

                # print('mydate', my_date, my_date_end)
                # print('local', local)

                if Schedule.objects.filter().last():
                    idnew = Schedule.objects.order_by('-id').values_list('id', flat=True)[0]
                    idnew = idnew + 1
                else:
                    idnew = 0

                rand = random.randint(100, 10000000)

                obj, created = Schedule.objects.update_or_create(
                    id=idnew,  # too large for heroku database...
                    defaults={'start_date': my_date, 'end_date': my_date_end, 'text': item[i].title,
                              'speaker': item[i].user.first_name + ' ' + item[i].user.last_name, 'important': False,
                              'type': item[i].type, 'rand': rand,  'notpart': False,  # tbb
                              'abstract': item[i].abstract, 'conference': conftopass, 'user': item[i].user}
                    # 'start_date': '','end_date': '',
                )

            response_data['result'] = "Added to program"
            response_data['result2'] = 0

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )

    return HttpResponseRedirect(reverse('my_app:createconf') + '#tog')


@confirm_password
def website(request, confnum=None, link=None):
    if CreateConf.objects.filter(id=confnum):
        '''displaytutopart = False
        if link == 'registration':
            if request.session.get('websitetutopart',False) == False:
                print('y')
                displaytutopart=True
                request.session['websitetutopart'] = True'''
            #else:
            #    print('yi')
            #    request.session['websitetutopart'] = True
        #from tzlocal import get_localzone  # pip install tzlocal

        #local_tz = get_localzone()
        #print('local',local_tz)
        #timezone.activate(local_tz)
        #timezone.localtime(timezone.now())

        #print()
        conftopass = CreateConf.objects.filter(id=confnum)[0]
        start_date2 = CreateConf.objects.filter(id=confnum).values_list('start_date', flat=True)[0]
        end_date3 = CreateConf.objects.filter(id=confnum).values_list('end_date', flat=True)[0]
        closing_date = CreateConf.objects.filter(id=confnum).values_list('closing_date', flat=True)[0]

        finished = 0
        if end_date3 < date.today():
            finished = 1

        started = 0
        if start_date2 <= date.today():
            started = 1

        closed = 0
        if closing_date:
            if closing_date < date.today():
                closed = 1

        visio = CreateVisio.objects.filter(conference__id=confnum, testroom=False).order_by('date')
        print('visio',visio)
        tzloc = request.session.get('django_timezone', 'UTC')  # request.session['django_timezone']
        local = pytz.timezone(tzloc)
        shift = visio[0].date.astimezone(local).replace(tzinfo=None) - visio[0].date.replace(tzinfo=None)
        print('shift',shift)
        start_time = visio[0].date + shift
        start_time = start_time.strftime("%H:%M")
        start_date = start_date2.strftime("%Y-%m-%d")
        start_date2 = (visio[0].date + shift).strftime("%A %d %b %Y (Starting at %I:%M %p)")  # strftime("%x %X")[:-3]
        end_date2 = (visio.last().date + timedelta(minutes=visio.last().duration) + shift).strftime(
            "%A %d %b %Y (Ending at %I:%M %p)")  # .strftime("%x %X")[:-3]
        dur = visio.last().date - visio[0].date + timedelta(minutes=visio.last().duration)
        ##print('durrrrrrrrrrrrrrrrr',dur.type)
        # duration_time = (dur-visio[0].date).strftime("%d day(s) %H hour(s) %M minute(s)")
        duration_time = time.gmtime(dur.total_seconds())  # .strftime("%d day(s) %H hour(s) %M minute(s)")
        if dur.total_seconds() > 24 * 60 * 60:
            duration_time = time.gmtime(dur.total_seconds() - 24 * 60 * 60)
            duration_time = time.strftime('%d days %H:%M', duration_time)
        else:
            duration_time = time.strftime('%H:%M', duration_time)

        starttimeline=[]

        for v in visio:
            start_date_timeline = (v.date + shift).strftime("%Y-%m-%d")  # strftime("%x %X")[:-3]
            #print('r',start_date_timeline)
            starttimeline.append(start_date_timeline)

        #print('s',starttimeline)
        # start_time=start_date2.strftime("%H:%m")
        # print('confnum',confnum)
        # print('conftopass',conftopass)
        # print('start_date',start_date)

        timestart = ProgramDesign.objects.filter(conference=conftopass).values_list('timestart', flat=True)[0]
        timefinish = ProgramDesign.objects.filter(conference=conftopass).values_list('timefinish', flat=True)[0]
        mineventheight = ProgramDesign.objects.filter(conference=conftopass).values_list('mineventheight', flat=True)[0]
        heighthr = ProgramDesign.objects.filter(conference=conftopass).values_list('heighthr', flat=True)[0]
        minieventtime = ProgramDesign.objects.filter(conference=conftopass).values_list('minieventtime', flat=True)[0]
        opacity = ProgramDesign.objects.filter(conference=conftopass).values_list('opacity', flat=True)[0]

        if timefinish!=24 and timestart!=0:
            utc = pytz.utc
            utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
            utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

            # yesterday = datetime.today()
            # yesterday = yesterday.replace(hour=10)
            print('utcnow', utc_now_s, utc_now_f)

            # convert to UTC
            utc_date_time_s = utc_now_s.astimezone(local)
            # get time
            utc_time_s = utc_date_time_s.time()
            timestart = utc_date_time_s.hour

            utc_date_time_f = utc_now_f.astimezone(local)
            # get time
            utc_time_f = utc_date_time_f.time()
            timefinish = utc_date_time_f.hour

            if timestart > timefinish:
                timestart = 0
                timefinish = 24

            print('ts', timestart, timefinish,datetime.today()+shift)

        # for conf in conftopass:
        #   #print(conf['user'])
        stuff_for_frontend = {
            #'displaytutopart':displaytutopart,
            'start_date': start_date,
            'start_date2': start_date2,
            'starttimeline':starttimeline,
            'duration_time': duration_time,
            'end_date2': end_date2,
            'start_time': start_time,
            'confnum': confnum,
            'finished': finished,
            'started': started,
            'closed': closed,
            'timestart':timestart,
            'timefinish': timefinish,
            'mineventheight': mineventheight,
            'heighthr': heighthr,
            'minieventtime': minieventtime,
            'opacity': opacity/10.,
            'timezones': pytz.common_timezones,
            'currenttz': request.session.get('django_timezone', ''),  # request.session['django_timezone'],#ses,
            'today': datetime.today()#+shift
        }


        if Website.objects.filter(conference=conftopass):
            web = Website.objects.get(
                conference=conftopass)  # tbbbb attention si website pas cree ca merde, mettre un else
            # print('link',link)

            if conftopass.room_logo and web.share:
                from sorl.thumbnail import get_thumbnail
                # from sorl.thumbnail import delete

                imfb = get_thumbnail(conftopass.room_logo, '600x315', crop='center', quality=80)#450x298
                imtw = get_thumbnail(conftopass.room_logo, '450x236', crop='center', quality=80)

                # The Twitter card image with ratio 1.91: 1.: 450x236

                stuff_for_frontend.update({'imresizefb': imfb.url, 'imresizetw': imtw.url})

            abstract = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                   type__in=[1, 2, 3, 6]).order_by('user__last_name')  # .values_list('abstract', flat=True)
            # abstract = list(abstract)
            ##print('abs',abstract)

            cansee=0
            okforyou='0'
            if conftopass.whorecording == "Only conference participants" or conftopass.whorecording == "Everyone":
                if conftopass.whorecording == "Only conference participants":
                    cansee = 2

                if request.user.is_authenticated:
                    print('y1')
                    if conftopass.masterconf or conftopass.daughterconf:
                        print('y2')

                        parses = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,
                                                           masterconf=True).values_list('parsession', flat=True)[0]

                        if parses:
                            print('y3')

                            alloweduserstoseevideo = RegisterConf.objects.filter(conference__masterconfpass=conftopass.masterconfpass, user=request.user,
                                                                             status=1)
                        else:
                            print('y4')

                            alloweduserstoseevideo = RegisterConf.objects.filter(conference=conftopass,
                                                                                 user=request.user,
                                                                                 status=1)
                    else:
                        print('y5')

                        alloweduserstoseevideo = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                         status=1)
                    if alloweduserstoseevideo:
                        print('y6')

                        cansee = 0
                        okforyou='1'

            stuff_for_frontend.update({'cansee': cansee,'okforyou':okforyou})

            #print('nhjkfndkjgndfjlgndl')
            if conftopass.recording:
                #print('visio', conftopass.id)  # inayu
                #if conftopass.masterconf:
                #    visio = CreateVisio.objects.filter(conference__masterconfpass=conftopass.masterconfpass, testroom=False)
                #else:
                visio = CreateVisio.objects.filter(conference_id=conftopass.id, testroom=False)

                #visio = CreateVisio.objects.filter(conference_id=conftopass.id, testroom=False)
                # getnumberofdays = abs(end - start).days + 1
                mp4downloadurl = []
                url = []
                dateday = []
                start = []
                end = []
                tabid = []
                tabnum = []
                titles = []
                rights = []
                session = []
                redvimurl2= []

                #print('len', len(visio))
                passla = 0
                visiotest = 0
                lentot = 0
                publicvi=False
                for i in range(len(visio)):
                    #print('nopi', i)
                    idconf = visio[i].idconf
                    idrec = visio[i].recidconf
                    mp4 = visio[i].mp4_url
                    starte = visio[i].recstart
                    ende = visio[i].recend

                    if visio[i].vimeo_url:
                        #print('nopiz', i, visio[i].vimeo_url, mp4)

                        visiotest = 1
                        # mp4new = mp4.replace('[', '').replace(']', '').replace("'","")
                        # arr = mp4new.split(',')
                        #print('ici check', visio[i].vimeo_url)
                        vimurl2 = visio[i].vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                        arr2 = vimurl2.split(',')

                        #print('arr2',arr2)

                        startnew = starte.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arrs = startnew.split(',')
                        endnew = ende.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                        arre = endnew.split(',')

                        #print('mp4,idrec,idconf', mp4, idrec, idconf)
                        #print('arre,arrs', arre, arrs, starte, startnew)
                        lentot = lentot + len(arr2)
                        if visio[i].rectitles:
                            text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'",
                                                                                                 "")  # .replace(" ","")
                            titles2 = text2.split(',')
                            for k in range(len(titles2)):
                                titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'"))
                        else:
                            titles = [''] * lentot

                        if visio[i].rights:
                            print('aqua')
                            text22 = visio[i].rights.replace('[', '').replace(']', '').replace("'",
                                                                                                 "")  # .replace(" ","")
                            rights2 = text22.split(',')
                            for k in range(len(rights2)):
                                rights.append(rights2[k].lstrip())
                                print('no')
                                if rights2[k].lstrip() == "anybody":
                                    print('okpublicvi')
                                    publicvi=True
                        else:
                            if rights:
                                for k in range(len(arr2)):
                                    rights.append('')
                            else:
                                rights = [''] * lentot

                        for ij in range(len(arr2)):

                            if arr2[ij]:
                                redvimurl = arr2[ij].split('/')[2]
                                #print('redvim', redvimurl)
                                mp4_url = "https://vimeo.com/" + redvimurl
                                vim_play_url = "https://player.vimeo.com/video/" + redvimurl

                            dated = visio[i].date.strftime("%d-%m-%Y")  # https://player.vimeo.com/video/438127510
                            # gerer la front end car la on en passe qu'un
                            if idconf:
                                # api_url, headers = utils.connection('conferences/3e889798e61c')
                                # print('iiiii',idconf)
                                if idrec:
                                    # print('recording',idrec)
                                    # url.append('https://www.bigmarker.com/recordings/'+str(idrec)+'?width=400&height=600')
                                    url.append(vim_play_url)
                                    redvimurl2.append(redvimurl)
                                    session.append(visio[i].conference.title)
                                    tabid.append(idconf)  # json_list = simplejson.dumps(list)
                                    tabnum.append(str(ij))
                                    print('arrs check',arrs[ij],parse_datetime(arrs[ij]))
                                    start.append(parse_datetime(arrs[ij]))
                                    end.append(parse_datetime(arre[ij]))
                                    #print('tab', tabid, tabnum)
                                    #print('ola', parse_datetime(arrs[ij]), parse_datetime(arre[ij]))
                                    #print('start', arrs[ij], arre[ij])
                                    # start.append(datetime.strptime(arrs[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())
                                    # end.append(datetime.strptime(arre[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())

                                    # end.append(arre[ij])
                                    mp4downloadurl.append(mp4_url)
                                    ##print('gg',info['conference']['title'])
                                    title = conftopass.title  # info['conference']['title']
                                    dateday.append(dated)
                                    #start_time = start_date  # info['conference']['start_time']
                                    # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                                    # start_time = start_time.strftime("%d %B %Y at %H:%M")
                                    status = '0'
                                    

                                    #response = client.get('/me')  # ,params={"fields": "uri"})
                                    #print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                                    # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                                    #response = client.get('/videos/' + redvimurl, params={"fields": "uri,status"})
                                    # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                                    #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                    #print('ffnkjv', response.json()['status'])

                                    passla = 1
                                    #videostatus = response.json()['status']

                                # from django.utils import simplejson
                                #print('lasttab', tabid, tabnum, url, start, end, videostatus, titles)
                                # videostatus='avalaible'#finished



                                #start=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%dT%H:%M:%sZ"))
                                # Your list `lst` is sorted now.
                                #print(lst)

                                #end
                                #titles

                                #print('rights',rights)

                                stuff_for_frontend.update({
                                    'status': status,
                                    'publicvi':publicvi,
                                    'archiveurl': url,
                                    'redvimurl2': redvimurl2,
                                    'sessiontit':session,
                                    'tabid': tabid,  # json.dumps(tab),
                                    'tabnum': tabnum,
                                    'mp4downloadurl': mp4downloadurl,
                                    'start_time': dateday,
                                    'createvisioid': visio[0].id,
                                    'title': title,
                                    'titles': titles,
                                    'rights': rights,
                                    #'videostatus': videostatus,
                                    'start': start,
                                    'end': end
                                })



                            elif mp4 and not idrec and passla == 0:
                                #print('hjjk')
                                #print('mp4,idrec,idconf2', mp4, idrec, idconf)

                                # from celery.result import AsyncResult
                                # res = AsyncResult(x.task_id)
                                # res.ready()
                                # print('res', res, res.status, res.state)

                                stuff_for_frontend.update({
                                    'status': '2c',
                                    'title': conftopass.title,
                                    'createvisioid': visio[i].id
                                })
                            elif passla == 0:
                                #print('rrr')
                                if status != '2b':
                                    # print('pourtant0')
                                    stuff_for_frontend.update({
                                        'status': '2',
                                        'title': conftopass.title
                                    })
                            else:
                                #print('pourtant')
                                stuff_for_frontend.update({
                                    'status': '3',
                                    'title': conftopass.title
                                })



                    else:

                        if mp4:

                            visiotest = 1

                            #print('ah I see 5')

                            stuff_for_frontend.update({

                                'status': '2c',

                                'createvisioid': visio[i].id,

                                'title': conftopass.title

                            })

                        else:

                            #print('right')

                            if visiotest == 0:
                                #print('ah I see 2')

                                stuff_for_frontend.update({

                                    'status': '2',

                                    'createvisioid': visio[i].id,

                                    'title': conftopass.title

                                })
                if url:
                    # url=
                    # session
                    # start
                    # myList = [1, 2, 3, 100, 5]
                    #asorted = sorted(range(len(start)), key=start.__getitem__)

                    B = sorted(range(len(start)), key=lambda x: start[x])
                    asorted = sorted(range(len(start)), key=lambda x: B[x])

                    #print('indices',C)
                    #print('myl', asorted)
                    #print('arrssss', start)
                    # url = url[asorted]
                    url = [x for _, x in sorted(zip(asorted, url))]
                    redvimurl2 = [x for _, x in sorted(zip(asorted, redvimurl2))]

                    session = [x for _, x in sorted(zip(asorted, session))]
                    #print('end', end)
                    #print('zip(asorted, end)',list(zip(asorted, end)))
                    #print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                    #qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                    #les end sont pas bons de base, verifiez pk
                    #end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                    end = [x for y, x in sorted(zip(asorted, end))]

                    titles = [x for _, x in sorted(zip(asorted, titles))]
                    rights = [x for _, x in sorted(zip(asorted, rights))]

                    # sorted_arr2 = arr2[arr1inds[::-1]]
                    #print('url', url)
                    #print('session', session)
                    #print('end', end)
                    #print('titles', titles)

                    start.sort()

                    # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                    #print('arrssss2', start)
                    stuff_for_frontend.update({
                        'archiveurl': url,
                        'redvimurl2': redvimurl2,
                        'sessiontit': session,
                        'titles': titles,
                        'rights': rights,
                        # 'videostatus': videostatus,
                        'start': start,
                        'end': end
                    })
            emailabs=[]
            for abs in abstract:
                emailabss=abs.user.email.replace('@','_at_')
                emailabs.append(emailabss)

            if conftopass.poster:
                #print('oki')
                postere = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                      type=4).order_by('user__last_name')  # .values_list('abstract', flat=True)
                emailpos = []
                for pos in postere:
                    emailposs = pos.user.email.replace('@', '_at_')
                    emailpos.append(emailposs)
                #stuff_for_frontend.update({'postere': postere,'emailpos':emailpos})
                #print('poster', postere)

                idposters = []
                for pos in postere:
                    if pos.slides or pos.mp4_url:
                        idposters.append(pos.id)
                        #print('idpos', pos.id)

                randpos = 0
                if len(idposters)>0:
                    randpos = random.randint(0, len(idposters) - 1)
                    #print('randpos', randpos, random.randint(0, 0), len(idposters))

                stuff_for_frontend.update({'postere': postere,'emailpos':emailpos,'randpos':randpos,'idposters':idposters})

            organisers = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                     role=3).order_by('user__last_name')  # .values_list('abstract', flat=True)
            ##print(organisers,RegisterConf.objects.values('user'))
            org_list = [organisers.filter(user=item['user']).last() for item in
                        organisers.values('user').distinct()]
            # org_list=organisers
            # print('org',org_list)

            orguser=[]
            for o in org_list:
                orguser.append(o.user)

            peopleall = RegisterConf.objects.filter(conference=conftopass, status=1).order_by('user__last_name')
            # all_rows = people
            # Query against the full list to return a list of objects
            item_list = [peopleall.filter(user=item['user']).first() for item in
                         peopleall.values('user').distinct()]
            people = item_list

            emailpeople=[]
            for peopl in people:
                newemail=peopl.user.email.replace('@','_at_')
                emailpeople.append(newemail)

            peoplesoc = RegisterConf.objects.filter(conference=conftopass).order_by('user__last_name')
            # all_rows = people
            # Query against the full list to return a list of objects
            item_list2 = [peoplesoc.filter(user=item['user']).first() for item in
                          peoplesoc.values('user').distinct()]
            peoplesocloc = item_list2
            # print('socloceee',peoplesocloc)
            # people = People.objects.filter(conference=conftopass)#.values_list('firstname', flat=True)

            peopleinv = RegisterConf.objects.filter(conference=conftopass,status=1,type=1).order_by('user__last_name')
            # all_rows = people
            # Query against the full list to return a list of objects
            item_list3 = [peopleinv.filter(user=item['user']).first() for item in
                          peopleinv.values('user').distinct()]
            peopleinv = item_list3

            orga=False
            progorga=False
            for p in peoplesocloc:
                if p.socloc==1:
                    progorga=True
                if p.socloc==2:
                    orga=True

            talkcrea = False
            # idfirst = RegisterConf.objects.filter(conference=conftopass, user=request.user).values_list('id', flat=True)[0]
            ##print('idfi',idfirst)
            # if 1==1:
            if request.user.is_authenticated:
                hasalreadypaidd = False
                isfree = False

                ##print('user',request.user,RegisterConf.objects.filter(conference=conftopass, user=request.user))
                idfirst = -1
                if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                    # print('hereeee')
                    talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                    idfirst = RegisterConf.objects.filter(conference=conftopass, user=request.user).values_list('id', flat=True)[0]
                    #print('hereeee',idfirst,talks)
                    talkcrea = True
                    talksacc = RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1).order_by('user__last_name')

                    if talks[0].haspaid:
                        hasalreadypaidd = True

                    if talks[0].free:
                        isfree = True

                    stuff_for_frontend.update({
                        'talks': talks,
                        'talksacc': talksacc,
                        'paid': hasalreadypaidd,
                        'free': isfree,
                        'talkcrea': True
                    })

                if request.method == 'POST':
                    if link == 'home':
                        request.session['talk'] = ''

                    if request.POST.get('another'):
                        # print('another',request.POST.get('another'))
                        request.session['another'] = 'another'

                    if request.POST.get('another2'):
                        # print('another2',request.POST.get('another2'))
                        request.session['another2'] = 'another2'

                if request.method == 'POST':
                    if request.POST.get('tal'):
                        #print('je change', request.POST.get('tal'))
                        request.session['talk'] = request.POST.get('tal')
                        request.session['another'] = 'same'
                        request.session['another2'] = 'same2'

                if request.method == 'POST':
                    if request.POST.get('delete'):
                        if request.POST.get('talkid'):
                            print('talkid',request.POST.get('talkid'))
                            request.session['talk'] = request.POST.get('talkid')

                        if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                            #request.session.get('django_timezone', 'UTC')
                            if request.session.get('talk',''):
                                print('idfi',idfirst,request.session.get('talk',''))
                                if RegisterConf.objects.filter(id=request.session.get('talk',idfirst)).exists():
                                    item = RegisterConf.objects.get(id=request.session.get('talk',idfirst))
                                else:
                                    item = RegisterConf.objects.get(id=idfirst)

                            else:
                                item = RegisterConf.objects.get(id=idfirst)

                            if item.type == 4:  # if poster
                                with sessions.Session() as session:
                                    # delete the poster's chat room
                                    # print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                                    try:
                                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                            server_url='https://chat.carbonfreeconf.com',
                                                            session=session)
                                    except:
                                        subject = "Nooooooooo Rocket chat what????"
                                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                        emailto = []
                                        emailto.append("quentin.kral@gmail.com")
                                        emailto.append("carbonfreeconf@gmail.com")

                                        email = EmailMessage(
                                            subject,
                                            message,
                                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                            emailto,  # to
                                            # getemails,  # bcc
                                            # reply_to=replylist,
                                            headers={'Message-From': 'www.carbonfreeconf.com'},
                                        )
                                        email.content_subtype = "html"

                                        #email.send(fail_silently=False)

                                    # pprint(rocket.groups_list().json())
                                    # pprint(rocket.groups_list_all().json())

                                    
                                    slugtitleconf = slugify(str('%s' % (
                                            'poster_' + item.user.first_name + ' ' + item.user.last_name + '_' + item.title)))
                                    #print('slug', slugtitleconf)

                                    # pprint(rocket.groups_create(slugtitleconf).json())
                                    # pprint(rocket.groups_delete(slugtitleconf).json())
                                    pprint(rocket.groups_delete(group=slugtitleconf).json())
                                    # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                                    # def groups_rename(self, room_id, name, **kwargs):
                                    # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                                    rocket.logout()

                            item.delete()
                            messages.success(request, "Your participation was deleted.")

                            if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                                talkidprev = \
                                RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                    '-id').values_list('id', flat=True)[0]
                                request.session['talk'] = talkidprev
                            else:
                                talkcrea = False
                        else:
                            messages.warning(request, "No participation left to delete.")

                # if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get('another') and not request.POST.get('delete'):

                if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get(
                        'another') and not request.POST.get('delete') and not request.POST.get('titch') and not request.POST.get('progform'):
                    if not conftopass.poster:
                        regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False, is_noposter=True)
                    else:
                        regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False, is_noposter=False)

                    if regtalklight_form.is_valid():

                        if RegisterConf.objects.filter(conference=conftopass, user=request.user):

                            if request.session.get('another', '') == 'another':
                                # print('iccccc')
                                talkl = regtalklight_form.save(commit=False)
                                talkl.user = request.user
                                talkl.conference = conftopass
                                # talk.save()
                                request.session['another'] = 'same'
                            elif request.session.get('talk', ''):
                                #print('iccccc2', request.session['talk'])
                                talkl, createdtalkl = RegisterConf.objects.get_or_create(id=request.session['talk'],
                                                                                         defaults={})
                            else:
                                # print('iccccc3')
                                if idfirst > -1:
                                    talkl, createdtalkl = RegisterConf.objects.get_or_create(id=idfirst,
                                                                                             defaults={})
                                else:
                                    talkl, createdtalkl = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                             user=request.user,
                                                                                             defaults={})
                        else:
                            talkl, createdtalkl = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                     user=request.user,
                                                                                     defaults={})

                        talkl.type = regtalklight_form.cleaned_data['type']  # change field

                        if talkl.type == 5 and talkl.role != 1 and talkl.role != 3:
                            talkl.role = 2  #attendee
                        elif talkl.role != 1 and talkl.role != 3:
                            talkl.role = 0  #presenter

                        # look if other talks
                        regtalkotherr = RegisterConf.objects.filter(user=request.user, conference=conftopass).exclude(
                            id=talkl.id)
                        if regtalkotherr:
                            if regtalkotherr[0].free == True:
                                talkl.free = True

                        # look if other talks in other confs
                        if conftopass.daughterconf or conftopass.masterconf:
                            # papa
                            allconf = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).exclude(
                                id=conftopass.id)
                            for conf in allconf:
                                regtalkother = RegisterConf.objects.filter(user=request.user, conference=conf)
                                for talk in regtalkother:
                                    if talk.free == True:
                                        talkl.free = True

                        if talkl.type == 5:
                            talkl.title = 'Attendance only'

                        talkl.save()  # this will update only
                        messages.success(request,
                                         "The participation type was changed and your registration submitted (you can modify it if needed by clicking on the 'Resubmit my participation' button).")

                        request.session['talk'] = talkl.id
                        talkcrea = True
                        poster = False
                        attend = False
                        if talkl.type == 4:
                            poster = True
                        if talkl.type == 5:
                            attend = True

                        stattalk = False
                        if talkl.status == 1:
                            stattalk = True

                        typet=talkl.get_type_display

                        #print('typet',typet)

                        stuff_for_frontend.update({
                            'poster': poster,
                            'attend': attend,
                            'typet':typet,
                            'stattalk':stattalk
                        })

                    else:
                        print(regtalklight_form.errors)
                else:
                    if RegisterConf.objects.filter(conference=conftopass,
                                                   user=request.user) and not request.session.get('another',
                                                                                                  '') == 'another':
                        talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                        if request.session.get('talk', ''):
                            if RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                           id=request.session.get('talk', idfirst)).exists():
                                #print('idfirstt', idfirst, request.session.get('talk', idfirst))
                                talk = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                   id=request.session.get('talk', idfirst))[0]
                            else:
                                talk = RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]
                            #print('t', talk)
                        else:
                            talk = RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                        if not conftopass.poster:
                            regtalklight_form = RegisterConfLightForm(initial={'type': talk.type}, is_superuser=False,
                                                                      is_noposter=True)
                        else:
                            regtalklight_form = RegisterConfLightForm(initial={'type': talk.type}, is_superuser=False,
                                                                      is_noposter=False)

                        poster = False
                        attend = False
                        if talk.type == 4:
                            poster = True
                        if talk.type == 5:
                            attend = True

                        stattalk=False
                        if talk.status==1:
                            stattalk=True

                        typet=talk.get_type_display

                        #print('taa',talk.type)
                        #print('typet2',typet)

                        talkcrea = True
                        stuff_for_frontend.update({
                            'talks': talks,
                            'poster': poster,
                            'attend': attend,
                            'typet':typet,
                            'stattalk': stattalk
                        })
                    else:
                        messages.success(request, "Create your new participation now.")
                        if not conftopass.poster:
                            regtalklight_form = RegisterConfLightForm(is_superuser=False, is_noposter=True)
                        else:
                            regtalklight_form = RegisterConfLightForm(is_superuser=False, is_noposter=False)

                if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get(
                        'another') and not request.POST.get('delete') and not request.POST.get(
                        'typech') and not request.POST.get('addslides') and not request.POST.get('delslides') and not request.POST.get('cli') and not request.POST.get('progform'):



                    regtalk_form = RegisterConfForm(request.POST)
                    if regtalk_form.is_valid():

                        if RegisterConf.objects.filter(conference=conftopass, user=request.user):

                            oldtype = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                'id').values_list('type', flat=True)[0]
                            oldrole = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                'id').values_list('role', flat=True)[0]

                            if request.session.get('another', '') == 'another':
                                # print('iccccc')
                                talk = regtalk_form.save(commit=False)
                                talk.user = request.user
                                talk.conference = conftopass
                                # talk.save()
                                request.session['another'] = 'same'
                            elif request.session.get('talk', ''):
                                # print('iccccc2')
                                talk, createdtalk = RegisterConf.objects.get_or_create(id=request.session['talk'],
                                                                                       defaults={})
                            else:
                                # print('iccccc3')
                                if idfirst > -1:
                                    talk, createdtalk = RegisterConf.objects.get_or_create(id=idfirst,
                                                                                           defaults={})
                                else:
                                    talk, createdtalk = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                           user=request.user,
                                                                                           defaults={})

                            # talk.role=oldrole
                            # talk.type=oldtype

                        else:
                            talk, createdtalk = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                   user=request.user,
                                                                                   defaults={})
                        oldtitle = talk.title
                        # print('whattttt',regtalk_form.cleaned_data['title'])
                        if regtalk_form.cleaned_data['title'] == '':
                            #print('whattttt2')
                            talk.title = 'Your title'
                        else:
                            talk.title = regtalk_form.cleaned_data['title']  # change field
                        talk.abstract = regtalk_form.cleaned_data['abstract']  # change field
                        #print('tal',talk.abstract)
                        talk.biography = regtalk_form.cleaned_data['biography']  # change field

                        if conftopass.hybrid:
                            talk.facetoface = regtalk_form.cleaned_data['facetoface']  # change field

                        # let's do the type
                        if not conftopass.poster:
                            regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False,
                                                                      is_noposter=True)
                        else:
                            regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False,
                                                                      is_noposter=False)

                        if regtalklight_form.is_valid():
                            talk.type = regtalklight_form.cleaned_data['type']  # change field
                            # talk.abstract = regtalk_form.cleaned_data['abstract']  # change field
                            # talk.biography = regtalk_form.cleaned_data['biography']  # change field

                        else:
                            print('regtalklight_form.errors',regtalklight_form.errors)

                        if talk.type == 5 and talk.role != 1 and talk.role != 3:
                            talk.role = 2  # attendee
                        elif talk.role != 1 and talk.role != 3:
                            talk.role = 0  # presenter

                        # look if other talks
                        regtalkotherr = RegisterConf.objects.filter(user=request.user, conference=conftopass).exclude(
                            id=talk.id)
                        if regtalkotherr:
                            if regtalkotherr[0].free == True:
                                talk.free = True

                        # look if other talks in other confs
                        if conftopass.daughterconf or conftopass.masterconf:
                            # papa
                            allconf = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).exclude(
                                id=conftopass.id)
                            for conf in allconf:
                                regtalkother = RegisterConf.objects.filter(user=request.user, conference=conf)
                                for talke in regtalkother:
                                    if talke.free == True:
                                        talk.free = True

                        if talk.type == 5:
                            talk.title = 'Attendance only'

                        if talk.type == 4:  # if poster
                            with sessions.Session() as session:
                                # delete the poster's chat room
                                # print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                                try:
                                    rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                        server_url='https://chat.carbonfreeconf.com',
                                                        session=session)
                                except:
                                    subject = "Nooooooooo Rocket chat what????"
                                    message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                    # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                    emailto = []
                                    emailto.append("quentin.kral@gmail.com")
                                    emailto.append("carbonfreeconf@gmail.com")

                                    email = EmailMessage(
                                        subject,
                                        message,
                                        'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                        emailto,  # to
                                        # getemails,  # bcc
                                        # reply_to=replylist,
                                        headers={'Message-From': 'www.carbonfreeconf.com'},
                                    )
                                    email.content_subtype = "html"

                                    #email.send(fail_silently=False)

                                # pprint(rocket.groups_list().json())
                                # pprint(rocket.groups_list_all().json())

                                oldslugtitleconf = slugify(
                                    str('%s' % (
                                                'poster_' + talk.user.first_name + ' ' + talk.user.last_name + '_' + oldtitle)))
                                
                                slugtitleconf = slugify(
                                    str('%s' % (
                                                'poster_' + talk.user.first_name + ' ' + talk.user.last_name + '_' + talk.title)))
                                #print('oldslug,slug', oldslugtitleconf, slugtitleconf)

                                contentroom = rocket.groups_info(room_name=oldslugtitleconf).json()
                                pprint(contentroom)
                                if contentroom['success']:
                                    keyroom = contentroom['group']['_id']
                                    #print('keyroom', keyroom)

                                    # pprint(rocket.groups_create(slugtitleconf).json())
                                    # pprint(rocket.groups_delete(slugtitleconf).json())
                                    pprint(rocket.groups_rename(room_id=keyroom, name=slugtitleconf).json())
                                    # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                                    # def groups_rename(self, room_id, name, **kwargs):
                                    # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                                rocket.logout()

                        talk.save()  # this will update only
                        request.session['talk'] = talk.id
                        #talkcrea = True
                        messages.success(request, "Your participation was submitted.")

                        talkcrea = True
                        poster = False
                        attend = False
                        if talk.type == 4:
                            poster = True
                        if talk.type == 5:
                            attend = True

                        stattalk = False
                        if talk.status == 1:
                            stattalk = True

                        typet = talk.get_type_display

                        # print('typet',typet)

                        stuff_for_frontend.update({
                            'poster': poster,
                            'attend': attend,
                            'typet': typet,
                            'stattalk': stattalk
                        })

                        #lucas
                        if (talk.type != 5) and (talk.type != 7):
                            if conftopass.masterconf or conftopass.daughterconf:


                                if conftopass.daughterconf:
                                    subject = "Your participation to the session '" + conftopass.title + "' was submitted"

                                    message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                    masterctit=CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,masterconf=True).values_list('title',flat=True)[0]
                                    message += "You have just submitted a "+talk.get_type_display()+" to the session "+conftopass.title+" (part of the conference: "+masterctit+").<br><br>"
                                if conftopass.masterconf:
                                    subject = "Your participation to the Plenary session of the conference '" + conftopass.title + "' was submitted"

                                    message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                    message += "You have just submitted a "+talk.get_type_display()+" to the plenary session of the conference: "+conftopass.title+".<br><br>"


                            else:
                                subject = "Your participation to the conference '" + conftopass.title + "' was submitted"
                                message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                message += "You have just submitted a "+talk.get_type_display()+" to the conference: "+conftopass.title+".<br><br>"

                            message += "Your "+talk.get_type_display()+" is entitled: "+talk.title+".<br>"

                            if talk.type == 6:
                                message += "Your abstract is the following:<br>"
                                message += talk.abstract+"<br><br>"

                            message += "Your participation will now be reviewed by the organizers, which you can contact if you have any futher questions. "
                            message += "If you wish to do so, go to the conference website <a href='https://www.carbonfreeconf.com/website/" + str(conftopass.id) + "/contact'>here</a>.<br><br>"
                            message += "Kind regards,<br>"
                            message += "The CarbonFreeConf Team<br><br><br>"

                            emailto = []
                            emailto.append(talk.user.email)
                            #emailto.append("carbonfreeconf@gmail.com")

                            email = EmailMessage(
                                subject,
                                message,
                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                emailto,  # to
                                # getemails,  # bcc
                                # reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            email.content_subtype = "html"

                            email.send(fail_silently=False)
                        #if not UserLink.objects.filter(conference=conftopass, user=request.user):
                        #    userconf = CreateConf.objects.filter(id=confnum)[0]

                            # userconf=CreateConf.objects.filter(conference=conftopass).values_list('user', flat=True)[0]
                        #    userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conftopass,
                        #                                                            user=request.user,
                        #                                                            defaults={
                        #                                                                'mainuser': userconf.user})
                        #    userlink.save()

                    else:
                        print(regtalk_form.errors)
                else:
                    if RegisterConf.objects.filter(conference=conftopass,
                                                   user=request.user) and not request.session.get('another',
                                                                                                  '') == 'another' and not request.POST.get(
                            'addslides') and not request.POST.get('delslides'):
                        talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                        if idfirst > -1:
                            if request.session.get('talk', ''):
                                if RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                               id=request.session.get('talk', idfirst)).exists():

                                    # print('que?',request.session.get('talk',idfirst),idfirst,request.session.get('talk',''))
                                    talk = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                       id=request.session.get('talk', idfirst))[0]
                                else:
                                    talk = \
                                        RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                            else:
                                # print('quetal')
                                talk = \
                                RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                            if conftopass.hybrid:
                                regtalk_form = RegisterConfForm(
                                    initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography,'facetoface':talk.facetoface})
                            else:
                                regtalk_form = RegisterConfForm(
                                    initial={'title': talk.title, 'abstract': talk.abstract,
                                             'biography': talk.biography})
                        else:
                            regtalk_form = RegisterConfForm()

                        talkcrea = True
                        stuff_for_frontend.update({
                            'talks': talks
                        })
                    else:
                        regtalk_form = RegisterConfForm()

                if request.method == 'POST' and not request.POST.get('addslides') and request.POST.get('delslides'):
                    talkid = request.POST.get('talkidd')
                    regtalk2 = RegisterConf.objects.get(id=talkid)
                    visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                    data = regtalk2.slidesid
                    # print('datmil',data)
                    if data:
                        data2 = data.replace('[', '').replace(']', '').replace("'", "").split(',')
                        # print('datmila',data2)
                        datai = 0
                        if regtalk2.conference.roomtype == "Big Marker":
                            for vis in visio:
                                delslidesinfo = utils.delslidesfunc(data2[datai].strip(), vis.idconf)
                                datai = datai + 1

                                if delslidesinfo is None:
                                    # print('prob delslideinfo')
                                    stuff_for_frontend.update({
                                        'deleted': 0,
                                    })
                                else:
                                    print('delslidesinfo', delslidesinfo, delslidesinfo['success'])

                    if regtalk2.type == 4:  # if poster
                        with sessions.Session() as session:
                            # delete the poster's chat room
                            #print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                            try:
                                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                    server_url='https://chat.carbonfreeconf.com',
                                                    session=session)
                            except:
                                subject = "Nooooooooo Rocket chat what????"
                                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                emailto = []
                                emailto.append("quentin.kral@gmail.com")
                                emailto.append("carbonfreeconf@gmail.com")

                                email = EmailMessage(
                                    subject,
                                    message,
                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                    emailto,  # to
                                    # getemails,  # bcc
                                    # reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                email.content_subtype = "html"

                                #email.send(fail_silently=False)

                            # pprint(rocket.groups_list().json())
                            # pprint(rocket.groups_list_all().json())

                            slugtitleconf = slugify(str('%s' % ('poster_' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + '_' + regtalk2.title)))
                            #print('slug', slugtitleconf)

                            # pprint(rocket.groups_create(slugtitleconf).json())
                            # pprint(rocket.groups_delete(slugtitleconf).json())
                            pprint(rocket.groups_delete(group=slugtitleconf).json())
                            # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                            # def groups_rename(self, room_id, name, **kwargs):
                            # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                            rocket.logout()

                    regtalk2.slides.delete(save=True)

                    talkdel = int(request.POST.get('loop'))
                    # print('talkdel', talkdel)
                    stuff_for_frontend.update({
                        'talkdel': talkdel,
                    })

                if request.method == 'POST' and request.POST.get('addpaper'):
                    talkid = request.POST.get('talkidd')
                    # print('talkid',talkid,request.POST.get('addslides'))
                    articleurl_form = ArticleUrlForm(request.POST)
                    # check whether it's valid:
                    # print('slides')
                    if articleurl_form.is_valid():
                        # process the data in form.cleaned_data as required
                        # ...
                        # redirect to a new URL:
                        # regtalk2 = RegisterConf.objects.filter(conference=conftopass,id=talkid)[0]
                        regtalk2 = RegisterConf.objects.get(id=talkid)
                        print('regtalk2',regtalk2,articleurl_form.cleaned_data['paperurl'])
                        regtalk2.paperurl = articleurl_form.cleaned_data['paperurl']

                        regtalk2.save()
                    else:
                        print('aqui',talkid)
                        stuff_for_frontend.update({
                            'articleurl_err': int(talkid),
                        })
                else:
                    articleurl_form = ArticleUrlForm()

                stuff_for_frontend.update({
                    'articleurl_form': articleurl_form,
                })

                if request.method == 'POST' and request.POST.get('pubslides'):
                    talkid = request.POST.get('talkidd')
                    # print('talkid',talkid,request.POST.get('addslides'))

                    regtalk2 = RegisterConf.objects.get(id=talkid)
                    if regtalk2.slideshow:
                        regtalk2.slideshow = False
                    else:
                        regtalk2.slideshow = True

                    regtalk2.save()

                if request.method == 'POST' and request.POST.get('pub2slides'):
                    talkid = request.POST.get('talkidd')

                    regtalk2 = RegisterConf.objects.get(id=talkid)
                    print('talkid',talkid,regtalk2.mp4show)

                    if regtalk2.mp4show:
                        regtalk2.mp4show = False
                    else:
                        regtalk2.mp4show = True

                    regtalk2.save()

                if request.method == 'POST' and request.POST.get('addslides') and not request.POST.get('delslides'):
                    talkid = request.POST.get('talkidd')
                    # print('talkid',talkid,request.POST.get('addslides'))
                    slides_form = SlidesForm(request.POST)
                    # check whether it's valid:
                    # print('slides')
                    if slides_form.is_valid():
                        # process the data in form.cleaned_data as required
                        # ...
                        # redirect to a new URL:
                        # regtalk2 = RegisterConf.objects.filter(conference=conftopass,id=talkid)[0]
                        regtalk2 = RegisterConf.objects.get(id=talkid)

                        if regtalk2.slides:
                            # print('change slides so must delete first',regtalk2.slidesid)
                            visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                            data3 = regtalk2.slidesid
                            # print('datmil', data3)
                            if data3:
                                data2 = data3.replace('[', '').replace(']', '').replace("'", "").split(',')
                                print('datmila', data2)
                                if regtalk2.conference.roomtype == "Big Marker":
                                    datai = 0
                                    for vis in visio:
                                        delslidesinfo = utils.delslidesfunc(data2[datai].strip(), vis.idconf)
                                        datai = datai + 1

                            regtalk2.slides.delete(save=True)

                            # if delslidesinfo is None:
                            # print('prob delslideinfo2')
                            # else:
                            # print('delslidesinfo2', delslidesinfo, delslidesinfo['success'])

                        # print('bennon',regtalk2.title,request.FILES)
                        if 'slides' in request.FILES:  # t
                            # print('found it here iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')
                            getext = request.FILES['slides'].name.split('.')[-1]
                            #print('ext', getext)
                            if regtalk2.type == 4:
                                request.FILES['slides'].name = 'poster-' + str(
                                    regtalk2.id) + '-' + regtalk2.user.first_name + '-' + regtalk2.user.last_name + '.' + getext
                            else:
                                request.FILES['slides'].name = 'slide-' + str(
                                    regtalk2.id) + '-' + regtalk2.user.first_name + '-' + regtalk2.user.last_name + '.' + getext

                            regtalk2.slides = request.FILES['slides']
                            regtalk2.save()
                            # tbddd
                            base_url = "{0}://{1}".format(request.scheme, request.get_host())
                            # print('base',base_url)
                            data = {
                                "file_url": regtalk2.slides.url}  # room_logo to add mila base_url+regtalk2.slides.url
                            data = json.dumps(data)
                            # print('dat', data)
                            visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                            infoid = []
                            if regtalk2.conference.roomtype == "Big Marker":

                                for vis in visio:

                                    addslidesinfo = utils.addslidesfunc(data, vis.idconf)

                                    if addslidesinfo is None:
                                        # print('prob addslideinfo')
                                        stuff_for_frontend.update({
                                            'submitted': 0,
                                        })
                                    else:
                                        # print('addslidesinfo',addslidesinfo)
                                        # print('a',addslidesinfo['id'])
                                        infoid.append(addslidesinfo['id'])

                            regtalk2 = RegisterConf.objects.get(id=talkid)
                            regtalk2.slidesid = str(infoid)

                            if regtalk2.type == 4:  # if poster
                                with sessions.Session() as session:
                                    # create the poster's chat room

                                    try:
                                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                            server_url='https://chat.carbonfreeconf.com',
                                                            session=session)
                                    except:
                                        subject = "Nooooooooo Rocket chat what????"
                                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                        emailto = []
                                        emailto.append("quentin.kral@gmail.com")
                                        emailto.append("carbonfreeconf@gmail.com")

                                        email = EmailMessage(
                                            subject,
                                            message,
                                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                            emailto,  # to
                                            # getemails,  # bcc
                                            # reply_to=replylist,
                                            headers={'Message-From': 'www.carbonfreeconf.com'},
                                        )
                                        email.content_subtype = "html"

                                        #email.send(fail_silently=False)

                                    slugtitleconf = slugify(str('%s' % (
                                                'poster_' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + '_' + regtalk2.title)))
                                    #print('slug', slugtitleconf)
                                    pprint(rocket.groups_create(slugtitleconf).json())

                                    # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                                    contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                                    keyroom = contentroom['group']['_id']
                                    #print('keyroom', keyroom)
                                    pprint(rocket.groups_set_description(room_id=keyroom,
                                                                         description="Poster by " + regtalk2.user.first_name + ' ' + regtalk2.user.last_name).json())
                                    pprint(rocket.groups_set_topic(room_id=keyroom,
                                                                   topic=regtalk2.title).json())

                                    contentuser = rocket.users_info(username=request.user.username).json()
                                    key = contentuser['user']['_id']
                                    #print('keyo', key, keyroom)

                                    pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())

                                    # add moderators to a room tbbbbbbbbbbbbb
                                    modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
                                    #print(modo)

                                    # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):
                                    textmes = 'This is the room dedicated to the poster by ' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + ' whose ' \
                                                                                                                                                          'title is: ' + regtalk2.title + '. We encourage the poster presenter to record a voice message explaining their ' \
                                                                                                                                                                                          'poster to participants (just click on the microphone at the bottom right of the chat room). You can also record a video if needed. ' \
                                                                                                                                                                                          'Other participants can discuss with the presenter via chat or call them if needed (use the phone at the top right corner).'
                                    pprint(rocket.chat_post_message(text=textmes, room_id=keyroom).json())

                                    # def find_or_create_invite(self, rid, days, max_uses):

                                    invite = rocket.find_or_create_invite(rid=keyroom, days=0, max_uses=0).json()
                                    #print('invite', invite, invite['url'], invite['_id'])
                                    regtalk2.poster_invite_chat_url = "https://chat.carbonfreeconf.com/invite/" + \
                                                                      invite[
                                                                          '_id']  # invite['url'] that a go.rocket not iframable

                                    rocket.logout()

                                # regtalk2.poster_invite_chat_url="https://go.rocket.chat/room?host=chat.carbonfreeconf.com&rid="+keyroom#+"&path=channel/general"

                            regtalk2.save()

                            # save infoid list in database for delete

                            talksuc = int(request.POST.get('loop'))
                            # print('talksuc',talksuc)
                            stuff_for_frontend.update({
                                'talksuc': talksuc,
                            })
                        slides_form = SlidesForm()

                        # return HttpResponseRedirect('/thanks/')
                    # if a GET (or any other method) we'll create a blank form
                else:
                    slides_form = SlidesForm()

                stuff_for_frontend.update({
                    'slides_form': slides_form,
                })

                testbm = False
                if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                    # print('hereeee')
                    talkcrea = True

                    talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                    if talks[0].testvirtualroom == True:
                        testbm = True

                    talksub = []
                    for talk in talks:
                        if talk.slides:
                            talksub.append(1)
                        else:
                            talksub.append(0)

                    stuff_for_frontend.update({
                        'talks': talks,
                        'testbm': testbm,
                        'talksub': talksub
                    })
                stuff_for_frontend.update({
                    'regtalk_form': regtalk_form,
                })
                stuff_for_frontend.update({
                    'regtalklight_form': regtalklight_form,
                })


            confm = CreateConf.objects.filter(id=confnum)[0]
            #print('confm', confm, confm.masterconf)


            confa = CreateConf.objects.filter(masterconfpass=confm.masterconfpass,status__gt=0).order_by('masterconfdaughterposition')
            #print('confa',confa)



            participe=[]#False
            vali = []
            if request.user.is_authenticated:
                for i in range(len(confa)):
                    if RegisterConf.objects.filter(user=request.user, conference=confa[i]).exists():
                        participe.append(True)
                        if RegisterConf.objects.filter(user=request.user, conference=confa[i], status=1).exists():
                            vali.append(True)
                        else:
                            vali.append(False)
                    else:
                        participe.append(False)
                        vali.append(False)

                stuff_for_frontend.update({
                    'confa': confa,
                    'vali': vali,
                    'participe': participe})

            if confm.masterconf:
                #print('id', confm.masterconfpass)
                confd = CreateConf.objects.filter(masterconfpass=confm.masterconfpass, daughterconf=True, status__gt=0).order_by('masterconfdaughterposition')
                start_date = confm.start_date
                start_date = start_date.strftime("%Y-%m-%d")
                #print('confd', confd)
                start_date_daughter = []
                #participe=[]
                for i in range(len(confd)):
                    #print('cc', confd[i].start_date)
                    start_date_daughter.append(confd[i].start_date.strftime("%Y-%m-%d"))
                    #if request.user.is_authenticated:

                        #if RegisterConf.objects.filter(user=request.user,conference=confd[i],status=1).exists():
                       #     participe.append(True)
                       # else:
                        #    participe.append(False)


                stuff_for_frontend.update({'confds': confd,
                                           'confm': confm,
                                           #'confa': confa,
                                           #'participe': participe,
                                           #'participem': participem,
                                           'start_date': start_date,
                                           'start_date_daughter': start_date_daughter})

            if confm.daughterconf:
                confma = CreateConf.objects.filter(masterconfpass=confm.masterconfpass, masterconf=True)[0]
                stuff_for_frontend.update({'confma': confma})

            useblack = False
            colguide = "#223"
            if confm.website.color_background:
                if confm.website.color_background=='#000000':
                        #print('black')
                        valcol = int(confm.website.color_background.split('#')[1], 16) + int("A00000", 16)
                        valcol2 = int(confm.website.color_background.split('#')[1], 16) + int("246FFF", 16)
                        #print('valcode', valcol, int("1000", 16))
                        #print('valcode2', valcol2, int("50000", 16), hex(valcol2)[2:])
                        #print('#' + hex(valcol)[2:])
                        newval = '#' + hex(valcol)[2:]
                        newval2 = '#' + hex(valcol2)[2:]
                else:

                    coladd = "1000"
                    valcol = int(confm.website.color_background.split('#')[1], 16) + int("1000", 16)
                    valcol2 = int(confm.website.color_background.split('#')[1], 16) + int("8000", 16)
                    #print('valcode', valcol, int("1000", 16))
                    #print('valcode2', valcol2, int("50000", 16), hex(valcol2)[2:])
                    #print('#' + hex(valcol)[2:])
                    newval = '#' + hex(valcol)[2:]
                    newval2 = '#' + hex(valcol2)[2:]

                h = confm.website.color_background.lstrip('#')
                #print('RGB =', tuple(int(h[i:i + 2], 16) for i in (0, 2, 4)))
                tuplee=tuple(int(h[i:i + 2], 16) for i in (0, 2, 4))
                #print('ty',tuplee[0])
                #print('val', tuplee[0] * 0.299 + tuplee[1] * 0.587 + tuplee[2] * 0.114)

                if (tuplee[0] * 0.299 + tuplee[1] * 0.587 + tuplee[2] * 0.114) > 186:  # 000000 else use #ffffff
                    useblack=True
            #print('newval',newval,newval2,confm.website.color_background,int(confm.website.color_background.split('#')[1], 16))

            #check if accepted participation
            acc=False
            if request.user.is_authenticated:
                if confm.masterconf or confm.daughterconf:
                    #find masterconf
                    mastccc=CreateConf.objects.filter(masterconfpass=confm.masterconfpass, masterconf=True)[0]
                    if mastccc.parsession:
                        # print('id', confm.masterconfpass)
                        allpart=RegisterConf.objects.filter(conference__masterconfpass=confm.masterconfpass, user=request.user, status=1)
                    else:
                        allpart = RegisterConf.objects.filter(conference=confm, user=request.user, status=1)
                else:
                    allpart=RegisterConf.objects.filter(conference=confm,user=request.user,status=1)

                if allpart:
                    acc=True
                    print('True',allpart[0].title)

            #print('acc',acc)
            stuff_for_frontend.update({
                'conftopass': conftopass,
                'web': web,
                'acc':acc,
                'color_guide': newval,
                'color_guide2': newval2,
                'link': link,
                'people': people,
                'peopleinv': peopleinv,
                'emailpeop': emailpeople,
                'peoplesocloc': peoplesocloc,
                'orga':orga,
                'progorga':progorga,
                'abstract': abstract,
                'emailabs':emailabs,
                'organisers': org_list,
                'orguser': orguser,
                'talkcrea': talkcrea,
                'useblack':useblack
            })
        else:
            stuff_for_frontend.update({
                'status': 5
            })
    else:
        stuff_for_frontend = {'status': 6}

    return render(request, 'my_app/website.html', stuff_for_frontend)

@confirm_password
def fastregistration(request, confnum=None, link=None, linkcode=None):
    if CreateConf.objects.filter(id=confnum):

        conftopass = CreateConf.objects.filter(id=confnum)[0]
        start_date2 = CreateConf.objects.filter(id=confnum).values_list('start_date', flat=True)[0]
        end_date3 = CreateConf.objects.filter(id=confnum).values_list('end_date', flat=True)[0]
        fastpass = CreateConf.objects.filter(id=confnum).values_list('fastpass', flat=True)[0]

        print('fastpass',fastpass)
        print('linkcode',linkcode)

        if fastpass==linkcode:
            finished = 0
            if end_date3 < date.today():
                finished = 1

            visio = CreateVisio.objects.filter(conference__id=confnum, testroom=False).order_by('date')
            print('visio',visio)
            tzloc = request.session.get('django_timezone', 'UTC')  # request.session['django_timezone']
            local = pytz.timezone(tzloc)
            shift = visio[0].date.astimezone(local).replace(tzinfo=None) - visio[0].date.replace(tzinfo=None)
            start_time = visio[0].date + shift
            start_time = start_time.strftime("%H:%M")
            start_date = start_date2.strftime("%Y-%m-%d")
            start_date2 = (visio[0].date + shift).strftime("%A %d %b %Y (Starting at %I:%M %p)")  # strftime("%x %X")[:-3]
            end_date2 = (visio.last().date + timedelta(minutes=visio.last().duration) + shift).strftime(
                "%A %d %b %Y (Ending at %I:%M %p)")  # .strftime("%x %X")[:-3]
            dur = visio.last().date - visio[0].date + timedelta(minutes=visio.last().duration)
            ##print('durrrrrrrrrrrrrrrrr',dur.type)
            # duration_time = (dur-visio[0].date).strftime("%d day(s) %H hour(s) %M minute(s)")
            duration_time = time.gmtime(dur.total_seconds())  # .strftime("%d day(s) %H hour(s) %M minute(s)")
            if dur.total_seconds() > 24 * 60 * 60:
                duration_time = time.gmtime(dur.total_seconds() - 24 * 60 * 60)
                duration_time = time.strftime('%d days %H:%M', duration_time)
            else:
                duration_time = time.strftime('%H:%M', duration_time)

            # start_time=start_date2.strftime("%H:%m")
            # print('confnum',confnum)
            # print('conftopass',conftopass)
            # print('start_date',start_date)

            timestart = ProgramDesign.objects.filter(conference=conftopass).values_list('timestart', flat=True)[0]
            timefinish = ProgramDesign.objects.filter(conference=conftopass).values_list('timefinish', flat=True)[0]
            mineventheight = ProgramDesign.objects.filter(conference=conftopass).values_list('mineventheight', flat=True)[0]
            heighthr = ProgramDesign.objects.filter(conference=conftopass).values_list('heighthr', flat=True)[0]
            minieventtime = ProgramDesign.objects.filter(conference=conftopass).values_list('minieventtime', flat=True)[0]
            opacity = ProgramDesign.objects.filter(conference=conftopass).values_list('opacity', flat=True)[0]

            if timefinish!=24 and timestart!=0:
                utc = pytz.utc
                utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
                utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

                # yesterday = datetime.today()
                # yesterday = yesterday.replace(hour=10)
                print('utcnow', utc_now_s, utc_now_f)

                # convert to UTC
                utc_date_time_s = utc_now_s.astimezone(local)
                # get time
                utc_time_s = utc_date_time_s.time()
                timestart = utc_date_time_s.hour

                utc_date_time_f = utc_now_f.astimezone(local)
                # get time
                utc_time_f = utc_date_time_f.time()
                timefinish = utc_date_time_f.hour

                if timestart > timefinish:
                    timestart = 0
                    timefinish = 24

                print('ts', timestart, timefinish)

            # for conf in conftopass:
            #   #print(conf['user'])
            stuff_for_frontend = {
                'start_date': start_date,
                'start_date2': start_date2,
                'duration_time': duration_time,
                'end_date2': end_date2,
                'fastpass':fastpass,
                'start_time': start_time,
                'confnum': confnum,
                'finished': finished,
                'timestart':timestart,
                'timefinish': timefinish,
                'mineventheight': mineventheight,
                'heighthr': heighthr,
                'minieventtime': minieventtime,
                'opacity': opacity/10.,
                'timezones': pytz.common_timezones,
                'currenttz': request.session.get('django_timezone', ''),  # request.session['django_timezone'],#ses,
                'today': datetime.today()#+shift
            }


            if 1==1:#Website.objects.filter(conference=conftopass):
                #web = Website.objects.get(
                #    conference=conftopass)  # tbbbb attention si website pas cree ca merde, mettre un else
                # print('link',link)

                if conftopass.room_logo:# and web.share:
                    from sorl.thumbnail import get_thumbnail
                    # from sorl.thumbnail import delete

                    imfb = get_thumbnail(conftopass.room_logo, '600x315', crop='center', quality=80)#450x298
                    imtw = get_thumbnail(conftopass.room_logo, '450x236', crop='center', quality=80)

                    # The Twitter card image with ratio 1.91: 1.: 450x236

                    stuff_for_frontend.update({'imresizefb': imfb.url, 'imresizetw': imtw.url})

                abstract = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                       type__in=[1, 2, 3, 6]).order_by('user__last_name')  # .values_list('abstract', flat=True)
                # abstract = list(abstract)
                ##print('abs',abstract)

                cansee=0

                if conftopass.whorecording == "Only conference participants":

                    cansee = 2
                    if request.user.is_authenticated:
                        alloweduserstoseevideo = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                             status=1)
                        if alloweduserstoseevideo:
                            cansee = 0

                stuff_for_frontend.update({'cansee': cansee})

                #print('nhjkfndkjgndfjlgndl')
                if conftopass.recording:
                    #print('visio', conftopass.id)  # inayu
                    if conftopass.masterconf:
                        visio = CreateVisio.objects.filter(conference__masterconfpass=conftopass.masterconfpass, testroom=False)
                    else:
                        visio = CreateVisio.objects.filter(conference_id=conftopass.id, testroom=False)

                    #visio = CreateVisio.objects.filter(conference_id=conftopass.id, testroom=False)
                    # getnumberofdays = abs(end - start).days + 1
                    mp4downloadurl = []
                    url = []
                    dateday = []
                    start = []
                    end = []
                    tabid = []
                    tabnum = []
                    titles = []
                    session=[]

                    #print('len', len(visio))
                    passla = 0
                    visiotest = 0
                    lentot = 0
                    for i in range(len(visio)):
                        #print('nopi', i)
                        idconf = visio[i].idconf
                        idrec = visio[i].recidconf
                        mp4 = visio[i].mp4_url
                        starte = visio[i].recstart
                        ende = visio[i].recend

                        if visio[i].vimeo_url:
                            #print('nopiz', i, visio[i].vimeo_url, mp4)

                            visiotest = 1
                            # mp4new = mp4.replace('[', '').replace(']', '').replace("'","")
                            # arr = mp4new.split(',')
                            #print('ici check', visio[i].vimeo_url)
                            vimurl2 = visio[i].vimeo_url.replace('[', '').replace(']', '').replace("'", "")
                            arr2 = vimurl2.split(',')

                            #print('arr2',arr2)

                            startnew = starte.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                            arrs = startnew.split(',')
                            endnew = ende.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                            arre = endnew.split(',')

                            #print('mp4,idrec,idconf', mp4, idrec, idconf)
                            #print('arre,arrs', arre, arrs, starte, startnew)
                            lentot = lentot + len(arr2)
                            if visio[i].rectitles:
                                text2 = visio[i].rectitles.replace('[', '').replace(']', '').replace("'",
                                                                                                     "")  # .replace(" ","")
                                titles2 = text2.split(',')
                                for k in range(len(titles2)):
                                    titles.append(titles2[k].replace("#@&", ",").replace("($%£)", "'"))
                            else:
                                titles = [''] * lentot

                            for ij in range(len(arr2)):

                                if arr2[ij]:
                                    redvimurl = arr2[ij].split('/')[2]
                                    #print('redvim', redvimurl)
                                    mp4_url = "https://vimeo.com/" + redvimurl
                                    vim_play_url = "https://player.vimeo.com/video/" + redvimurl

                                dated = visio[i].date.strftime("%d-%m-%Y")  # https://player.vimeo.com/video/438127510
                                # gerer la front end car la on en passe qu'un
                                if idconf:
                                    # api_url, headers = utils.connection('conferences/3e889798e61c')
                                    # print('iiiii',idconf)
                                    if idrec:
                                        # print('recording',idrec)
                                        # url.append('https://www.bigmarker.com/recordings/'+str(idrec)+'?width=400&height=600')
                                        url.append(vim_play_url)
                                        session.append(visio[i].conference.title)
                                        tabid.append(idconf)  # json_list = simplejson.dumps(list)
                                        tabnum.append(str(ij))
                                        start.append(parse_datetime(arrs[ij]))
                                        end.append(parse_datetime(arre[ij]))
                                        #print('tab', tabid, tabnum)
                                        #print('ola', parse_datetime(arrs[ij]), parse_datetime(arre[ij]))
                                        #print('start', arrs[ij], arre[ij])
                                        # start.append(datetime.strptime(arrs[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())
                                        # end.append(datetime.strptime(arre[ij],"%Y-%m-%dT%H:%M:%S.%f%z"))#.date())

                                        # end.append(arre[ij])
                                        mp4downloadurl.append(mp4_url)
                                        ##print('gg',info['conference']['title'])
                                        title = conftopass.title  # info['conference']['title']
                                        dateday.append(dated)
                                        #start_time = start_date  # info['conference']['start_time']
                                        # start_time = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%SZ')
                                        # start_time = start_time.strftime("%d %B %Y at %H:%M")
                                        status = '0'
                                        

                                        #response = client.get('/me')  # ,params={"fields": "uri"})
                                        #print('ffnkjvndfkjvndfkjvbndfkj', response.json())
                                        # https: // api.vimeo.com / videos?links = https: // vimeo.com / 74648232, https: // vimeo.com / 232323497

                                        #response = client.get('/videos/' + redvimurl, params={"fields": "uri,status"})
                                        # response = client.get('/videos?uris='+visio[i].vimeo_url+'&fields=uri,link,name,description')#,params={"fields": "uri"})

                                        #print('ffnkjvndfkjvndfkjvbndfkj2', redvimurl, response.json())
                                        #print('ffnkjv', response.json()['status'])

                                        passla = 1
                                        #videostatus = response.json()['status']

                                    # from django.utils import simplejson
                                    #print('lasttab', tabid, tabnum, url, start, end, videostatus, titles)
                                    # videostatus='avalaible'#finished
                                    stuff_for_frontend.update({
                                        'status': status,
                                        'archiveurl': url,
                                        'sessiontit':session,
                                        'tabid': tabid,  # json.dumps(tab),
                                        'tabnum': tabnum,
                                        'mp4downloadurl': mp4downloadurl,
                                        'start_time': dateday,
                                        'createvisioid': visio[0].id,
                                        'title': title,
                                        'titles': titles,
                                        #'videostatus': videostatus,
                                        'start': start,
                                        'end': end
                                    })

                                elif mp4 and not idrec and passla == 0:
                                    #print('hjjk')
                                    #print('mp4,idrec,idconf2', mp4, idrec, idconf)

                                    # from celery.result import AsyncResult
                                    # res = AsyncResult(x.task_id)
                                    # res.ready()
                                    # print('res', res, res.status, res.state)

                                    stuff_for_frontend.update({
                                        'status': '2c',
                                        'title': conftopass.title,
                                        'createvisioid': visio[i].id
                                    })
                                elif passla == 0:
                                    #print('rrr')
                                    if status != '2b':
                                        # print('pourtant0')
                                        stuff_for_frontend.update({
                                            'status': '2',
                                            'title': conftopass.title
                                        })
                                else:
                                    #print('pourtant')
                                    stuff_for_frontend.update({
                                        'status': '3',
                                        'title': conftopass.title
                                    })


                        else:

                            if mp4:

                                visiotest = 1

                                #print('ah I see 5')

                                stuff_for_frontend.update({

                                    'status': '2c',

                                    'createvisioid': visio[i].id,

                                    'title': conftopass.title

                                })

                            else:

                                #print('right')

                                if visiotest == 0:
                                    #print('ah I see 2')

                                    stuff_for_frontend.update({

                                        'status': '2',

                                        'createvisioid': visio[i].id,

                                        'title': conftopass.title

                                    })
                        if url and i == len(visio) - 1:
                            # url=
                            # session
                            # start
                            # myList = [1, 2, 3, 100, 5]
                            # asorted = sorted(range(len(start)), key=start.__getitem__)

                            B = sorted(range(len(start)), key=lambda x: start[x])
                            asorted = sorted(range(len(start)), key=lambda x: B[x])

                            # print('indices',C)
                            #print('myl', asorted)
                            #print('start1', start)
                            # url = url[asorted]
                            url = [x for _, x in sorted(zip(asorted, url))]
                            # session = [x for _, x in sorted(zip(asorted, session))]
                            # print('end', end)
                            # print('zip(asorted, end)',list(zip(asorted, end)))
                            # print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                            # qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                            # les end sont pas bons de base, verifiez pk
                            # end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                            end = [x for y, x in sorted(zip(asorted, end))]

                            titles = [x for _, x in sorted(zip(asorted, titles))]

                            tabid = [x for _, x in sorted(zip(asorted, tabid))]
                            tabnum = [x for _, x in sorted(zip(asorted, tabnum))]

                            # sorted_arr2 = arr2[arr1inds[::-1]]
                            #print('url', url)
                            # print('session', session)
                            #print('end', end)
                            #print('titles', titles)
                            #print('tabid', tabid)
                            #print('tabnum', tabnum)

                            start.sort()

                            # arrs=start.sort(key=lambda x: datetime.strptime(x[0].split(',')[0], "%Y-%m-%d %H:%M:%S"))
                            #print('start2', start)
                            stuff_for_frontend.update({
                                'archiveurl': url,
                                # 'sessiontit': session,
                                'titles': titles,
                                'tabid': tabid,
                                'tabnum': tabnum,
                                # 'videostatus': videostatus,
                                'start': start,
                                'end': end
                            })
                emailabs=[]
                for abs in abstract:
                    emailabss=abs.user.email.replace('@','_at_')
                    emailabs.append(emailabss)

                if conftopass.poster:
                    #print('oki')
                    postere = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                          type=4).order_by('user__last_name')  # .values_list('abstract', flat=True)
                    emailpos = []
                    for pos in postere:
                        emailposs = pos.user.email.replace('@', '_at_')
                        emailpos.append(emailposs)
                    stuff_for_frontend.update({'postere': postere,'emailpos':emailpos})
                    #print('poster', postere)

                organisers = RegisterConf.objects.filter(conference=conftopass, status=1,
                                                         role=3).order_by('user__last_name')  # .values_list('abstract', flat=True)
                ##print(organisers,RegisterConf.objects.values('user'))
                org_list = [organisers.filter(user=item['user']).last() for item in
                            organisers.values('user').distinct()]
                # org_list=organisers
                # print('org',org_list)
                peopleall = RegisterConf.objects.filter(conference=conftopass, status=1).order_by('user__last_name')
                # all_rows = people
                # Query against the full list to return a list of objects
                item_list = [peopleall.filter(user=item['user']).first() for item in
                             peopleall.values('user').distinct()]
                people = item_list

                emailpeople=[]
                for peopl in people:
                    newemail=peopl.user.email.replace('@','_at_')
                    emailpeople.append(newemail)

                peoplesoc = RegisterConf.objects.filter(conference=conftopass).order_by('user__last_name')
                # all_rows = people
                # Query against the full list to return a list of objects
                item_list2 = [peoplesoc.filter(user=item['user']).first() for item in
                              peoplesoc.values('user').distinct()]
                peoplesocloc = item_list2
                # print('socloceee',peoplesocloc)
                # people = People.objects.filter(conference=conftopass)#.values_list('firstname', flat=True)

                orga=False
                progorga=False
                for p in peoplesocloc:
                    if p.socloc==1:
                        progorga=True
                    if p.socloc==2:
                        orga=True

                talkcrea = False
                # idfirst = RegisterConf.objects.filter(conference=conftopass, user=request.user).values_list('id', flat=True)[0]
                ##print('idfi',idfirst)
                # if 1==1:
                if request.user.is_authenticated:
                    hasalreadypaidd = False
                    isfree = False

                    ##print('user',request.user,RegisterConf.objects.filter(conference=conftopass, user=request.user))
                    idfirst = -1
                    if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                        # print('hereeee')
                        talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                        idfirst = RegisterConf.objects.filter(conference=conftopass, user=request.user).values_list('id', flat=True)[0]
                        #print('hereeee',idfirst,talks)
                        talkcrea = True
                        talksacc = RegisterConf.objects.filter(conference=conftopass, user=request.user, status=1).order_by('user__last_name')

                        if talks[0].haspaid:
                            hasalreadypaidd = True

                        if talks[0].free:
                            isfree = True

                        stuff_for_frontend.update({
                            'talks': talks,
                            'talksacc': talksacc,
                            'paid': hasalreadypaidd,
                            'free': isfree,
                            'talkcrea': True
                        })

                    if request.method == 'POST':
                        if link == 'home':
                            request.session['talk'] = ''

                        if request.POST.get('another'):
                            # print('another',request.POST.get('another'))
                            request.session['another'] = 'another'

                        if request.POST.get('another2'):
                            # print('another2',request.POST.get('another2'))
                            request.session['another2'] = 'another2'

                    if request.method == 'POST':
                        if request.POST.get('tal'):
                            #print('je change', request.POST.get('tal'))
                            request.session['talk'] = request.POST.get('tal')
                            request.session['another'] = 'same'
                            request.session['another2'] = 'same2'

                    if request.method == 'POST':
                        if request.POST.get('delete'):
                            if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                                #request.session.get('django_timezone', 'UTC')
                                if request.session.get('talk',''):
                                    #print('idfi',idfirst,request.session.get('talk',''))
                                    if RegisterConf.objects.filter(id=request.session.get('talk',idfirst)).exists():
                                        item = RegisterConf.objects.get(id=request.session.get('talk',idfirst))
                                    else:
                                        item = RegisterConf.objects.get(id=idfirst)

                                else:
                                    item = RegisterConf.objects.get(id=idfirst)

                                if item.type == 4:  # if poster
                                    with sessions.Session() as session:
                                        # delete the poster's chat room
                                        # print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                                        try:
                                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                                server_url='https://chat.carbonfreeconf.com',
                                                                session=session)
                                        except:
                                            subject = "Nooooooooo Rocket chat what????"
                                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                            emailto = []
                                            emailto.append("quentin.kral@gmail.com")
                                            emailto.append("carbonfreeconf@gmail.com")

                                            email = EmailMessage(
                                                subject,
                                                message,
                                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                                emailto,  # to
                                                # getemails,  # bcc
                                                # reply_to=replylist,
                                                headers={'Message-From': 'www.carbonfreeconf.com'},
                                            )
                                            email.content_subtype = "html"

                                            #email.send(fail_silently=False)

                                        # pprint(rocket.groups_list().json())
                                        # pprint(rocket.groups_list_all().json())

                                        slugtitleconf = slugify(str('%s' % (
                                                'poster_' + item.user.first_name + ' ' + item.user.last_name + '_' + item.title)))
                                        #print('slug', slugtitleconf)

                                        # pprint(rocket.groups_create(slugtitleconf).json())
                                        # pprint(rocket.groups_delete(slugtitleconf).json())
                                        pprint(rocket.groups_delete(group=slugtitleconf).json())
                                        # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                                        # def groups_rename(self, room_id, name, **kwargs):
                                        # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                                        rocket.logout()

                                item.delete()
                                messages.success(request, "Your participation was deleted.")

                                if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                                    talkidprev = \
                                    RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                        '-id').values_list('id', flat=True)[0]
                                    request.session['talk'] = talkidprev
                                else:
                                    talkcrea = False
                            else:
                                messages.warning(request, "No participation left to delete.")

                    # if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get('another') and not request.POST.get('delete'):

                    if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get(
                            'another') and not request.POST.get('delete') and not request.POST.get('titch') and not request.POST.get('progform'):
                        if not conftopass.poster:
                            regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False, is_noposter=True)
                        else:
                            regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False, is_noposter=False)

                        if regtalklight_form.is_valid():

                            if RegisterConf.objects.filter(conference=conftopass, user=request.user):

                                if request.session.get('another', '') == 'another':
                                    # print('iccccc')
                                    talkl = regtalklight_form.save(commit=False)
                                    talkl.user = request.user
                                    talkl.conference = conftopass
                                    # talk.save()
                                    request.session['another'] = 'same'
                                elif request.session.get('talk', ''):
                                    #print('iccccc2', request.session['talk'])
                                    talkl, createdtalkl = RegisterConf.objects.get_or_create(id=request.session['talk'],
                                                                                             defaults={})
                                else:
                                    # print('iccccc3')
                                    if idfirst > -1:
                                        talkl, createdtalkl = RegisterConf.objects.get_or_create(id=idfirst,
                                                                                                 defaults={})
                                    else:
                                        talkl, createdtalkl = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                                 user=request.user,
                                                                                                 defaults={})
                            else:
                                talkl, createdtalkl = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                         user=request.user,
                                                                                         defaults={})

                            talkl.type = regtalklight_form.cleaned_data['type']  # change field
                            # talk.abstract = regtalk_form.cleaned_data['abstract']  # change field
                            # talk.biography = regtalk_form.cleaned_data['biography']  # change field

                            if talkl.type == 5 and talkl.role != 1 and talkl.role != 3:
                                talkl.role = 2
                            elif talkl.role != 1 and talkl.role != 3:
                                talkl.role = 0

                            # look if other talks
                            regtalkotherr = RegisterConf.objects.filter(user=request.user, conference=conftopass).exclude(
                                id=talkl.id)
                            if regtalkotherr:
                                if regtalkotherr[0].free == True:
                                    talkl.free = True

                            # look if other talks in other confs
                            if conftopass.daughterconf or conftopass.masterconf:
                                # papa
                                allconf = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).exclude(
                                    id=conftopass.id)
                                for conf in allconf:
                                    regtalkother = RegisterConf.objects.filter(user=request.user, conference=conf)
                                    for talk in regtalkother:
                                        if talk.free == True:
                                            talkl.free = True

                            if talkl.type == 5:
                                talkl.title = 'Attendance only'

                            talkl.save()  # this will update only
                            messages.success(request,
                                             "The participation type was changed and your registration submitted (you can modify it if needed by clicking on the 'Resubmit my participation' button).")

                            request.session['talk'] = talkl.id
                            talkcrea = True
                            poster = False
                            attend = False
                            if talkl.type == 4:
                                poster = True
                            if talkl.type == 5:
                                attend = True

                            stattalk = False
                            if talkl.status == 1:
                                stattalk = True

                            typet=talkl.get_type_display

                            #print('typet',typet)

                            stuff_for_frontend.update({
                                'poster': poster,
                                'attend': attend,
                                'typet':typet,
                                'stattalk':stattalk
                            })

                        else:
                            print(regtalklight_form.errors)
                    else:
                        if RegisterConf.objects.filter(conference=conftopass,
                                                       user=request.user) and not request.session.get('another',
                                                                                                      '') == 'another':
                            talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                            if request.session.get('talk', ''):
                                if RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                               id=request.session.get('talk', idfirst)).exists():
                                    #print('idfirstt', idfirst, request.session.get('talk', idfirst))
                                    talk = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                       id=request.session.get('talk', idfirst))[0]
                                else:
                                    talk = RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]
                                #print('t', talk)
                            else:
                                talk = RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                            if not conftopass.poster:
                                regtalklight_form = RegisterConfLightForm(initial={'type': talk.type}, is_superuser=False,
                                                                          is_noposter=True)
                            else:
                                regtalklight_form = RegisterConfLightForm(initial={'type': talk.type}, is_superuser=False,
                                                                          is_noposter=False)

                            poster = False
                            attend = False
                            if talk.type == 4:
                                poster = True
                            if talk.type == 5:
                                attend = True

                            stattalk=False
                            if talk.status==1:
                                stattalk=True

                            typet=talk.get_type_display

                            #print('taa',talk.type)
                            #print('typet2',typet)

                            talkcrea = True
                            stuff_for_frontend.update({
                                'talks': talks,
                                'poster': poster,
                                'attend': attend,
                                'typet':typet,
                                'stattalk': stattalk
                            })
                        else:
                            messages.success(request, "Create your new participation now.")
                            if not conftopass.poster:
                                regtalklight_form = RegisterConfLightForm(is_superuser=False, is_noposter=True)
                            else:
                                regtalklight_form = RegisterConfLightForm(is_superuser=False, is_noposter=False)

                    if request.method == 'POST' and not request.POST.get('tal') and not request.POST.get(
                            'another') and not request.POST.get('delete') and not request.POST.get(
                            'typech') and not request.POST.get('addslides') and not request.POST.get('delslides') and not request.POST.get('cli') and not request.POST.get('progform'):
                        regtalk_form = RegisterConfForm(request.POST)
                        if regtalk_form.is_valid():

                            if RegisterConf.objects.filter(conference=conftopass, user=request.user):

                                oldtype = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                    'id').values_list('type', flat=True)[0]
                                oldrole = RegisterConf.objects.filter(conference=conftopass, user=request.user).order_by(
                                    'id').values_list('role', flat=True)[0]

                                if request.session.get('another', '') == 'another':
                                    # print('iccccc')
                                    talk = regtalk_form.save(commit=False)
                                    talk.user = request.user
                                    talk.conference = conftopass
                                    # talk.save()
                                    request.session['another'] = 'same'
                                elif request.session.get('talk', ''):
                                    # print('iccccc2')
                                    talk, createdtalk = RegisterConf.objects.get_or_create(id=request.session['talk'],
                                                                                           defaults={})
                                else:
                                    # print('iccccc3')
                                    if idfirst > -1:
                                        talk, createdtalk = RegisterConf.objects.get_or_create(id=idfirst,
                                                                                               defaults={})
                                    else:
                                        talk, createdtalk = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                               user=request.user,
                                                                                               defaults={})

                                # talk.role=oldrole
                                # talk.type=oldtype

                            else:
                                talk, createdtalk = RegisterConf.objects.get_or_create(conference=conftopass,
                                                                                       user=request.user,
                                                                                       defaults={})
                            oldtitle = talk.title
                            # print('whattttt',regtalk_form.cleaned_data['title'])
                            if regtalk_form.cleaned_data['title'] == '':
                                #print('whattttt2')
                                talk.title = 'Your title'
                            else:
                                talk.title = regtalk_form.cleaned_data['title']  # change field
                            talk.abstract = regtalk_form.cleaned_data['abstract']  # change field
                            print('tal',talk.abstract)
                            talk.biography = regtalk_form.cleaned_data['biography']  # change field
                            if conftopass.hybrid:
                                talk.facetoface = regtalk_form.cleaned_data['facetoface']  # change field

                            # let's do the type
                            if not conftopass.poster:
                                regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False,
                                                                          is_noposter=True)
                            else:
                                regtalklight_form = RegisterConfLightForm(request.POST, is_superuser=False,
                                                                          is_noposter=False)

                            if regtalklight_form.is_valid():
                                talk.type = regtalklight_form.cleaned_data['type']  # change field
                                # talk.abstract = regtalk_form.cleaned_data['abstract']  # change field
                                # talk.biography = regtalk_form.cleaned_data['biography']  # change field

                            else:
                                print('regtalklight_form.errors', regtalklight_form.errors)

                            if talk.type == 5 and talk.role != 1 and talk.role != 3:
                                talk.role = 2  # attendee
                            elif talk.role != 1 and talk.role != 3:
                                talk.role = 0  # presenter

                            # look if other talks
                            regtalkotherr = RegisterConf.objects.filter(user=request.user, conference=conftopass).exclude(
                                id=talk.id)
                            if regtalkotherr:
                                if regtalkotherr[0].free == True:
                                    talk.free = True

                            # look if other talks in other confs
                            if conftopass.daughterconf or conftopass.masterconf:
                                # papa
                                allconf = CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass).exclude(
                                    id=conftopass.id)
                                for conf in allconf:
                                    regtalkother = RegisterConf.objects.filter(user=request.user, conference=conf)
                                    for talke in regtalkother:
                                        if talke.free == True:
                                            talk.free = True

                            if talk.type == 5:
                                talk.title = 'Attendance only'

                            if talk.type == 4:  # if poster
                                with sessions.Session() as session:
                                    # delete the poster's chat room
                                    # print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                                    try:
                                        rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                            server_url='https://chat.carbonfreeconf.com',
                                                            session=session)
                                    except:
                                        subject = "Nooooooooo Rocket chat what????"
                                        message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                        # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                        emailto = []
                                        emailto.append("quentin.kral@gmail.com")
                                        emailto.append("carbonfreeconf@gmail.com")

                                        email = EmailMessage(
                                            subject,
                                            message,
                                            'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                            emailto,  # to
                                            # getemails,  # bcc
                                            # reply_to=replylist,
                                            headers={'Message-From': 'www.carbonfreeconf.com'},
                                        )
                                        email.content_subtype = "html"

                                        #email.send(fail_silently=False)

                                    # pprint(rocket.groups_list().json())
                                    # pprint(rocket.groups_list_all().json())

                                    oldslugtitleconf = slugify(
                                        str('%s' % ('poster_' + talk.user.first_name + ' ' + talk.user.last_name + '_' + oldtitle)))
                                    slugtitleconf = slugify(
                                        str('%s' % ('poster_' + talk.user.first_name + ' ' + talk.user.last_name + '_' + talk.title)))
                                    #print('oldslug,slug', oldslugtitleconf, slugtitleconf)

                                    contentroom = rocket.groups_info(room_name=oldslugtitleconf).json()
                                    pprint(contentroom)
                                    if contentroom['success']:
                                        keyroom = contentroom['group']['_id']
                                        #print('keyroom', keyroom)

                                        # pprint(rocket.groups_create(slugtitleconf).json())
                                        # pprint(rocket.groups_delete(slugtitleconf).json())
                                        pprint(rocket.groups_rename(room_id=keyroom, name=slugtitleconf).json())
                                        # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                                        # def groups_rename(self, room_id, name, **kwargs):
                                        # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                                    rocket.logout()

                            talk.save()  # this will update only
                            request.session['talk'] = talk.id
                            #talkcrea = True
                            messages.success(request, "Your participation was submitted.")

                            talkcrea = True
                            poster = False
                            attend = False
                            if talk.type == 4:
                                poster = True
                            if talk.type == 5:
                                attend = True

                            stattalk = False
                            if talk.status == 1:
                                stattalk = True

                            typet = talk.get_type_display

                            # print('typet',typet)

                            stuff_for_frontend.update({
                                'poster': poster,
                                'attend': attend,
                                'typet': typet,
                                'stattalk': stattalk
                            })
                            #lucas
                            if (talk.type != 5) and (talk.type != 7):
                                if conftopass.masterconf or conftopass.daughterconf:


                                    if conftopass.daughterconf:
                                        subject = "Your participation to the session '" + conftopass.title + "' was submitted"

                                        message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                        masterctit=CreateConf.objects.filter(masterconfpass=conftopass.masterconfpass,masterconf=True).values_list('title',flat=True)[0]
                                        message += "You have just submitted a "+talk.get_type_display()+" to the session "+conftopass.title+" (part of the conference: "+masterctit+").<br><br>"
                                    if conftopass.masterconf:
                                        subject = "Your participation to the Plenary session of the conference '" + conftopass.title + "' was submitted"

                                        message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                        message += "You have just submitted a "+talk.get_type_display()+" to the plenary session of the conference: "+conftopass.title+".<br><br>"


                                else:
                                    subject = "Your participation to the conference '" + conftopass.title + "' was submitted"
                                    message = "Dear " + talk.user.first_name + " " + talk.user.last_name + ",<br><br>"
                                    message += "You have just submitted a "+talk.get_type_display()+" to the conference: "+conftopass.title+".<br><br>"

                                message += "Your "+talk.get_type_display()+" is entitled: "+talk.title+".<br>"

                                if talk.type == 6:
                                    message += "Your abstract is the following:<br>"
                                    message += talk.abstract+"<br><br>"

                                message += "Your participation will now be reviewed by the organizers, which you can contact if you have any futher questions. "
                                message += "If you wish to do so, go to the conference website <a href='https://www.carbonfreeconf.com/website/" + str(conftopass.id) + "/contact'>here</a>.<br><br>"
                                message += "Kind regards,<br>"
                                message += "The CarbonFreeConf Team<br><br><br>"

                                emailto = []
                                emailto.append(talk.user.email)
                                #emailto.append("carbonfreeconf@gmail.com")

                                email = EmailMessage(
                                    subject,
                                    message,
                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                    emailto,  # to
                                    # getemails,  # bcc
                                    # reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                email.content_subtype = "html"

                                email.send(fail_silently=False)
                            #if not UserLink.objects.filter(conference=conftopass, user=request.user):
                            #    userconf = CreateConf.objects.filter(id=confnum)[0]

                                # userconf=CreateConf.objects.filter(conference=conftopass).values_list('user', flat=True)[0]
                            #    userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conftopass,
                            #                                                            user=request.user,
                            #                                                            defaults={
                            #                                                                'mainuser': userconf.user})
                            #    userlink.save()

                        else:
                            print(regtalk_form.errors)
                    else:
                        if RegisterConf.objects.filter(conference=conftopass,
                                                       user=request.user) and not request.session.get('another',
                                                                                                      '') == 'another' and not request.POST.get(
                                'addslides') and not request.POST.get('delslides'):
                            talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                            if idfirst > -1:
                                if request.session.get('talk', ''):
                                    if RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                   id=request.session.get('talk', idfirst)).exists():

                                        # print('que?',request.session.get('talk',idfirst),idfirst,request.session.get('talk',''))
                                        talk = RegisterConf.objects.filter(conference=conftopass, user=request.user,
                                                                           id=request.session.get('talk', idfirst))[0]
                                    else:
                                        talk = \
                                            RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                                else:
                                    # print('quetal')
                                    talk = \
                                    RegisterConf.objects.filter(conference=conftopass, user=request.user, id=idfirst)[0]

                                if conftopass.hybrid:
                                    regtalk_form = RegisterConfForm(
                                        initial={'title': talk.title, 'abstract': talk.abstract, 'biography': talk.biography,'facetoface':talk.facetoface})
                                else:
                                    regtalk_form = RegisterConfForm(
                                        initial={'title': talk.title, 'abstract': talk.abstract,
                                                 'biography': talk.biography})
                            else:
                                regtalk_form = RegisterConfForm()

                            talkcrea = True
                            stuff_for_frontend.update({
                                'talks': talks
                            })
                        else:
                            regtalk_form = RegisterConfForm()

                    if request.method == 'POST' and not request.POST.get('addslides') and request.POST.get('delslides'):
                        talkid = request.POST.get('talkidd')
                        regtalk2 = RegisterConf.objects.get(id=talkid)
                        visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                        data = regtalk2.slidesid
                        # print('datmil',data)
                        if data:
                            data2 = data.replace('[', '').replace(']', '').replace("'", "").split(',')
                            # print('datmila',data2)
                            datai = 0
                            if regtalk2.conference.roomtype == "Big Marker":
                                for vis in visio:
                                    delslidesinfo = utils.delslidesfunc(data2[datai].strip(), vis.idconf)
                                    datai = datai + 1

                                    if delslidesinfo is None:
                                        # print('prob delslideinfo')
                                        stuff_for_frontend.update({
                                            'deleted': 0,
                                        })
                                    else:
                                        print('delslidesinfo', delslidesinfo, delslidesinfo['success'])

                        if regtalk2.type == 4:  # if poster
                            with sessions.Session() as session:
                                # delete the poster's chat room
                                #print('hkdjfhdkjfbdkhbfdhkbfdjhbfdjhbfdjhfbshd')
                                try:
                                    rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                        server_url='https://chat.carbonfreeconf.com',
                                                        session=session)
                                except:
                                    subject = "Nooooooooo Rocket chat what????"
                                    message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                    # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                    emailto = []
                                    emailto.append("quentin.kral@gmail.com")
                                    emailto.append("carbonfreeconf@gmail.com")

                                    email = EmailMessage(
                                        subject,
                                        message,
                                        'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                        emailto,  # to
                                        # getemails,  # bcc
                                        # reply_to=replylist,
                                        headers={'Message-From': 'www.carbonfreeconf.com'},
                                    )
                                    email.content_subtype = "html"

                                    #email.send(fail_silently=False)

                                # pprint(rocket.groups_list().json())
                                # pprint(rocket.groups_list_all().json())

                                slugtitleconf = slugify(
                                    str('%s' % ('poster_' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + '_' + regtalk2.title)))
                                #print('slug', slugtitleconf)

                                # pprint(rocket.groups_create(slugtitleconf).json())
                                # pprint(rocket.groups_delete(slugtitleconf).json())
                                pprint(rocket.groups_delete(group=slugtitleconf).json())
                                # pprint(rocket.groups_info(room_id='MHNiqxjd9ksGuPxZR').json())

                                # def groups_rename(self, room_id, name, **kwargs):
                                # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):

                                rocket.logout()

                        regtalk2.slides.delete(save=True)

                        talkdel = int(request.POST.get('loop'))
                        # print('talkdel', talkdel)
                        stuff_for_frontend.update({
                            'talkdel': talkdel,
                        })

                    if request.method == 'POST' and request.POST.get('addslides') and not request.POST.get('delslides'):
                        talkid = request.POST.get('talkidd')
                        # print('talkid',talkid,request.POST.get('addslides'))
                        slides_form = SlidesForm(request.POST)
                        # check whether it's valid:
                        # print('slides')
                        if slides_form.is_valid():
                            # process the data in form.cleaned_data as required
                            # ...
                            # redirect to a new URL:
                            # regtalk2 = RegisterConf.objects.filter(conference=conftopass,id=talkid)[0]
                            regtalk2 = RegisterConf.objects.get(id=talkid)

                            if regtalk2.slides:
                                # print('change slides so must delete first',regtalk2.slidesid)
                                visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                                data3 = regtalk2.slidesid
                                # print('datmil', data3)
                                if data3:
                                    data2 = data3.replace('[', '').replace(']', '').replace("'", "").split(',')
                                    # print('datmila', data2)
                                    if regtalk2.conference.roomtype == "Big Marker":
                                        datai = 0
                                        for vis in visio:
                                            delslidesinfo = utils.delslidesfunc(data2[datai].strip(), vis.idconf)
                                            datai = datai + 1
                                regtalk2.slides.delete(save=True)

                                # if delslidesinfo is None:
                                # print('prob delslideinfo2')
                                # else:
                                # print('delslidesinfo2', delslidesinfo, delslidesinfo['success'])

                            # print('bennon',regtalk2.title,request.FILES)
                            if 'slides' in request.FILES:  # t
                                # print('found it here iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')
                                getext = request.FILES['slides'].name.split('.')[-1]
                                #print('ext', getext)
                                if regtalk2.type == 4:
                                    request.FILES['slides'].name = 'poster-' + str(
                                        regtalk2.id) + '-' + regtalk2.user.first_name + '-' + regtalk2.user.last_name + '.' + getext
                                else:
                                    request.FILES['slides'].name = 'slide-' + str(
                                        regtalk2.id) + '-' + regtalk2.user.first_name + '-' + regtalk2.user.last_name + '.' + getext

                                regtalk2.slides = request.FILES['slides']
                                regtalk2.save()
                                # tbddd
                                base_url = "{0}://{1}".format(request.scheme, request.get_host())
                                # print('base',base_url)
                                data = {
                                    "file_url": regtalk2.slides.url}  # room_logo to add mila base_url+regtalk2.slides.url
                                data = json.dumps(data)
                                # print('dat', data)
                                visio = CreateVisio.objects.filter(conference=regtalk2.conference, testroom=False)
                                infoid = []
                                if regtalk2.conference.roomtype == "Big Marker":

                                    for vis in visio:

                                        addslidesinfo = utils.addslidesfunc(data, vis.idconf)

                                        if addslidesinfo is None:
                                            # print('prob addslideinfo')
                                            stuff_for_frontend.update({
                                                'submitted': 0,
                                            })
                                        else:
                                            # print('addslidesinfo',addslidesinfo)
                                            # print('a',addslidesinfo['id'])
                                            infoid.append(addslidesinfo['id'])

                                regtalk2 = RegisterConf.objects.get(id=talkid)
                                regtalk2.slidesid = str(infoid)

                                if regtalk2.type == 4:  # if poster
                                    with sessions.Session() as session:
                                        # create the poster's chat room

                                        try:
                                            rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                                server_url='https://chat.carbonfreeconf.com',
                                                                session=session)
                                        except:
                                            subject = "Nooooooooo Rocket chat what????"
                                            message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                            # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                            emailto = []
                                            emailto.append("quentin.kral@gmail.com")
                                            emailto.append("carbonfreeconf@gmail.com")

                                            email = EmailMessage(
                                                subject,
                                                message,
                                                'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                                emailto,  # to
                                                # getemails,  # bcc
                                                # reply_to=replylist,
                                                headers={'Message-From': 'www.carbonfreeconf.com'},
                                            )
                                            email.content_subtype = "html"

                                            #email.send(fail_silently=False)

                                        slugtitleconf = slugify(str('%s' % ('poster_' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + '_' + regtalk2.title)))
                                        #print('slug', slugtitleconf)
                                        pprint(rocket.groups_create(slugtitleconf).json())

                                        # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                                        contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                                        keyroom = contentroom['group']['_id']
                                        #print('keyroom', keyroom)
                                        pprint(rocket.groups_set_description(room_id=keyroom,
                                                                             description="Poster by " + regtalk2.user.first_name + ' ' + regtalk2.user.last_name).json())
                                        pprint(rocket.groups_set_topic(room_id=keyroom,
                                                                       topic=regtalk2.title).json())

                                        contentuser = rocket.users_info(username=request.user.username).json()
                                        key = contentuser['user']['_id']
                                        #print('keyo', key, keyroom)

                                        pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())

                                        # add moderators to a room tbbbbbbbbbbbbb
                                        modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
                                        #print(modo)

                                        # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):
                                        textmes = 'This is the room dedicated to the poster by ' + regtalk2.user.first_name + ' ' + regtalk2.user.last_name + ' whose ' \
                                                                                                                                                              'title is: ' + regtalk2.title + '. We encourage the poster presenter to record a voice message explaining their ' \
                                                                                                                                                                                              'poster to participants (just click on the microphone at the bottom right of the chat room). You can also record a video if needed. ' \
                                                                                                                                                                                              'Other participants can discuss with the presenter via chat or call them if needed (use the phone at the top right corner).'
                                        pprint(rocket.chat_post_message(text=textmes, room_id=keyroom).json())

                                        # def find_or_create_invite(self, rid, days, max_uses):

                                        invite = rocket.find_or_create_invite(rid=keyroom, days=0, max_uses=0).json()
                                        #print('invite', invite, invite['url'], invite['_id'])
                                        regtalk2.poster_invite_chat_url = "https://chat.carbonfreeconf.com/invite/" + \
                                                                          invite[
                                                                              '_id']  # invite['url'] that a go.rocket not iframable

                                        rocket.logout()

                                    # regtalk2.poster_invite_chat_url="https://go.rocket.chat/room?host=chat.carbonfreeconf.com&rid="+keyroom#+"&path=channel/general"

                                regtalk2.save()

                                # save infoid list in database for delete

                                talksuc = int(request.POST.get('loop'))
                                # print('talksuc',talksuc)
                                stuff_for_frontend.update({
                                    'talksuc': talksuc,
                                })
                            slides_form = SlidesForm()

                            # return HttpResponseRedirect('/thanks/')
                        # if a GET (or any other method) we'll create a blank form
                    else:
                        slides_form = SlidesForm()

                    stuff_for_frontend.update({
                        'slides_form': slides_form,
                    })

                    testbm = False
                    if RegisterConf.objects.filter(conference=conftopass, user=request.user):
                        # print('hereeee')
                        talkcrea = True

                        talks = RegisterConf.objects.filter(conference=conftopass, user=request.user)
                        if talks[0].testvirtualroom == True:
                            testbm = True

                        talksub = []
                        for talk in talks:
                            if talk.slides:
                                talksub.append(1)
                            else:
                                talksub.append(0)

                        stuff_for_frontend.update({
                            'talks': talks,
                            'testbm': testbm,
                            'talksub': talksub
                        })
                    stuff_for_frontend.update({
                        'regtalk_form': regtalk_form,
                    })
                    stuff_for_frontend.update({
                        'regtalklight_form': regtalklight_form,
                    })


                confm = CreateConf.objects.filter(id=confnum)[0]
                #print('confm', confm, confm.masterconf)


                confa = CreateConf.objects.filter(masterconfpass=confm.masterconfpass,status__gt=0).order_by('masterconfdaughterposition')
                #print('confa',confa)



                participe=[]#False
                vali = []
                if request.user.is_authenticated:
                    for i in range(len(confa)):
                        if RegisterConf.objects.filter(user=request.user, conference=confa[i]).exists():
                            participe.append(True)
                            if RegisterConf.objects.filter(user=request.user, conference=confa[i], status=1).exists():
                                vali.append(True)
                            else:
                                vali.append(False)
                        else:
                            participe.append(False)
                            vali.append(False)

                    stuff_for_frontend.update({
                        'confa': confa,
                        'vali': vali,
                        'participe': participe})

                if confm.masterconf:
                    #print('id', confm.masterconfpass)
                    confd = CreateConf.objects.filter(masterconfpass=confm.masterconfpass, daughterconf=True, status__gt=0).order_by('masterconfdaughterposition')
                    start_date = confm.start_date
                    start_date = start_date.strftime("%Y-%m-%d")
                    #print('confd', confd)
                    start_date_daughter = []
                    #participe=[]
                    for i in range(len(confd)):
                        #print('cc', confd[i].start_date)
                        start_date_daughter.append(confd[i].start_date.strftime("%Y-%m-%d"))
                        #if request.user.is_authenticated:

                            #if RegisterConf.objects.filter(user=request.user,conference=confd[i],status=1).exists():
                           #     participe.append(True)
                           # else:
                            #    participe.append(False)


                    stuff_for_frontend.update({'confds': confd,
                                               'confm': confm,
                                               #'confa': confa,
                                               #'participe': participe,
                                               #'participem': participem,
                                               'start_date': start_date,
                                               'start_date_daughter': start_date_daughter})

                if confm.daughterconf:
                    confma = CreateConf.objects.filter(masterconfpass=confm.masterconfpass, masterconf=True)[0]
                    stuff_for_frontend.update({'confma': confma})

                colguide = "#223"
                if 1==1:#confm.website.color_background:
                    #if confm.website.color_background=='#000000':
                    #        #print('black')
                    #        valcol = int(confm.website.color_background.split('#')[1], 16) + int("A00000", 16)
                    #        valcol2 = int(confm.website.color_background.split('#')[1], 16) + int("246FFF", 16)
                    #        #print('valcode', valcol, int("1000", 16))
                    #        #print('valcode2', valcol2, int("50000", 16), hex(valcol2)[2:])
                    #        #print('#' + hex(valcol)[2:])
                    #        newval = '#' + hex(valcol)[2:]
                    #        newval2 = '#' + hex(valcol2)[2:]
                    #else:
                    if 1==1:
                        coladd = "1000"
                        valcol = int("000000", 16)#int(confm.website.color_background.split('#')[1], 16) + int("1000", 16)
                        valcol2 = int("000000", 16)#int(confm.website.color_background.split('#')[1], 16) + int("8000", 16)
                        #print('valcode', valcol, int("1000", 16))
                        #print('valcode2', valcol2, int("50000", 16), hex(valcol2)[2:])
                        #print('#' + hex(valcol)[2:])
                        newval = '#' + hex(valcol)[2:]
                        newval2 = '#' + hex(valcol2)[2:]


                #print('newval',newval,newval2,confm.website.color_background,int(confm.website.color_background.split('#')[1], 16))

                #check if accepted participation
                acc=False
                if request.user.is_authenticated:
                    if confm.masterconf or confm.daughterconf:
                        #find masterconf
                        mastccc=CreateConf.objects.filter(masterconfpass=confm.masterconfpass, masterconf=True)[0]
                        if mastccc.parsession:
                            # print('id', confm.masterconfpass)
                            allpart=RegisterConf.objects.filter(conference__masterconfpass=confm.masterconfpass, user=request.user, status=1)
                        else:
                            allpart = RegisterConf.objects.filter(conference=confm, user=request.user, status=1)
                    else:
                        allpart=RegisterConf.objects.filter(conference=confm,user=request.user,status=1)

                    if allpart:
                        acc=True
                        print('True',allpart[0].title)

                print('acc',acc)
                stuff_for_frontend.update({
                    'conftopass': conftopass,
                    #'web': web,
                    'acc':acc,
                    'color_guide': newval,
                    'color_guide2': newval2,
                    'link': link,
                    'people': people,
                    'emailpeop': emailpeople,
                    'peoplesocloc': peoplesocloc,
                    'orga':orga,
                    'progorga':progorga,
                    'abstract': abstract,
                    'emailabs':emailabs,
                    'organisers': org_list,
                    'talkcrea': talkcrea
                })
            else:
                stuff_for_frontend.update({
                    'status': 5
                })
        else:
            stuff_for_frontend = {'status': 25}

    else:
        stuff_for_frontend = {'status': 6}

    return render(request, 'my_app/fastregistration.html', stuff_for_frontend)


def displaywhoto(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        checkall = request.POST.get('checkall')
        whoto = request.POST.getlist('whotot[]')
        lenwhoto = request.POST.get('lenwhoto')

        #print('confnum,whoto,lenwhoto,checkall', confnum,whoto,lenwhoto,checkall)
        whoto = whoto[-1]
        #print('whotooo2',whoto)

        response = {}
        response['success'] = 0
        WHOTO2 = (
            (0, "Super Users"),
            (1, "All"),
            (2, "Participants with accepted talks/review/discussion"),
            (3, "Participants presenting posters"),
            (4, "Participants with no talks/posters accepted who registered"),
            (5, "Program committee"),
            (6, "Organizers"),
            (7, "Participants you invited but did not register yet"),
            (8, "Moderators"),
            (9, "Those that are only attending but not presenting"),
            (10, "Participants with invited talks"),
            (11, "Participants with discussions"),
            (12, "Participants with reviews"),
            (13, "Participants who paid (if paying conference)"),
            (14, "Participants who have not paid yet (if paying conference)"),
            (15, "Participants who were chosen to participate for free (if paying conference)")
        )
        #print('ee',WHOTO2[int(whoto)][1])
        whotoname=WHOTO2[int(whoto)][1]
        response['lenwhoto'] = lenwhoto
        response['whotoname'] = whotoname

        if checkall=='true':
            getemailspers = utils.getemails(confnum, whoto,1)

            if getemailspers:
                getemails = getemailspers[0]
                getpers = getemailspers[1]

                #print('getemail', getemails)
                #print('getpers', getpers)

                response['success'] = 1
                #response['mast'] = True
                response['getpers'] = getpers
                response['getemail'] = getemails

        else:
            #print('whotooo',whoto)
            getemailspers = utils.getemails(confnum, whoto,0)

            if getemailspers:
                getemails = getemailspers[0]
                getpers = getemailspers[1]

                #print('getemail', getemails)
                #print('getpers', getpers)

                response['success'] = 1
                response['getpers'] = getpers
                response['getemail'] = getemails


        #print('hukhkjhkjhjkhfkhdjfhdjfhdkfjhdkjfhdjkkfhdjkfhkdj')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )


def email(request, confnum=None, emaill=None):
    # print('enter')

    # print('ici',emaill)
    conftopass = CreateConf.objects.filter(id=confnum)[0]
    # userr = User.objects.filter(email=email)[0]
    # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)
    context = {
        'confnum': confnum
    }

    datatuple = (
        ('Subject1', 'Message1.', 'communication@carbonfreeconf.com', ['quentin.kral@gmail.com']),
        ('Subject2', 'Message2.', 'communication@carbonfreeconf.com', ['quenti@free.fr']),
    )
    # send_mass_mail(datatuple)
    # print('what')
    if request.method == 'POST':
        # print('what2')

        if emaill:
            emailpeoplelight_form = EmailPeopleLightForm(request.POST)
            if emailpeoplelight_form.is_valid():
                # print('joejoelight')
                # users = User.objects.filter(username=request.user)
                emailpeop = emailpeoplelight_form.save(commit=False)
                emailpeop.topersonemail = emaill
                emailpeop.conference = conftopass
                # #print('user', request.user)
                emailpeop.user = request.user

                emailpeop.save()
                # createpeople_form = PeopleForm()
                emailpeople = True

                if emailpeop.subjectt and emailpeop.message and emailpeop.replyto:
                    try:
                        getemails = [emaill]
                        if not getemails:
                            return HttpResponse('Incorrect email address selected, try again.')
                        replylist = emailpeop.replyto.replace(" ", "").split(",")
                        # print('replylist', replylist)
                        # check if emails look like emails
                        for emai in replylist:
                            try:
                                validate_email(emai)
                            except ValidationError as e:
                                return HttpResponse('At least one of the reply-to emails you typed in is incorrect.')
                                # print("bad email, details:", e)
                            else:
                                print("good email")

                        emailmes = EmailMessage(
                            emailpeop.subjectt,
                            emailpeop.message,
                            'communication@carbonfreeconf.com',  # from
                            getemails,  # to
                            # replylist,  # bcc
                            reply_to=replylist,
                            headers={'Message-From': 'www.carbonfreeconf.com'},
                        )
                        # emailmes.content_subtype = "html"#careful if html then have to control what's put in and the go to lines entered in the form won't work anymore
                        # asynchronous version
                        # sendgroupemailasynchronously.delay(emailmes)

                        # synchronous version
                        emailmes.send(fail_silently=False)  # inaya

                        # print('email sent', emailmes)
                    except BadHeaderError:
                        return HttpResponse('Invalid header found.')

                    return HttpResponseRedirect(reverse('my_app:createconf'))  # + '#addperson')
                else:
                    # In reality we'd use a form class
                    # to get proper validation errors.
                    return HttpResponse('Make sure all fields are entered and valid.')

            else:
                print(emailpeoplelight_form.errors)
        else:
            # subject = request.POST.get('subject', '')
            # message = request.POST.get('message', '')
            # whoto = request.POST.get('whoto', '')

            emailpeople_form = EmailPeopleForm(request.POST)
            if emailpeople_form.is_valid():
                # print('joejoe')
                # users = User.objects.filter(username=request.user)
                emailpeop = emailpeople_form.save(commit=False)
                emailpeop.conference = conftopass
                # #print('user', request.user)
                emailpeop.user = request.user

                #print('emailpeop.all',emailpeop.all,emailpeop.whoto)

                emailpeop.save()
                # createpeople_form = PeopleForm()
                emailpeople = True

                if emailpeop.subjectt and emailpeop.message and emailpeop.whoto and emailpeop.replyto:
                    try:
                        if emailpeop.all==True:
                            getemailspers = utils.getemails(confnum, emailpeop.whoto,1)
                        else:
                            getemailspers = utils.getemails(confnum, emailpeop.whoto,0)

                        getemails = getemailspers[0]
                        getpers = getemailspers[1]

                        #print('getemail',getemails)
                        #print('getpers',getpers)

                        if not getemails:
                            return HttpResponse('No emails found or incorrect emails added, try again.')
                        replylist = emailpeop.replyto.replace(" ", "").split(",")
                        # print('replylist',replylist)
                        # check if emails look like emails
                        for emai in replylist:
                            try:
                                validate_email(emai)
                            except ValidationError as e:
                                return HttpResponse('At least one of the reply-to emails you typed in is incorrect.')
                                # print("bad email, details:", e)
                            else:
                                print("good email")

                        emailmes = EmailMessage(
                            emailpeop.subjectt,
                            emailpeop.message,
                            'communication@carbonfreeconf.com',  # from
                            replylist,  # to
                            getemails,  # bcc
                            reply_to=replylist,
                            headers={'Message-From': 'www.carbonfreeconf.com'},
                        )
                        # emailmes.content_subtype = "html"#careful if html then have to control what's put in and the go to lines entered in the form won't work anymore
                        emailmes.send(fail_silently=False)
                        # print('email sent',emailmes)
                    except BadHeaderError:
                        return HttpResponse('Invalid header found.')

                    return HttpResponseRedirect(reverse('my_app:createconf'))  # + '#addperson')
                else:
                    # In reality we'd use a form class
                    # to get proper validation errors.
                    return HttpResponse('Make sure all fields are entered and valid.')

            else:
                print(emailpeople_form.errors)
    else:
        if emaill:
            emailpeoplelight_form = EmailPeopleLightForm()
            if People.objects.filter(email__iexact=emaill):
                # print('em',emaill,People.objects.filter(email__iexact=emaill))
                person = People.objects.filter(email__iexact=emaill,conference__id=confnum)[0]
            else:
                personb = RegisterConf.objects.filter(conference__id=confnum, user__email__iexact=emaill)[
                    0]  # .values_list('user',flat=True)[0]

                # person['firstname']=''
                # person['lastname']=''
                person = {"firstname": personb.user.first_name,
                          "lastname": personb.user.last_name,
                          "email": emaill
                          }

            context.update({
                'emailpeople': emailpeoplelight_form,
                'conftopass': conftopass,
                'email': emaill,
                'person': person
            })
            return render(request, 'my_app/modalemailperso.html', context)

        else:
            emailpeople_form = EmailPeopleForm()

            context.update({
                'emailpeople': emailpeople_form,
                'conftopass': conftopass
            })
            # print('what3')

            return render(request, 'my_app/modalemail.html', context)

def contactperson(request, confnum=None, username=None, fromm=None):
    # print('enter')

    # print('ici',emaill)
    conftopass = CreateConf.objects.filter(id=confnum)[0]
    # userr = User.objects.filter(email=email)[0]
    # instance = RegisterConf.objects.filter(user=userr, conference=conftopass)
    context = {
        'confnum': confnum
    }

    #join-conference/79/bdrSCdiKcFa3RNRshj8UPQuhJxOnYA
        #confnum,conftopass.privpass,conftopass.privpass if createconff.priv == "Public":




    datatuple = (
        ('Subject1', 'Message1.', 'communication@carbonfreeconf.com', ['quentin.kral@gmail.com']),
        ('Subject2', 'Message2.', 'communication@carbonfreeconf.com', ['quenti@free.fr']),
    )
    # send_mass_mail(datatuple)
    # print('what')
    if request.method == 'POST':
        # print('what2')
        if username:
            if username=='program_committee_contact_A3@8l0' or username=='organizers_contact_A3@8l0op.':
                emailcontactlight_form = EmailContactLightForm(request.POST)
                if emailcontactlight_form.is_valid():
                    # print('joejoelight')
                    # users = User.objects.filter(username=request.user)
                    emailpeop = emailcontactlight_form.save(commit=False)

                    emailpeop.topersonemail = username
                    emailpeop.conference = conftopass
                    # #print('user', request.user)
                    emailpeop.user = request.user

                    emailpeop.save()
                    # createpeople_form = PeopleForm()
                    emailpeople = True

                    #(5, "Program committee"),
                    #(6, "Organizers"),

                    if username=='program_committee_contact_A3@8l0':
                        getemailspers = utils.getemails(confnum, '5', 0)
                    else:
                        getemailspers = utils.getemails(confnum, '6', 0)

                    getemails = getemailspers[0]
                    print('getemails',getemails,username)

                    if emailpeop.subjectt and emailpeop.message:  # and emailpeop.replyto:
                        try:
                            #getemails = [person.email]
                            if not getemails:
                                return HttpResponse('Incorrect email address entered by the participant, sorry!')
                            replylist = [request.user.email]
                            # print('replylist', replylist)
                            # check if emails look like emails

                            emailmes = EmailMessage(
                                emailpeop.subjectt,
                                emailpeop.message,
                                'communication@carbonfreeconf.com',  # from
                                getemails,  # to
                                # replylist,  # bcc
                                reply_to=replylist,
                                headers={'Message-From': 'www.carbonfreeconf.com'},
                            )
                            # emailmes.content_subtype = "html"#careful if html then have to control what's put in and the go to lines entered in the form won't work anymore
                            # asynchronous version
                            # sendgroupemailasynchronously.delay(emailmes)

                            # synchronous version
                            emailmes.send(fail_silently=False)  # inaya

                            messages.success(request,
                                             "Congrats, you managed to solve the math problem! Therefore, as promised we have just sent the email!",
                                             extra_tags='yes')

                            # print('email sent', emailmes)
                        except BadHeaderError:
                            return HttpResponse('Invalid header found.')

                        if fromm=='join':
                            if conftopass.priv == "Public":
                                return HttpResponseRedirect(reverse('my_app:joinconf', args=(confnum, conftopass.privpass)))
                            else:
                                return HttpResponseRedirect(reverse('my_app:joinconf'))
                        else:
                            return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))
                    else:
                        # In reality we'd use a form class
                        # to get proper validation errors.
                        return HttpResponse('Make sure all fields are entered and valid.')

                else:
                    print(emailcontactlight_form.errors)
                    # request.session['captcha'] = 'wrongcaptcha'
                    messages.error(request,
                                   "Are you human? The math problem wasn't solved correctly and we couldn't send the email!",
                                   extra_tags='human')

                    if fromm == 'join':
                        if conftopass.priv == "Public":
                            return HttpResponseRedirect(reverse('my_app:joinconf', args=(confnum, conftopass.privpass)))
                        else:
                            return HttpResponseRedirect(reverse('my_app:joinconf'))
                    else:
                        return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))

                    #return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))
                    # return HttpResponse('The math problem was not solved correctly, oopsie!')
            else:

                if User.objects.filter(username=username).exists():
                    # print('em',emaill,People.objects.filter(email__iexact=emaill))
                    person = User.objects.filter(username=username)[0]
                    emailcontactlight_form = EmailContactLightForm(request.POST)
                    if emailcontactlight_form.is_valid():
                        # print('joejoelight')
                        # users = User.objects.filter(username=request.user)
                        emailpeop = emailcontactlight_form.save(commit=False)

                        emailpeop.topersonemail = person.email
                        emailpeop.conference = conftopass
                        # #print('user', request.user)
                        emailpeop.user = request.user

                        emailpeop.save()
                        # createpeople_form = PeopleForm()
                        emailpeople = True

                        if emailpeop.subjectt and emailpeop.message:# and emailpeop.replyto:
                            try:
                                getemails = [person.email]
                                if not getemails:
                                    return HttpResponse('Incorrect email address entered by the participant, sorry!')
                                replylist = [request.user.email]
                                # print('replylist', replylist)
                                # check if emails look like emails


                                emailmes = EmailMessage(
                                    emailpeop.subjectt,
                                    emailpeop.message,
                                    'communication@carbonfreeconf.com',  # from
                                    getemails,  # to
                                    # replylist,  # bcc
                                    reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                # emailmes.content_subtype = "html"#careful if html then have to control what's put in and the go to lines entered in the form won't work anymore
                                # asynchronous version
                                # sendgroupemailasynchronously.delay(emailmes)

                                # synchronous version
                                emailmes.send(fail_silently=False)  # inaya

                                messages.success(request,
                                               "Congrats, you managed to solve the math problem! Therefore, as promised we have just sent the email!",
                                               extra_tags='yes')

                                # print('email sent', emailmes)
                            except BadHeaderError:
                                return HttpResponse('Invalid header found.')

                            if fromm == 'join':
                                if conftopass.priv == "Public":
                                    return HttpResponseRedirect(
                                        reverse('my_app:joinconf', args=(confnum, conftopass.privpass)))
                                else:
                                    return HttpResponseRedirect(reverse('my_app:joinconf'))
                                #return "ok"
                            else:
                                return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))

                            #return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))
                        else:
                            # In reality we'd use a form class
                            # to get proper validation errors.
                            return HttpResponse('Make sure all fields are entered and valid.')

                    else:
                        print(emailcontactlight_form.errors)
                        #request.session['captcha'] = 'wrongcaptcha'
                        messages.error(request,
                                       "Are you human? The math problem wasn't solved correctly and we couldn't send the email!",
                                       extra_tags='human')

                        if fromm=='join':
                            if conftopass.priv == "Public":
                                return HttpResponseRedirect(reverse('my_app:joinconf', args=(confnum, conftopass.privpass)))
                            else:
                                return HttpResponseRedirect(reverse('my_app:joinconf'))
                        else:
                            return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))

                        #return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))
                        #return HttpResponse('The math problem was not solved correctly, oopsie!')
                else:
                    print('pas bien')
        else:
            print('pas bien 2')

    else:
        if username:
            if username=='program_committee_contact_A3@8l0' or username=='organizers_contact_A3@8l0op.':
                emailcontactlight_form = EmailContactLightForm()
                #if User.objects.filter(username=username).exists():
                    # print('em',emaill,People.objects.filter(email__iexact=emaill))
                #    person = User.objects.filter(username=username)[0]
                    # print('pers',person)
                context.update({
                    'emailpeople': emailcontactlight_form,
                    'conftopass': conftopass,
                    'username': username,
                    'fromm': fromm,
                    'person': username
                })

                return render(request, 'my_app/modalcontactperso.html', context)


            else:

                emailcontactlight_form = EmailContactLightForm()
                if User.objects.filter(username=username).exists():
                    # print('em',emaill,People.objects.filter(email__iexact=emaill))
                    person = User.objects.filter(username=username)[0]
                    #print('pers',person)
                    context.update({
                        'emailpeople': emailcontactlight_form,
                        'conftopass': conftopass,
                        'username': username,
                        'fromm': fromm,
                        'person': person
                    })

                    return render(request, 'my_app/modalcontactperso.html', context)

                else:
                    print('problem no username')
                    return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))

        else:
            print('problem no username2')
            return HttpResponseRedirect(reverse('my_app:website', args=(confnum, fromm)))

def connectcam(request, urlbig=None):
    # def copyright():
    #   return "copyright 2018"

    # if request.method == "GET":

    # print('urlbig',urlbig)
    url = urllib.parse.unquote(urlbig)
    # print('urlpasbig',url)
    # return url
    # return redirect(url)
    return HttpResponseRedirect(str(url))


@confirm_password
def profile(request):
    context = {}
    import pycountry
    # country_list = pycountry.countries
    country_list = {country.name for country in pycountry.countries}

    job_list = ('PhD student', 'Postdoc', 'Lecturer', 'Professor', 'Engineer', 'Student', 'Senior scientist', 'Amateur', 'Scholar', 'Journalist')
    if request.user.is_authenticated:
        # print('brahffddsdf4')
        saved = False
        if request.method == 'POST':
            comingfrom = request.POST['comingfrom']
            confnum = request.POST.get('confnum')
            # comingfromweb = request.POST.get('comingfromweb')
            conftopass = request.POST.get('conftopass')

            if request.POST.get('realsub'):
                oldfn = request.user.first_name
                oldln = request.user.last_name

                oldavatar = request.user.userprofileinfo.profile_pic

                user_form = UpdateUserForm(data=request.POST, instance=request.user)
                profile_form = UpdateUserProfileInfoForm(data=request.POST, instance=request.user.userprofileinfo,
                                                         data_list=job_list, data_list2=country_list)

                if user_form.is_valid() and profile_form.is_valid():
                    # existing_user = User.objects.get(username=request.user.username)

                    # existing_user.email = 'new@email.com'
                    # existing_user.save()

                    user = user_form.save(commit=False)
                    user.set_password(user.password)

                    # domain=user.email.split("@")[1]
                    domain = user_form.cleaned_data['email'].split("@")[1]
                    # print('domain',domain)
                    notloading = 0

                    try:
                        responseapi = requests.get('https://block-temporary-email.com/check/domain/' + domain, headers={"x-api-key":settings.BLOCK_TEMPORARY_EMAIL})
                        print(responseapi.status_code)
                        if responseapi.status_code == 403:
                            notloading = 1
                    except:
                        notloading = 1

                    if notloading==0:
                        if responseapi.status_code == 200:
                            info = json.loads(responseapi.content.decode('utf-8'))
                            print('info',info, info['temporary'], info['dns'])

                            if (info['temporary'] == False) and (info['dns'] == True):
                                print('reg test good')
                            else:
                                print('ok')
                                return render(request, 'my_app/profile.html',
                                              {'user_form': user_form,
                                               'profile_form': profile_form,
                                               # 'registered': registered,
                                               # 'comingfrom': comingfrom,
                                               'dispemail': True})

                    testauth = authenticate(request, username=request.user.username, password=request.POST['password'])
                    # print('testauth',testauth)

                    profile = profile_form.save(commit=False)
                    profile.user = user
                    if 'profile_pic' in request.FILES:
                        # print('found it')
                        profile.profile_pic = request.FILES['profile_pic']
                        #update rocket chat image

                    if testauth is not None:


                        # update name of posters if any
                        regtalk = RegisterConf.objects.filter(type=4, user=request.user, status=1)
                        #print('regfnkfdjngkjfgnbgjkfgnjfgnk', regtalk)
                        if regtalk:
                            for talk in regtalk:
                                #print('okidoki', talk.title, talk.slides)
                                if talk.slides:
                                    #print('oki', user_form.cleaned_data['first_name'],
                                          #user_form.cleaned_data['last_name'], oldfn, oldln)
                                    if ((user_form.cleaned_data['first_name'] != oldfn) or (
                                            user_form.cleaned_data['last_name'] != oldln)):
                                        #print('doki')

                                        with sessions.Session() as session:
                                            # log-in

                                            try:
                                                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                                    server_url='https://chat.carbonfreeconf.com',
                                                                    session=session)
                                            except:
                                                subject = "Nooooooooo Rocket chat what????"
                                                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                                emailto = []
                                                emailto.append("quentin.kral@gmail.com")
                                                emailto.append("carbonfreeconf@gmail.com")

                                                email = EmailMessage(
                                                    subject,
                                                    message,
                                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                                    emailto,  # to
                                                    # getemails,  # bcc
                                                    # reply_to=replylist,
                                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                                )
                                                email.content_subtype = "html"

                                                #email.send(fail_silently=False)

                                            # quenti
                                            oldslugtitleconf = slugify(str('%s' % ('poster_' + oldfn + ' ' + oldln + '_' + talk.title)))
                                            contentroom = rocket.groups_info(room_name=oldslugtitleconf).json()
                                            if contentroom['success']:
                                                keyroom = contentroom['group']['_id']

                                                slugtitleconf = slugify(str('%s' % ('poster_' + user_form.cleaned_data['first_name'] + ' ' +
                                                            user_form.cleaned_data['last_name'] + '_' + talk.title)))
                                                #print('slug', slugtitleconf, oldslugtitleconf)
                                                pprint(rocket.groups_rename(room_id=keyroom, name=slugtitleconf).json())

                                            rocket.logout()

                        user.save()
                        # print('brahsave')

                        profile.save()
                        saved = True
                        #olord

                        with sessions.Session() as session:
                            # log-in as admin
                            # rocket = RocketChat(user_id='ds6wgKPapWQgaBAhd',auth_token='wlRqGekGAtLYNpeFPAG5s74t0k_9qa6_oWUw0ZWua30',server_url='https://chat.carbonfreeconf.com', session=session)
                            try:
                                rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                                    server_url='https://chat.carbonfreeconf.com',
                                                    session=session)
                            except:
                                subject = "Nooooooooo Rocket chat what????"
                                message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                                # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                                emailto = []
                                emailto.append("quentin.kral@gmail.com")
                                emailto.append("carbonfreeconf@gmail.com")

                                email = EmailMessage(
                                    subject,
                                    message,
                                    'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                                    emailto,  # to
                                    # getemails,  # bcc
                                    # reply_to=replylist,
                                    headers={'Message-From': 'www.carbonfreeconf.com'},
                                )
                                email.content_subtype = "html"

                                #email.send(fail_silently=False)
                            # pprint(rocket.me().json())

                            # create user
                            # pprint(rocket.users_create(email=request.user.email,name=request.user.first_name+request.user.last_name,password=request.user.password,username=request.user.username).json())
                            #def users_update(self, user_id, **kwargs):
                            contentuser = rocket.users_info(username=user_form.cleaned_data['username']).json()
                            key = contentuser['user']['_id']

                            content = rocket.users_update(user_id=key,email=user_form.cleaned_data['email'],
                                                          name=user_form.cleaned_data['first_name'] + ' ' +
                                                               user_form.cleaned_data['last_name'],
                                                          password=user_form.cleaned_data['password'],
                                                          username=user_form.cleaned_data['username']).json()
                            pprint(content)

                            # print('prof',profile.profile_pic)
                            if profile.profile_pic:
                                #print('ui',user_form.cleaned_data['username'])
                                #getav = rocket.users_get_avatar(username=user_form.cleaned_data['username']).json()
                                #pprint(getav)

                                setav = rocket.users_set_avatar(avatar_url=profile.profile_pic.url,
                                                        username=user_form.cleaned_data['username']).json()
                                pprint(setav)

                            if oldavatar and not profile.profile_pic:
                                resetav = rocket.users_reset_avatar(username=user_form.cleaned_data['username']).json()
                                pprint(resetav)


                            #def users_reset_avatar(self, user_id=None, username=None, **kwargs):

                            # key = content['user']['_id']
                            # print('key', key)
                            rocket.logout()


                        # print('saved')
                        update_session_auth_hash(request, profile.user)  # when password changes

                        if profile.profile_pic:
                            return render(request, 'my_app/profile.html',
                                          {'user_form': user_form,
                                           'profile_form': profile_form,
                                           'profile_pic': profile.profile_pic,
                                           'saved': saved,
                                           })
                        else:

                            return render(request, 'my_app/profile.html',
                                          {'user_form': user_form,
                                           'profile_form': profile_form,
                                           'saved': saved,
                                           })
                    else:
                        if profile.profile_pic:
                            return render(request, 'my_app/profile.html',
                                          {'user_form': user_form,
                                           'profile_form': profile_form,
                                           'profile_pic': profile.profile_pic,
                                           'passwordwrong': True,
                                           })
                        else:
                            return render(request, 'my_app/profile.html',
                                          {'user_form': user_form,
                                           'profile_form': profile_form,
                                           'passwordwrong': True,
                                           })
                else:
                    # print('brahffddsdf3')

                    # print(user_form.errors, profile_form.errors)
                    return render(request, 'my_app/profile.html',
                                  {'user_form': user_form,
                                   'profile_form': profile_form,
                                   })
                    # 'registered': registered,
                    # 'comingfrom': comingfrom})

            else:
                # print('brahffddsdf2')

                user_form = UpdateUserForm()
                profile_form = UpdateUserProfileInfoForm(data_list=job_list, data_list2=country_list)

                return render(request, 'my_app/profile.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               'registered': registered,
                               'confnum': confnum,
                               # 'comingfromweb': comingfromweb,
                               'comingfrom': comingfrom,
                               'linkfrom': ''
                               })
        else:
            # print('brahffddsdf')
            profileu = UserProfileInfo.objects.filter(user=request.user)
            user_form = UpdateUserForm(
                initial={'username': request.user.username, 'first_name': request.user.first_name,
                         'last_name': request.user.last_name, 'email': request.user.email,
                         'password': request.user.password})
            profile_form = UpdateUserProfileInfoForm(initial={'orcid': request.user.userprofileinfo.orcid,
                                                              'institute': request.user.userprofileinfo.institute,
                                                              'instcountry': request.user.userprofileinfo.instcountry,
                                                              'job': request.user.userprofileinfo.job,
                                                              'iban': request.user.userprofileinfo.iban,
                                                              'accountnumber': request.user.userprofileinfo.accountnumber,
                                                              'rootingnumber': request.user.userprofileinfo.rootingnumber,
                                                              'bicswiftcode': request.user.userprofileinfo.bicswiftcode,
                                                              'sortcode': request.user.userprofileinfo.sortcode,
                                                              'bankcountry': request.user.userprofileinfo.bankcountry,
                                                              'bankusername': request.user.userprofileinfo.bankusername},
                                                     data_list=job_list, data_list2=country_list)

            if request.user.userprofileinfo.profile_pic:

                return render(request, 'my_app/profile.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               'profile_pic': request.user.userprofileinfo.profile_pic
                               })

            else:
                return render(request, 'my_app/profile.html',
                              {'user_form': user_form,
                               'profile_form': profile_form,
                               })
                # 'registered': registered,
                # 'comingfrom': comingfrom})

    else:
        stuff_for_frontend = {
            'comingfrom': 'myprofile',
            'linkfrom': '',
        }
        return render(request, 'my_app/login.html', stuff_for_frontend)


def sign_s3(request):
    from django.conf import settings

    file_name = request.GET['file_name']
    file_type = request.GET['file_type']

    s3 = boto3.client(
        's3',
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY
    )

    presigned_post = s3.generate_presigned_post(
        Bucket=settings.AWS_STORAGE_BUCKET_NAME,
        Key=file_name,
        Fields={"acl": "public-read", "Content-Type": file_type},
        Conditions=[
            {"acl": "public-read"},
            {"Content-Type": file_type}
        ],
        # Uploads must happen within 24h of generation

        ExpiresIn=3600 * 24
    )

    #print('pre', presigned_post)

    response = {}
    response['data'] = presigned_post
    response[
        'url'] = 'https://' + settings.AWS_S3_CUSTOM_DOMAIN + '/%s' % file_name  # 'https://%s.s3.amazonaws.com/%s' % (S3_BUCKET, file_name)

    #print('url', response['url'])
    # return presigned_post

    return HttpResponse(
        json.dumps(response),
        content_type="application/json"
    )
    # return json.dumps({'data': presigned_post,'url': 'https://%s.s3.amazonaws.com/%s' % (S3_BUCKET, file_name)})


def updatevaluerecord(request):
    if request.method == 'POST':
        talkid = request.POST.get('idtalk')
        url = request.POST.get('url')
        loopnum = request.POST.get('loopnum')

        #print('talkid', talkid, url)
        response = {}
        response['success'] = 0

        talk = RegisterConf.objects.filter(id=talkid)[0]
        talk.mp4_url = url
        response['loopnum'] = loopnum
        response['url'] = url

        data = {"file_url": url}  # room_logo to add mila base_url+regtalk2.slides.url
        data = json.dumps(data)
        # print('dat', data)
        visio = CreateVisio.objects.filter(conference=talk.conference, testroom=False)
        infoid = []
        if talk.conference.roomtype == "Big Marker":

            for vis in visio:

                addrecinfo = utils.addslidesfunc(data, vis.idconf)

                if addrecinfo is None:
                    print('prob addslideinfo')
                    # stuff_for_frontend.update({
                    #    'submitted': 0,
                    # })
                else:
                    # print('addslidesinfo',addslidesinfo)
                    # print('a',addslidesinfo['id'])
                    infoid.append(addrecinfo['id'])

            talk.recid = str(infoid)
        talk.save()

        response['success'] = 1
        # mettre un spinner et upload sur bm

        #print('hukhkjhkjhjkhfkhdjfhdjfhdkfjhdkjfhdjkkfhdjkfhkdj')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def updatevaluerecord2(request):
    if request.method == 'POST':
        talkid = request.POST.get('idtalk')
        url = request.POST.get('url')
        loopnum = request.POST.get('loopnum')

        #print('talkid', talkid, url)
        # response = {}
        response_data = {}

        # response['success']=0

        talk = RegisterConf.objects.filter(id=talkid)[0]
        response_data['talkrepl'] = 0
        if not talk.mp4_url:
            response_data['talkrepl'] = 1

        talk.mp4_url = url

        # data = {"file_url": url}  # room_logo to add mila base_url+regtalk2.slides.url
        # data = json.dumps(data)
        # print('dat', data)
        talk.rectalk = True


        #if poster, create chat
        if talk.type == 4:
            with sessions.Session() as session:
            # create the poster's chat room

                try:
                    rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                        server_url='https://chat.carbonfreeconf.com',
                                        session=session)
                    print('ok rock')
                except:
                    print('not ok rock')

                    subject = "Nooooooooo Rocket chat what????"
                    message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                    # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                    emailto = []
                    emailto.append("quentin.kral@gmail.com")
                    emailto.append("carbonfreeconf@gmail.com")

                    email = EmailMessage(
                        subject,
                        message,
                        'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                        emailto,  # to
                        # getemails,  # bcc
                        # reply_to=replylist,
                        headers={'Message-From': 'www.carbonfreeconf.com'},
                    )
                    email.content_subtype = "html"

                    #email.send(fail_silently=False)

                slugtitleconf = slugify(str('%s' % (
                        'poster_' + talk.user.first_name + ' ' + talk.user.last_name + '_' + talk.title)))
                print('slug', slugtitleconf)
                pprint(rocket.groups_create(slugtitleconf).json())

                # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                keyroom = contentroom['group']['_id']
                # print('keyroom', keyroom)
                pprint(rocket.groups_set_description(room_id=keyroom,
                                                     description="Poster by " + talk.user.first_name + ' ' + talk.user.last_name).json())
                pprint(rocket.groups_set_topic(room_id=keyroom,
                                               topic=talk.title).json())

                contentuser = rocket.users_info(username=request.user.username).json()
                key = contentuser['user']['_id']
                # print('keyo', key, keyroom)

                pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())

                # add moderators to a room tbbbbbbbbbbbbb
                modo = rocket.groups_add_moderator(room_id=keyroom, user_id=key).json()
                # print(modo)

                # def chat_post_message(self, text, room_id=None, channel=None, **kwargs):
                textmes = 'This is the room dedicated to the poster by ' + talk.user.first_name + ' ' + talk.user.last_name + ' whose ' \
                                                                                                                                      'title is: ' + talk.title + '. We encourage the poster presenter to record a voice message explaining their ' \
                                                                                                                                                                      'poster to participants (just click on the microphone at the bottom right of the chat room). You can also record a video if needed. ' \
                                                                                                                                                                      'Other participants can discuss with the presenter via chat or call them if needed (use the phone at the top right corner).'
                pprint(rocket.chat_post_message(text=textmes, room_id=keyroom).json())

                # def find_or_create_invite(self, rid, days, max_uses):

                invite = rocket.find_or_create_invite(rid=keyroom, days=0, max_uses=0).json()
                # print('invite', invite, invite['url'], invite['_id'])
                talk.poster_invite_chat_url = "https://chat.carbonfreeconf.com/invite/" + \
                                                  invite['_id']  # invite['url'] that a go.rocket not iframable

                rocket.logout()

        talk.save()


        response_data['loopnum'] = loopnum
        response_data['url'] = url
        response_data['type'] = talk.type
        response_data['cf'] = talk.conference.id
        response_data['success'] = 1
        # mettre un spinner et upload sur bm

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def changeschedulemulti(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')

        response = {}
        response['success'] = 0

        response['success'] = 1
        response['confnum'] = confnum

        # mettre un spinner et upload sur bm

        #print('hukhkjhkjhjkhfkhdjfhdjfhdkfjhdkjfhdjkkfhdjkfhkdj')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def adminpanel(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        response = {}

        if confnum:
            #print('confnum',confnum)
            response['success'] = True
            response['confnum'] = confnum
            #conftitle=CreateConf.objects.filter(id=confnum).values_list('title',flat=True)[0]
            request.session['confid']=confnum
            #return HttpResponseRedirect(reverse('my_app:createconf'))

            # print('hukhk')

        else:
            response['success'] = False
            #return HttpResponseRedirect(reverse('my_app:home'))

        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )

    else:
        return HttpResponseRedirect(reverse('my_app:home'))

def deletetalk(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        talkid = request.POST.get('talkid')

        response = {}

        if confnum:
            #print('confnum',confnum)
            response['success'] = True
            response['confnum'] = confnum
            #conftitle=CreateConf.objects.filter(id=confnum).values_list('title',flat=True)[0]
            request.session['talk']=talkid
            #request.session['talk']
            #return HttpResponseRedirect(reverse('my_app:createconf'))

            # print('hukhk')

        else:
            response['success'] = False
            #return HttpResponseRedirect(reverse('my_app:home'))

        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )

    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def changesessionmulti(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        che = request.POST.get('che')

        #print('confnum',confnum,che)
        response = {}

        warn=False
        peuxpas=0
        cantchange=False
        #get priviledges for participants

        conf = CreateConf.objects.filter(id=confnum)[0]
        if conf.masterconf:
            authori=conf.parsession

        else:
            mastc=CreateConf.objects.filter(masterconfpass=conf.masterconfpass,masterconf=True)[0]
            authori=mastc.parsession

        masterconfcreatorid = CreateConf.objects.filter(masterconfpass=conf.masterconfpass,
                                                        masterconf=True).values_list('user', flat=True)[0]
        masterconfcreator = User.objects.filter(id=masterconfcreatorid)[0]

        #print('z',request.user,masterconfcreator)
        #check if one talk accepted somewhere already
        valid=0
        if authori==True:
            if RegisterConf.objects.filter(user=request.user, conference__masterconfpass=conf.masterconfpass, status=1).exists():
                valid=1

        chat=0

        supuser=0
        if RegisterConf.objects.filter(user=request.user, conference__masterconfpass=conf.masterconfpass,conference__masterconf=True,
                                       status=1,role=3).exists():
            supuser=1

        #natacha
        if supuser==1:
            if not UserLink.objects.filter(conference__id=confnum, user=request.user):
                userconf = CreateConf.objects.filter(id=confnum)[0]

                # userconf=CreateConf.objects.filter(conference=conftopass).values_list('user', flat=True)[0]
                userlink, userlinkcrea = UserLink.objects.get_or_create(conference=conf,
                                                                        user=request.user,
                                                                        defaults={
                                                                            'mainuser': userconf.user})
                userlink.save()

        if RegisterConf.objects.filter(user=request.user, conference__id=confnum, status=1).exists():
            #print('kil')
            talk=RegisterConf.objects.filter(user=request.user, conference__id=confnum, status=1)
            for t in talk:
                #print('ty:',t.title)
                if t.type==5:
                    #t.status=0
                    if request.user != masterconfcreator:
                        if(len(talk)==1) and (conf.subtomastautomatic) and (conf.masterconf):
                            peuxpas = 2
                            sta=1
                        else:
                            #print('del',t)
                            t.delete()
                            chat=2
                            sta=0
                    else:
                        #print('cantchange')
                        cantchange=True
                        sta=1
                else:
                    peuxpas=1
                    sta=1

        else:
            if RegisterConf.objects.filter(user=request.user, conference__id=confnum, status=0).exists():
                #print('kit')
                talk = RegisterConf.objects.filter(user=request.user, conference__id=confnum, status=0)
                ok=0
                sta=0
                for t in talk:
                    #print('tyr:', t.title,t.type,t.status,valid)
                    if t.type == 5:
                        if che=='false':
                            t.delete()
                            #chat=2
                            sta=0
                            #print('del')
                            ok=1
                        else:
                            if authori == True:
                                if valid==1:
                                    sta=1
                                    chat=1
                                    t.status = 1
                                    t.save()
                                ok=1

                #print('ok',ok)
                if ok==0:
                    #conf = CreateConf.objects.filter(id=confnum)[0]
                    sta=0
                    #print('hu')
                    if che == 'false':
                        warn=True
                    else:
                        if authori == True:
                            if valid==1:
                                sta=1
                                chat=1
                        if supuser==1:
                            rolee=3
                        else:
                            rolee=2
                        talk = RegisterConf.objects.create(user=request.user, conference=conf, title='Attendance Only', status=sta, type=5, role=rolee)

            else:
                #print('ki')
                sta = 0
                if che == 'false':
                    print('this should never happen')
                else:

                    if authori == True:
                        if valid==1:
                            sta = 1
                            chat=1
                    #conf=CreateConf.objects.filter(id=confnum)[0]

                    if supuser == 1:
                        rolee = 3
                    else:
                        rolee = 2

                    talk = RegisterConf.objects.create(user=request.user, conference=conf, title='Attendance Only', status=sta, type=5, role=rolee)

        if chat==1 or chat==2:
            with sessions.Session() as session2:
                # log-in

                try:
                    rocket = RocketChat('carbonfreeconf', settings.SECRETROCK,
                                        server_url='https://chat.carbonfreeconf.com', session=session2)
                except:
                    subject = "Nooooooooo Rocket chat what????"
                    message = "Oups <strong>Rocket chat</strong> fait de la merde!!!!"
                    # message+="<img src='https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/carbonfreeconf_logo_title.svg' width='200' height='60' alt='Make my own CarbonFreeConf workshop'>"

                    emailto = []
                    emailto.append("quentin.kral@gmail.com")
                    emailto.append("carbonfreeconf@gmail.com")

                    email = EmailMessage(
                        subject,
                        message,
                        'CarbonFreeConf <communication@carbonfreeconf.com>',  # from
                        emailto,  # to
                        # getemails,  # bcc
                        # reply_to=replylist,
                        headers={'Message-From': 'www.carbonfreeconf.com'},
                    )
                    email.content_subtype = "html"

                    #email.send(fail_silently=False)
                if conf.title_extra:
                    slugtitleconf = slugify(str('%s' % (conf.title +' '+conf.title_extra)))
                else:
                    slugtitleconf = slugify(str('%s' % (conf.title)))
                #print('slug', slugtitleconf)
                list = rocket.groups_list_all().json()
                # print('l', list)
                # pprint(rocket.groups_info(room_name=slugtitleconf).json())
                contentroom = rocket.groups_info(room_name=slugtitleconf).json()
                #print('c', contentroom)
                if contentroom['success'] == True:
                    keyroom = contentroom['group']['_id']

                    contentuser = rocket.users_info(username=request.user.username).json()
                    key = contentuser['user']['_id']
                    # print('keyo',key,keyroom)

                    if chat==1:
                        pprint(rocket.groups_invite(room_id=keyroom, user_id=key).json())
                    if chat==2:
                        pprint(rocket.groups_kick(room_id=keyroom, user_id=key).json())

                    if conf.title_extra:
                        slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' +conf.title +' '+conf.title_extra)))
                    else:
                        slugtitleconfcafe = slugify(str('%s' % ('Coffee break for ' + conf.title)))

                    contentroomcafe = rocket.groups_info(room_name=slugtitleconfcafe).json()
                    if contentroomcafe['success']:
                        #print('c', contentroomcafe)
                        keyroomcafe = contentroomcafe['group']['_id']

                        contentusercafe = rocket.users_info(username=request.user.username).json()
                        keycafe = contentusercafe['user']['_id']
                        # print('keyo',key,keyroom)

                        if chat==1:
                            pprint(rocket.groups_invite(room_id=keyroomcafe, user_id=keycafe).json())
                        if chat==2:
                            pprint(rocket.groups_kick(room_id=keyroomcafe, user_id=keycafe).json())

        response['peuxpas'] = peuxpas
        response['cantchange'] = cantchange

        response['success'] = 1
        response['sta'] = sta
        response['warn'] = warn
        response['confnum'] = confnum

        # mettre un spinner et upload sur bm

        #print('hukhk')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def votepoll(request):
    if request.method == 'POST':
        #confnum = request.POST.get('confnum')

        #print('oui')
        formdata = json.loads(request.POST.get('formData'))
        # confnum = request.POST.get('confnum')
        # pquestion = request.POST.get('pquestion')

        #print('len', len(formdata))

        nbchoices = len(formdata)
        # abs = request.POST.get('abs')
        response = {}

        if nbchoices>2:
            #print('f', formdata)
            #print('f1', formdata[2]['value'])

            s = formdata[2]['value']

            idchoice=s[:s.find('id')].replace('i', '')
            idq=s[s.find('id'):].replace('id', '')

            #print('idchoice',idchoice)
            #print('idq',idq)

            pollq=CreatePoll.objects.filter(id=idq)[0]

            quest=ChoicePoll.objects.filter(id=idchoice)[0]

            allquests=ChoicePoll.objects.filter(poll__id=idq)
            al=0
            for q in allquests:
                if q.votes.exists(request.user.id):
                    al=1

            #print('quest',quest)
            if al == 0:

                quest.votes.up(request.user.id)
                quest.save()

                pollq.change=True
                pollq.save()

                response['success'] = True
            else:
                response['success'] = False
                response['already'] = True

            #print('f2', formdata[1]['value'])
            #confnum = formdata[1]['value']
            #pquestion = formdata[2]['value']
        else:
            response['success'] = False
            response['miss'] = True



        #response['title'] = conf.title

        # mettre un spinner et upload sur bm

        #print('votepoll')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))

def changeconfdau(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')

        checkedornot = request.POST.get('checkedornot')

        #print('cofndkscheckedornot', confnum, checkedornot)

        conf = CreateConf.objects.filter(id=confnum)[0]  # .values_list('idconf',flat=True)[0]

        response = {}
        alpaid = 0

        if checkedornot == 'true':
            if conf.status < 2:
                conf.acceptconf = True
                # print('ty')
                response['success'] = 0
            else:
                alpaid = 2

        else:
            # print('tyee')
            if conf.status < 2:
                conf.status = 0
                conf.acceptconf = False
            else:
                alpaid = 1

            response['success'] = 1

        conf.save()

        if alpaid == 1:
            response['success'] = 2
        elif alpaid == 2:
            response['success'] = 3

        response['confnum'] = confnum
        response['title'] = conf.title

        # mettre un spinner et upload sur bm

        #print('hukhkjhkj')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )
    else:
        return HttpResponseRedirect(reverse('my_app:home'))

def validateall(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        selected = request.POST.getlist('fav[]')

        #checkedornot = request.POST.get('checkedornot')

        #print('cofndkscheckedornot', confnum, checkedornot)

        conf = CreateConf.objects.filter(id=confnum)[0]  # .values_list('idconf',flat=True)[0]

        print("selected",selected)
        response = {}

        if conf.size == '<10':
            size = 10
        elif conf.size == '10-50':
            size = 50
        elif conf.size == '50-100':
            size = 100
        elif conf.size == '100-300':
            size = 300
        elif conf.size == '300-500':
            size = 500
        elif conf.size == '500-1000':
            size = 1000

        if len(selected)>0:
            for i in range(len(selected)):
                #validate
                userr = User.objects.filter(email__iexact=selected[i])[0]
                nbtalks = RegisterConf.objects.filter(user=userr, conference=conf)
                #print('nbtalks',len(nbtalks))
                #valperson(request, email=selected[i], confnum=confnum)
                for j in range(len(nbtalks)):
                    joe = utils.funcvalidate(conf, size, userr, j, 2)
                    # if RegisterConf(conference=objects,status=1,socloc=1ou2,role=3)
                    #print('regh',i,j)
            #if joe == 1:
            #    return HttpResponseRedirect(reverse('my_app:createconf'))
            response['success'] = 1

        else:
            response['success'] = 0


        response['confnum'] = confnum

        # mettre un spinner et upload sur bm

        #print('hukhkjhkj')
        return HttpResponse(
            json.dumps(response),
            content_type="application/json"
        )

    else:
        return HttpResponseRedirect(reverse('my_app:home'))

def importrec(request):
    if request.method == 'POST':
        confnum = request.POST.get('confnum')
        talkid = request.POST.get('talkidd')

        talk = RegisterConf.objects.filter(id=talkid)[0]
        idconf = RegisterConf.objects.filter(id=talkid).values_list('idconf', flat=True)[0]

        api_url, headers = utils.connection('conferences/' + str(idconf))
        response = requests.get(api_url, headers=headers)
        # print(response)
        if response.status_code == 200:
            info = json.loads(response.content.decode('utf-8'))
            # print(info,info['conference'])
            # return HttpResponseRedirect(info['enter_uri'])if "urls" in record["entities"]:
            #print('meesss', info)
            if 'recording_id' in info:
                # print('recidiii')
                # record on visio
                talk.recidconf = info['recording_id']
                talk.mp4_url_bm = info['mp4_url']
                talk.save()
            else:
                # mettre un message
                messages.error(request,
                               'Nothing was recorded, you should do it again and press the record button in the conference room or wait a little.',
                               extra_tags='record')
                #print('mettre messages.error ff')
        else:
            # mettre un message
            messages.error(request,
                           'You should wait until we finish making several versions of your recording in the background.',
                           extra_tags='record')
            #print('mettre messages.error')

        return HttpResponseRedirect(reverse('my_app:website', args=(confnum, 'mytalks')))
    else:
        return HttpResponseRedirect(reverse('my_app:home'))


def posters(request, posterid=None):
    # conftopass = CreateConf.objects.filter(id=confnum)[0]
    # userr = User.objects.filter(email__iexact=email)[0]
    instance = RegisterConf.objects.filter(id=posterid)[0]
    #print('instghjgkujgkgkjgkjgkjjgkjgkjgkjgjkgkj', instance, posterid)
    a = 100000000
    b = 999999999
    n = random.randint(a, b)

    if request.user.is_anonymous:
        #print('anonym')
        userr=User.objects.filter(username='admin')[0]
        #print('u',userr)
    else:
        userr=request.user

    PosterView.objects.get_or_create(
        user=userr,
        poster=instance,
        timestamp=timezone.now(),
        number=str(n)
    )

    #print('iii',instance,posterid)

    totalviews=PosterView.objects.filter(poster=instance).count()

    context = {
        'instance': instance,
        'totalviews':totalviews
    }
    return render(request, 'my_app/modalposter.html', context)

def poll(request, confnum=None):
    conftopass = CreateConf.objects.filter(id=confnum)[0]
    # userr = User.objects.filter(email__iexact=email)[0]
    #instance = RegisterConf.objects.filter(id=posterid)[0]
    #print('instghjgkujgkpoll')
    # print('i',instance)
    context = {
        'conftopass':conftopass
    }
    return render(request, 'my_app/modalpoll.html', context)





def wholeprogram(request, confnum=None):
    stuff_for_frontend = {}
    # load all daughter confs + master

    confm = CreateConf.objects.filter(id=confnum)[0]
    #print('confm', confm, confm.masterconf)

    tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
    if tzloc:
        local = pytz.timezone(tzloc)
    else:
        local = pytz.timezone('UTC')

    timestart = ProgramDesign.objects.filter(conference=confm).values_list('timestart', flat=True)[0]
    timefinish = ProgramDesign.objects.filter(conference=confm).values_list('timefinish', flat=True)[0]
    mineventheight = ProgramDesign.objects.filter(conference=confm).values_list('mineventheight', flat=True)[0]
    heighthr = ProgramDesign.objects.filter(conference=confm).values_list('heighthr', flat=True)[0]
    minieventtime = ProgramDesign.objects.filter(conference=confm).values_list('minieventtime', flat=True)[0]
    opacity = ProgramDesign.objects.filter(conference=confm).values_list('opacity', flat=True)[0]

    if timefinish != 24 and timestart != 0:

        utc = pytz.utc
        utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
        utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

        # yesterday = datetime.today()
        # yesterday = yesterday.replace(hour=10)
        print('utcnow', utc_now_s, utc_now_f)

        # convert to UTC
        utc_date_time_s = utc_now_s.astimezone(local)
        # get time
        utc_time_s = utc_date_time_s.time()
        timestart = utc_date_time_s.hour

        utc_date_time_f = utc_now_f.astimezone(local)
        # get time
        utc_time_f = utc_date_time_f.time()
        timefinish = utc_date_time_f.hour

        if timestart > timefinish:
            timestart = 0
            timefinish = 24

        print('ts2', timestart, timefinish)



    stuff_for_frontend.update({'mineventheight': mineventheight,
    'timestart': timestart,
    'timefinish': timefinish,
    'heighthr': heighthr,
    'minieventtime': minieventtime,
    'opacity': opacity/10.})

    if confm.masterconf:
        #print('id', confm.masterconfpass)

        confd = CreateConf.objects.filter(masterconfpass=confm.masterconfpass, daughterconf=True,status__gt=0).order_by('masterconfdaughterposition')
        start_date = confm.start_date
        start_date = start_date.strftime("%Y-%m-%d")

        #timestartt = ProgramDesign.objects.filter(conference__masterconfpass=confm.masterconfpass).order_by('timestart').first()
        #timestart=timestartt.timestart#values_list('timestart', flat=True)[0]
        #timefinisht = ProgramDesign.objects.filter(conference__masterconfpass=confm.masterconfpass).order_by('-timefinish').first()
        #timefinish=timefinisht.timefinish#.values_list('timefinish', flat=True)[0]


        #print('ts1', timestart, timefinish,timestartt,timefinisht)

        #if timefinish != 24 and timestart != 0:

         #   utc = pytz.utc
         #   utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
         #   utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

            # yesterday = datetime.today()
            # yesterday = yesterday.replace(hour=10)
            #print('utcnow', utc_now_s, utc_now_f)

            # convert to UTC
            #utc_date_time_s = utc_now_s.astimezone(local)
            # get time
            #utc_time_s = utc_date_time_s.time()
           # timestart = utc_date_time_s.hour

            #utc_date_time_f = utc_now_f.astimezone(local)
            # get time
            #utc_time_f = utc_date_time_f.time()
            #timefinish = utc_date_time_f.hour

            #if timestart > timefinish:
            #    timestart = 0
            #    timefinish = 24

            #print('ts2', timestart, timefinish)


        #else:
        #    if timefinish == 24:
        #        timefinish=24
        #    timestart = 0

        #stuff_for_frontend.update({'timestart': timestart,
        #                           'timefinish': timefinish,
        #                           })
        #print('confd', confd)
        start_date_daughter = []
        for i in range(len(confd)):
            #print('cc', confd[i].start_date)
            start_date_daughter.append(confd[i].start_date.strftime("%Y-%m-%d"))

        stuff_for_frontend.update({'confds': confd,
                                   'confm': confm,
                                   'start_date': start_date,
                                   'start_date_daughter': start_date_daughter})

    else:
        # it's not a master conf so you can't see the program
        prob = "You are not the master conference organizer so you can't see the whole conference program"
        stuff_for_frontend.update({'prob': prob})

    return render(request, 'my_app/wholeprogram.html', stuff_for_frontend)


def program(request, confnum=None):
    stuff_for_frontend = {}
    confprog = CreateConf.objects.filter(id=confnum)[0]
    #print('confprog', confprog)
    start_date = confprog.start_date
    start_date = start_date.strftime("%Y-%m-%d")

    tzloc = request.session.get('django_timezone', '')  # request.session['django_timezone']
    if tzloc:
        local = pytz.timezone(tzloc)
    else:
        local = pytz.timezone('UTC')

    timestart = ProgramDesign.objects.filter(conference=confprog).values_list('timestart', flat=True)[0]
    timefinish = ProgramDesign.objects.filter(conference=confprog).values_list('timefinish', flat=True)[0]
    mineventheight = ProgramDesign.objects.filter(conference=confprog).values_list('mineventheight', flat=True)[0]
    heighthr = ProgramDesign.objects.filter(conference=confprog).values_list('heighthr', flat=True)[0]
    minieventtime = ProgramDesign.objects.filter(conference=confprog).values_list('minieventtime', flat=True)[0]
    opacity = ProgramDesign.objects.filter(conference=confprog).values_list('opacity', flat=True)[0]

    if timefinish != 24 and timestart != 0:

        utc = pytz.utc
        utc_now_s = datetime.now(tz=utc).replace(hour=timestart)
        utc_now_f = datetime.now(tz=utc).replace(hour=timefinish)

        # yesterday = datetime.today()
        # yesterday = yesterday.replace(hour=10)
        print('utcnow', utc_now_s, utc_now_f)

        # convert to UTC
        utc_date_time_s = utc_now_s.astimezone(local)
        # get time
        utc_time_s = utc_date_time_s.time()
        timestart = utc_date_time_s.hour

        utc_date_time_f = utc_now_f.astimezone(local)
        # get time
        utc_time_f = utc_date_time_f.time()
        timefinish = utc_date_time_f.hour

        if timestart > timefinish:
            timestart = 0
            timefinish = 24

        print('ts2', timestart, timefinish)

    stuff_for_frontend.update({'mineventheight': mineventheight,
                               'timestart': timestart,
                               'timefinish': timefinish,
                               'heighthr': heighthr,
                               'minieventtime': minieventtime,
                                'opacity': opacity/10.})


    stuff_for_frontend.update({'confprog': confprog,
                               'start_date': start_date})

    return render(request, 'my_app/program.html', stuff_for_frontend)


def sched(request, confnum=None):
    #print('c', confnum)
    if request.method == 'POST':
        session2 = request.POST.get('session2')
        len2 = request.POST.get('len2')

        #print('uioo', session2, len2)

    confd = CreateConf.objects.filter(id=confnum)[0]
    start_date = confd.start_date
    start_date = start_date.strftime("%Y-%m-%d")

    # print('quoi.?',session)

    stuff_for_frontend = {'loca': "createconf", 'confnum': confnum, 'start_date': start_date, 'interactive': 'true',
                          'session': session2, 'len2': len2}

    return render(request, 'my_app/schedule.html', stuff_for_frontend)


def searcharchive(request):
    # queryset = Visio.objects.all()
    visioquery = CreateVisio.objects.exclude(vimeo_url__isnull=True).exclude(vimeo_url='').filter(
        conference__whorecording__in=["Everyone","Only conference participants"], testroom=False)#.order_by('-date')

    query = request.GET.get('q')
    print('query',query)
    context = {
        'qs': query,
        'search': True
    }
    #print('qs', query)
    urll = []
    linkl = []
    titl = []
    info = []
    recs = []
    rece = []
    start = []
    end = []
    nbviews = []
    accesso = []
    redvimurl2 = []

    if query:
        queryset = visioquery.filter(
            Q(conference__title__icontains=query) |
            Q(rectitles__icontains=query) |
            Q(conference__abstract__icontains=query)
        ).distinct()

        for vidl in queryset:#bobby
            taskid2 = vidl.mp4_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
            arr = taskid2.split(',')

            taskid3 = vidl.vimeo_url.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
            arr2 = taskid3.split(',')

            if vidl.recstart:
                startnew = vidl.recstart.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                arrs = startnew.split(',')
            if vidl.recend:
                endnew = vidl.recend.replace('[', '').replace(']', '').replace("'", "").replace(' ', '')
                arre = endnew.split(',')

            if vidl.rectitles:
                taskid4 = vidl.rectitles.replace('[', '').replace(']', '').replace("'", '')#.replace(" ", "")
                arr4 = taskid4.split(',')

            if vidl.rights:
                taskid5 = vidl.rights.replace('[', '').replace(']', '').replace("'", '')  # .replace(" ", "")
                arr5 = taskid5.split(',')
            else:
                arr5 = []
                if vidl.conference.whorecording == "Everyone":
                    for k in range(len(arr2)):
                        arr5.append('anybody')
                elif vidl.conference.whorecording == "Only conference participants":
                    for k in range(len(arr2)):
                        arr5.append('disable')
                else:
                    for k in range(len(arr2)):
                        arr5.append('nobody')

            cansee = False
            if request.user.is_authenticated:

                if vidl.conference.masterconf or vidl.conference.daughterconf:
                    parses = CreateConf.objects.filter(masterconfpass=vidl.conference.masterconfpass,
                                                       masterconf=True).values_list('parsession', flat=True)[0]

                    if parses:
                        print('y3')

                        alloweduserstoseevideo = RegisterConf.objects.filter(
                            conference__masterconfpass=vidl.conference.masterconfpass, user=request.user,
                            status=1)
                    else:
                        print('y4')

                        alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                             user=request.user,
                                                                             status=1)
                else:
                    print('y5')

                    alloweduserstoseevideo = RegisterConf.objects.filter(conference=vidl.conference,
                                                                         user=request.user,
                                                                         status=1)
                if alloweduserstoseevideo:
                    print('y6')

                    cansee = True

                if cansee:
                    for kf in range(len(arr2)):
                        accesso.append(True)
                else:
                    for kf in range(len(arr2)):
                        accesso.append(False)
            else:
                for kf in range(len(arr2)):
                    accesso.append(False)

            # if vidl.subj:
            #    taskid5 = vidl.subj.replace('[', '').replace(']', '').replace("'", '').replace(" ", "")
            #    arr5 = taskid5.split(',')

            for ij in range(len(arr2)):
                if arr5[ij].lstrip() == 'anybody' or (arr5[ij].lstrip()=='disable' and accesso[ij]==True):
                    print('art',query,arr4[ij])
                    if query.lower() in vidl.conference.title.lower() or query.lower() in vidl.conference.abstract.lower() or query.lower() in arr4[ij].lower():# or query.lower() in :
                        redvimurll = arr2[ij].split('/')[2]

                        import vimeo

                        client = vimeo.VimeoClient(
                            token='ad1e934c05fe16362aebbeac14a3bee6',
                            key='a8c8c13e49a86bb01b1c1f398a3e94b38f4e5552',
                            secret=settings.SECRETVIMEO
                        )

                        response = client.get('/videos/' + redvimurll, params={"fields": "uri,status,duration,stats"})

                        print('response.status_code',response.status_code)
                        if response.status_code == 200:
                            print('good')

                            print('ffnkjvndfkjvndfkjvbndfkj2', redvimurll, response.json())
                            print('ffnkjv', response.json()['status'])

                            # videostatus = response.json()['status']
                            # videodur = response.json()['duration']  # in seconds
                            videonbvie = response.json()['stats']
                            videonbview = videonbvie['plays']
                            nbviews.append(videonbview)
                        else:
                            nbviews.append('Come back later to see the number of views')

                        #print('redvimhomezz', redvimurll)
                        mp4_urll = "https://vimeo.com/" + redvimurll
                        redvimurl2.append(redvimurll)
                        vim_play_urll = "https://player.vimeo.com/video/" + redvimurll
                        urll.append(vim_play_urll)
                        info.append(vidl)
                        start.append(parse_datetime(arrs[ij]))
                        end.append(parse_datetime(arre[ij]))
                        #print('urllzz', urll)
                        if vidl.rectitles:
                            titl.append(arr4[ij].replace("#@&", ",").replace("($%£)", "'"))
                        else:
                            titl.append('')
                        if vidl.recstart:
                            recs.append(parse_datetime(arrs[ij]))
                        if vidl.recend:
                            rece.append(parse_datetime(arre[ij]))

                        # if vidl.subj:
                        #   subjl.append(arr5[ij])

                        linkl.append(mp4_urll)
                        # arr[ij] + "?access_token=" + utils.generateToken()

            # redvimurll = vidl.vimeo_url.split('/')[2]
            # print('redvim', redvimurll)
            # mp4_urll = "https://vimeo.com/" + redvimurll
            # vim_play_urll = "https://player.vimeo.com/video/" + redvimurll

            if urll:
                # url=
                # session
                # start
                # myList = [1, 2, 3, 100, 5]
                # asorted = sorted(range(len(start)), key=start.__getitem__)

                B = sorted(range(len(start)), key=lambda x: start[x])
                asorted = sorted(range(len(start)), key=lambda x: B[x])

                # print('indices',C)
                # print('myl', asorted)
                # print('arrssss', start)
                # url = url[asorted]
                urll = [x for _, x in sorted(zip(asorted, urll), reverse=True)]
                redvimurl2 = [x for _, x in sorted(zip(asorted, redvimurl2), reverse=True)]

                # session = [x for _, x in sorted(zip(asorted, session))]
                # print('end', end)
                # print('zip(asorted, end)',list(zip(asorted, end)))
                # print('sorted(zip(asorted, end))',sorted(zip(asorted, end)))
                # qq_question = [x for y, x in sorted(zip(qq_vote, qq_question), key=lambda x: x[0], reverse=True)]

                # les end sont pas bons de base, verifiez pk
                # end = [x for y, x in sorted(zip(asorted, end), key=lambda x: x[0])]
                end = [x for y, x in sorted(zip(asorted, end), reverse=True)]

                # titl, linkl, nbviews, info
                titl = [x for y, x in sorted(zip(asorted, titl), reverse=True)]
                linkl = [x for y, x in sorted(zip(asorted, linkl), reverse=True)]
                nbviews = [x for y, x in sorted(zip(asorted, nbviews), reverse=True)]
                info = [x for y, x in sorted(zip(asorted, info), reverse=True)]

                # print('info2',urll,len(urll))
                # titles = [x for _, x in sorted(zip(asorted, titles))]
                # rights = [x for _, x in sorted(zip(asorted, rights))]

                # sorted_arr2 = arr2[arr1inds[::-1]]
                # print('url', url)
                # print('session', session)
                # print('end', end)
                # print('titles', titles)

                start.sort(reverse=True)

        #print('urll2zz', urll)
        print('titz',titl)
        context.update({
            'queryset': queryset,
            # 'status': '0',
            'infoz': info,
            'linklz': linkl,
            'urllz': urll,
            'redvimurl2':redvimurl2,
            'urllz2': urll,
            'titz': titl,
            'recsz': start,
            'recez': end,
            'nbviews':nbviews
            # 'subj':subjl
        })

    return render(request, 'my_app/archive.html', context)


def searcharchiveproc(request):
    # queryset = Visio.objects.all()
    procquery = Proceeding.objects.exclude(text__isnull=True).exclude(text='').filter(conference__proceedin=True,
                                                                                      status=1).order_by('-updated_on')

    query = request.GET.get('q')
    context = {
        'qs': query,
        'search': True
    }
    #print('qs', query, procquery)

    if query:
        queryset = procquery.filter(
            Q(title__icontains=query) |
            Q(text__icontains=query)
        ).distinct()

        #print('e', queryset)
        html2 = []
        i = []
        html = queryset.values_list('texthtml', flat=True)
        j = 0
        for htm in html:
            htm = htm.replace("katex--inline", "math")
            htm = htm.replace("katex--display", "math")
            html2.append(htm)
            i.append(j)
            j = j + 1
        # status = '4'  # nada#0ok
        # stuff_for_frontend.update({
        #    'status': status,
        # })

        context.update({'procs': queryset,
                        'html': html2,
                        'status': '4',
                        'ind': i
                        })

    return render(request, 'my_app/archiveproc.html', context)


def messagetoall(request, confnum=None):
    # check if message to pass
    context = {}
    #print('confnum',confnum)

    if confnum:
        mess = CreateConf.objects.filter(id=confnum).values_list('messagetoall', flat=True)[0]

        conf = CreateConf.objects.filter(id=confnum)[0]

        if conf.daughterconf:
            #print('id', conf.masterconfpass)
            messmast = \
            CreateConf.objects.filter(masterconfpass=conf.masterconfpass, masterconf=True).values_list('messagetoall',
                                                                                                       flat=True)[0]
            # messmast = CreateConf.objects.filter(id=confnum).values_list('messagetoall', flat=True)[0]
            context.update({'messmast': messmast})

        display = 0
        if mess:
            display = 1
        template = get_template('my_app/messagetoall.html')
        context.update({'mess': mess, 'display': display})
        return HttpResponse(template.render(context, request))
    else:
        return 0

def opensource(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/opensource.html', stuff_for_frontend)

def exampleModalhome(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exampleModalhome.html', stuff_for_frontend)

def exampleModalweb(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exampleModalweb.html', stuff_for_frontend)

def exampleModalprog(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exampleModalprog.html', stuff_for_frontend)

def exampleModalpart(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exampleModalpart.html', stuff_for_frontend)

def exampleModalcrea(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/exampleModalcrea.html', stuff_for_frontend)


@confirm_password
def threedconf(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/3dconf.html', stuff_for_frontend)

@confirm_password
def threedconf2(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/3dconf2.html', stuff_for_frontend)


def loaderio(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/loaderio.html', stuff_for_frontend)

@confirm_password
def stripe(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return render(request, 'my_app/stripe.html', stuff_for_frontend)

# new
@csrf_exempt
def stripeconfig(request):
    if request.method == 'GET':
        stripe_config = {'publicKey': settings.STRIPE_PUBLISHABLE_KEY}
        return JsonResponse(stripe_config, safe=False)



@csrf_exempt
def stripewebhook(request):
    import stripe
    stripe.api_key = settings.STRIPE_SECRET_KEY
    endpoint_secret = settings.STRIPE_ENDPOINT_SECRET
    payload = request.body
    sig_header = request.META['HTTP_STRIPE_SIGNATURE']
    event = None

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, endpoint_secret
        )
    except ValueError as e:
        # Invalid payload
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        # Invalid signature
        return HttpResponse(status=400)

    # Handle the checkout.session.completed event
    if event['type'] == 'payment_intent.succeeded':
        payment_intent = event.data.object  # contains a stripe.PaymentIntent
        print('PaymentIntent was successful!',event.data.object)
        print('PaymentIntent ID',event.data.object.id)
        if Transac.objects.filter(transacid=event.data.object.id):
            print('yes',event.data.object.id)
            transac=Transac.objects.filter(transacid=event.data.object.id)[0]
            transac.validatedwebhook=True
            transac.save()
    #elif event['type'] == 'payment_method.attached':
    #    payment_method = event.data.object  # contains a stripe.PaymentMethod
    #    print('PaymentMethod was attached to a Customer!')
        # ... handle other event types
    #else:
    #    print('Unhandled event type {}'.format(event.type))

    #if event['type'] == 'checkout.session.completed':
    #    print("Payment was successful.",event)
        # TODO: run some custom code here
        #update database for the right person id and then check in waiting when updated with ajax every 5s
        #if 1==1:# comefrom=='createconf':
            #conftomodif=CreateConf.objects.filter('')



    return HttpResponse(status=200)

#Button de traduction
def translate(language):
    cur_language = get_language()
    try:
        activate(language)
        text = gettext('hello')
    finally:
        activate(cur_language)
    return text


def comingsoon(request):

    stuff_for_frontend = {}
    return render(request, 'my_app/comingsoon.html', stuff_for_frontend)

def default(request):
    stuff_for_frontend = {
        'pricing': 1
    }

    return HttpResponseRedirect(reverse('my_app:home'))
