# Generated by Django 3.0.4 on 2020-05-14 12:42

import conf.storage_backends
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CreateConf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Conference title')),
                ('abstract', models.TextField(max_length=500, verbose_name='Conference abstract')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Published'), (2, 'Paid')], default=0)),
                ('subject', models.CharField(default='', max_length=100, verbose_name='Conference subject')),
                ('size', models.CharField(choices=[('<10', '<10 people'), ('10-50', '10-50 people'), ('50-100', '50-100 people'), ('100-200', '100-200 people'), ('200-500', '200-500 people'), ('500-1000', '500-1000 people')], default='50-100', max_length=9, verbose_name='Conference size')),
                ('privacy', models.CharField(choices=[('public', 'public'), ('private', 'private')], default='public', max_length=9)),
                ('dialin', models.BooleanField(default=False, verbose_name='Enable dial-in?')),
                ('recording', models.BooleanField(default=False, verbose_name='Record the conference?')),
                ('proceedin', models.BooleanField(default=False, verbose_name='Presenters must write proceedings after the conference?')),
                ('whorecording', models.CharField(choices=[('Everyone', 'Everyone'), ('Only conference participants', 'Only conference participants'), ('Only through a private link', 'Only through a private link')], default='Everyone', max_length=50, verbose_name='Who can see the recording?')),
                ('youtuberecording', models.BooleanField(default=False, verbose_name='Put the recording on youtube?')),
                ('room_logo', models.ImageField(blank=True, null=True, storage=conf.storage_backends.PublicMediaStorage(), upload_to='static/logos/', verbose_name='')),
                ('background', models.ImageField(blank=True, null=True, storage=conf.storage_backends.PublicMediaStorage(), upload_to='static/back/', verbose_name='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search', models.CharField(max_length=500)),
                ('created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Searches',
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('homecontent', models.TextField(verbose_name='Text for the homepage')),
                ('rationale', models.TextField(verbose_name='Rationale of your conference')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('conference', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orcid', models.CharField(blank=True, max_length=16, verbose_name='Orcid ID')),
                ('institute', models.TextField(max_length=200, null=True, verbose_name='Institute/Company')),
                ('profile_pic', models.ImageField(blank=True, storage=conf.storage_backends.PublicMediaStorage(), upload_to='static/profilepic/', verbose_name='')),
                ('remember_me', models.BooleanField(blank=True)),
                ('job', models.CharField(blank=True, max_length=50, null=True, verbose_name='Your job title')),
                ('customerid', models.IntegerField(null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('mainuser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mainuser', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transac',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insti', models.TextField(max_length=200, null=True)),
                ('amount', models.FloatField(null=True)),
                ('email', models.EmailField(blank=True, max_length=256)),
                ('address', models.TextField(null=True)),
                ('city', models.CharField(max_length=300)),
                ('zip', models.CharField(max_length=30)),
                ('country', models.CharField(max_length=200)),
                ('transacid', models.CharField(max_length=100, null=True)),
                ('transacdate', models.DateTimeField(null=True)),
                ('creditcartoken', models.CharField(max_length=100, null=True)),
                ('customerid', models.IntegerField(null=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('abstract', models.TextField(null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('speaker', models.CharField(max_length=200, null=True)),
                ('important', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('rand', models.IntegerField(null=True)),
                ('type', models.IntegerField(choices=[(6, 'Talk'), (1, 'Invited Talk'), (2, 'Discussion'), (3, 'Review'), (4, 'Poster'), (5, 'Attendance only')], default=6, verbose_name='Oral type')),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='RegisterConf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=300, verbose_name='Participation title')),
                ('abstract', models.TextField(blank=True, max_length=500, null=True, verbose_name='Participation abstract')),
                ('biography', models.CharField(blank=True, max_length=300, null=True, verbose_name='Tell to the organizers about you')),
                ('created', models.DateTimeField(auto_now=True)),
                ('slides', models.FileField(blank=True, null=True, storage=conf.storage_backends.PublicMediaStorage(), upload_to='static/slides/', verbose_name='')),
                ('slidesid', models.CharField(blank=True, max_length=300, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Submitted'), (1, 'Accepted'), (2, 'Other')], default=0)),
                ('type', models.IntegerField(choices=[(6, 'Talk'), (1, 'Invited Talk'), (2, 'Discussion'), (3, 'Review'), (4, 'Poster'), (5, 'Attendance only')], default=6, verbose_name='Participation type')),
                ('role', models.IntegerField(choices=[(0, 'Presenter'), (1, 'Moderator'), (2, 'Attendee'), (3, 'Superuser')], default=0)),
                ('socloc', models.IntegerField(choices=[(0, 'Not a SOC or LOC member'), (1, 'SOC'), (2, 'LOC')], default=0)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Proceeding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField(null=True)),
                ('texthtml', models.TextField(null=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('regconf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.RegisterConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_app_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=200)),
                ('lastname', models.CharField(max_length=200)),
                ('email', models.EmailField(error_messages={'required': 'Please provide your email address.'}, max_length=256)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailPeople',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjectt', models.CharField(max_length=300, verbose_name='Subject')),
                ('message', models.TextField(max_length=4000, verbose_name='Message')),
                ('replyto', models.CharField(max_length=2000, verbose_name='Email for people to reply to (if several, separate with commas)')),
                ('whoto', models.CharField(max_length=1000)),
                ('topersonemail', models.CharField(max_length=100, null=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CreateVisio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idconf', models.CharField(max_length=30, null=True)),
                ('recidconf', models.CharField(blank=True, max_length=100, null=True)),
                ('mp4_url', models.CharField(blank=True, max_length=400, null=True)),
                ('date', models.DateTimeField()),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('testroom', models.BooleanField(default=False)),
                ('expirytime', models.DateTimeField(blank=True, null=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_app.CreateConf')),
            ],
        ),
    ]
