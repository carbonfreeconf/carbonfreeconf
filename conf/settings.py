"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from pickle import TRUE
import django_heroku
import dj_database_url
import djcelery

djcelery.setup_loader()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

#SECRET = os.environ.get('SECRET', '')

ROOT_HOSTCONF = 'conf.hosts'
DEFAULT_HOST = 'www'
DEFAULT_REDIRECT_URL="https://www.carbonfreeconf.com"#"https://www.cfcdddd.com"

APPEND_SLASH = True

SECRETSG = os.getenv('SECRETSG')

COST_PER_PARTICIPANT=20.

SECRETVIM= os.getenv('SECRETVIM')
#testons

SECRETVIMEO=os.getenv('SECRETVIMEO')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = SECRETSG
EMAIL_USE_TLS = True

BLOCK_TEMPORARY_EMAIL=os.getenv('BLOCK_TEMPORARY_EMAIL')



SESSION_COOKIE_AGE=2592000#1month
SESSION_EXPIRE_AT_BROWSER_CLOSE=True
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'tSXOMW4R6gSKbMwTvkTlEwLKW')

SECRETAM = os.environ.get('SECRETAM', '')

VISIO="ZOOM"#ZOOM or BM

CONSUMER_KEY=os.environ.get('CONSUMER_KEY')
CONSUMER_SECRET=os.environ.get('CONSUMER_SECRET')
BEARER_TOKEN=os.environ.get('BEARER_TOKEN')
ACCESS_TOKEN=os.environ.get('ACCESS_TOKEN')
ACCESS_TOKEN_SECRET=os.environ.get('ACCESS_TOKEN_SECRET')


COLLECTLOCAL=1 #1 if collectstatic locally 0 otherwisee

if 'STAGING' in os.environ:
    SEARCHBOX_URL = 'https://paas:47bd92605cef7a589b568401ca0dfdd2@oin-us-east-1.searchly.com'

    AWS_ACCESS_KEY_ID = 'AKIAVVKH7VVUGX3NSF6E'
    AWS_SECRET_ACCESS_KEY = "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"
    AWS_STORAGE_BUCKET_NAME = 'bucketeer-7464ea71-40a8-4af1-9b5a-b7fd5ed85c1a'
else:
    SEARCHBOX_URL = os.environ.get('SEARCHBOX_URL')

    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = 'bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d'

AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME#'media.carbonfreeconf.com'#mets l'adresse du bucket sur namecheap mais besoin de passer en micro sur bucketeer pour avoir customname sur s3
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
#AWS_DEFAULT_ACL='public-read'

#test

APIKEYZOOM=os.environ.get('APIKEYZOOM')
APISECRETZOOM=os.environ.get('APISECRETZOOM')

SECRETROCK=os.environ.get('SECRETROCK')

CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'
CAPTCHA_IMAGE_SIZE =(150,70)

EXCHANGE_BACKEND = 'djmoney.contrib.exchange.backends.OpenExchangeRatesBackend'
CURRENCIES = ('USD', 'EUR', 'GBP')
BASE_CURRENCY = 'EUR'
DEFAULT_CURRENCY= 'EUR'

OPEN_EXCHANGE_RATES_APP_ID=os.environ.get('OPEN_EXCHANGE_RATES_APP_ID')

#for tests
if not 'ON_HEROKU' in os.environ:
    STRIPE_PUBLISHABLE_KEY = 'pk_test_51IkpvyLkGBGOvkPu7jmUSpwPKIOCOjoV3BnmG085Q3oXSScqvofpkEewhUdgJFkTlZhIl7n9QD49EMYxV1U1jEK000guNZMJMJ'
    STRIPE_SECRET_KEY = 'sk_test_51IkpvyLkGBGOvkPuQw6WxqNjB8OPOgXwkVvbE1KOdPY9Efp6bVHmHfXQvckJM21ZDxWkX23Y9uDNmVTyYjPai30E00Q1V0KUVd'
    STRIPE_ENDPOINT_SECRET = 'whsec_MWBMzPjthprr11LGTUdPVSvIHLSNLwCB'
else:
    #for production
    STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
    STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
    STRIPE_ENDPOINT_SECRET = os.getenv('STRIPE_ENDPOINT_SECRET')


JSON_LD_EMPTY_INPUT_RENDERING = "silent"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if not 'ON_HEROKU' in os.environ:
    DEBUG = True

#print('joe',os.environ)

if 'ON_HEROKU' in os.environ:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
else:
    SECURE_SSL_REDIRECT = False

SECURE_HSTS_SECONDS=60#be very careful could break the site for xx s as it tells internet just access my website over https not http for xxx seconds

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['myappconf.herokuapp.com']

# Application definition

#ADMINS='admin@carbonfreeconf.com'

#CELERY_IMPORTS = ('google_analytics.tasks')


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'django.contrib.humanize',
    'django.contrib.sitemaps',
    'my_app',
    'blog',
    'post',
    'marketing',
    'crispy_forms',
    'bootstrap_datepicker_plus',
    'django_summernote',
    'el_pagination',
    'cookielaw',
    'widget_tweaks',
    'djmoney',
    'djmoney.contrib.exchange',
    'celery',
    'django_simple_coupons',
    'django_json_ld',
    'sorl.thumbnail',
    'djcelery',
    'colorfield',
    'vote',
    'captcha',
    'cookie_consent',
    'qa',
    'taggit',
    'hitcount',
    'django_markdown',
    'rosetta',
    'django_hosts',
]

# Number of messages to display per page.
ROSETTA_MESSAGES_PER_PAGE = 20
# Enable Google translation suggestions
ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True

YANDEX_TRANSLATE_KEY = os.getenv('YANDEX_TRANSLATE_KEY')



QA_SETTINGS = {
    'qa_messages': True,
    'qa_description_optional': True,
    'count_hits': True,
    'reputation': {
        'CREATE_QUESTION': 10,
        'CREATE_ANSWER': 4,
        'CREATE_ANSWER_COMMENT': 2,
        'CREATE_QUESTION_COMMENT': 2,
        'ACCEPT_ANSWER': 7,
        'UPVOTE_QUESTION': 3,
        'UPVOTE_ANSWER': 3,
        'DOWNVOTE_QUESTION': 0,
        'DOWNVOTE_ANSWER': 0,
    }
}

from pathlib import Path

CSV_DIRECTORY = Path("csv") # Define the directory where survey csv are exported
TEX_DIRECTORY = Path("tex") # Define the directory where survey tex files and pdf are exported

#INSTALLED_APPS += [
	#'bootstrapform',
	#'survey'
#]

EXCEL_COMPATIBLE_CSV = True
DEFAULT_SURVEY_PUBLISHING_DURATION = 14
# The separator for questions (Default to ",")
CHOICES_SEPARATOR = "//"

# What is shown in export when the user do not answer (Default to "Left blank")
USER_DID_NOT_ANSWER = "NAA"

# Path to the Tex configuration file (default to an internal file that should be sufficient)
#TEX_CONFIGURATION_FILE = Path("tex", "tex.conf")

# Default color for exported pdf pie (default to "red!50")
SURVEY_DEFAULT_PIE_COLOR = "blue!50"

THUMBNAIL_ENGINE='sorl.thumbnail.engines.convert_engine.Engine'
#THUMBNAIL_CONVERT='gm4 convert'
#THUMBNAIL_IDENTIFY='gm4 identify'
THUMBNAIL_DEBUG = True

DJANGO_WYSIWYG_FLAVOR = "yui_advanced"

TELLME_FEEDBACK_EMAIL = 'carbonfreeconf@gmail.com'

MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    #'my_app.utils.SecurityHeadersMiddleware',#to add later when origin trial ends
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'tz_detect.middleware.TimezoneMiddleware',
    'my_app.utils.TimezoneMiddleware',
    'csp.middleware.CSPMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware',
]

X_FRAME_OPTIONS = 'SAMEORIGIN'


BROKER_URL = os.environ.get("REDISCLOUD_URL", "django://")
BROKER_POOL_LIMIT = 1
BROKER_CONNECTION_MAX_RETRIES = None

CELERY_TASK_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json", "msgpack"]
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_IMPORTS = ['conf.tasks']
CELERY_TASK_TRACK_STARTED = True
CELERY_TRACK_STARTED = True

BROKER_TRANSPORT_OPTIONS = {
    "max_connections": 2,
}
BROKER_POOL_LIMIT = None

CELERY_RESULT_BACKEND = BROKER_URL

COOKIE_CONSENT_NAME='cookie_consent'
COOKIE_CONSENT_LOG_ENABLED = True
COOKIE_CONSENT_ENABLED = True#False to remove bar
COOKIE_CONSENT_OPT_OUT = False
COOKIE_CONSENT_DECLINE = -1
COOKIE_CONSENT_MAX_AGE = 60 * 60 * 24 * 365 * 1
#COOKIE_CONSENT_COOKIE_DOMAIN = None



ROOT_URLCONF = 'conf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'my_app.context_processors.add_news_to_context',
                #'my_app.context_processors.add_confsuser_to_context',
                #'my_app.context_processors.add_confsuserinv_to_context',
                #'my_app.context_processors.add_confsuserinv2_to_context',
                'my_app.context_processors.add_confs_to_context',
                'my_app.context_processors.token',
                #'qa.context_processors.message_processor',
                #"cookie_consent_authenticateduser.context_processors.display_cookie_consent",
            ],
        },
    },
]

WSGI_APPLICATION = 'conf.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
from django.utils.translation import gettext_lazy as _

LANGUAGE_CODE = 'en'

LANGUAGES = (
    ('fr', _('French')),
    ('en', _('English')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)

DATE_FORMAT = "d/m/Y"

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

#AUTH_USER_MODEL = 'my_app.Post'



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

#STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
django_heroku.settings(locals())

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

TZ_DETECT_COUNTRIES = ('CN', 'US', 'IN', 'JP', 'BR', 'RU', 'DE', 'FR', 'GB')

LOGIN_URL = '/conf/user_login/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

#  Add configuration for static files storage using whitenoise
#STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'

#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

#AWS_LOCATION = 'static'

#https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com/static/images/favicon.ico
#https://bucketeer-7464ea71-40a8-4af1-9b5a-b7fd5ed85c1a.s3.amazonaws.com/static/images/favicon.ico

#STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
#STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

#DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


AWS_STATIC_LOCATION = 'static'
if 'ON_HEROKU' in os.environ or COLLECTLOCAL==1:#if collectstatic aws then add if not '...
    STATICFILES_STORAGE = 'conf.storage_backends.StaticStorage'
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)


AWS_PUBLIC_MEDIA_LOCATION = 'media/public'
DEFAULT_FILE_STORAGE = 'conf.storage_backends.PublicMediaStorage'

AWS_PRIVATE_MEDIA_LOCATION = 'media/private'
PRIVATE_FILE_STORAGE = 'conf.storage_backends.PrivateMediaStorage'

#DEFAULT_FILE_STORAGE = 'conf.storage_backends.MediaStorage'  # <-- here is where we reference it

SUMMERNOTE_THEME = 'bs4'  # Show summernote with Bootstrap4
#X_FRAME_OPTIONS = 'SAMEORIGIN'

import dj_database_url
prod_db = dj_database_url.config(conn_max_age=0)
DATABASES['default'].update(prod_db)
#django_heroku.config(locals())
#DATABASES['default']['CONN_MAX_AGE'] = 0

MAILCHIMP_API_KEY = ''
MAILCHIMP_DATA_CENTER = ''
MAILCHIMP_EMAIL_LIST_ID = ''

#file_path = os.path.join(settings.STATIC_ROOT, 'data/foobar.csv')

cleaner=os.path.join(STATIC_URL, 'js/summernote-cleaner.js')


SUMMERNOTE_CONFIG = {
    # Using SummernoteWidget - iframe mode, default
    'iframe': True,

    # Or, you can set it as False to use SummernoteInplaceWidget by default - no iframe mode
    # In this case, you have to load Bootstrap/jQuery stuff by manually.
    # Use this when you're already using Bootstraip/jQuery based themes.
    #'iframe': False,

    # You can put custom Summernote settings
    'summernote': {
        # As an example, using Summernote Air-mode
        'airMode': False,

        # Change editor size
        'width': '100%',
        'height': '350',

        # Use proper language setting automatically (default)
        #'lang': None,

        # Or, set editor language/locale forcely
        'lang': 'en-US',

        # You can also add custom settings for external plugins
        #'print': {
        #    'stylesheetUrl': '/some_static_folder/printable.css',
        #},
        #'toolbar': {
         #       'insert': 'math',
        #},
        'toolbar': [
        ['style', ['style']],
        ['font', ['bold', 'italic', 'underline', 'superscript', 'subscript',
                  'strikethrough', 'clear']],
        ['fontname', ['fontname']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['cleaner', ['cleaner']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['height', ['height']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video', 'hr', 'math']],
        ['view', ['fullscreen', 'codeview']],
        ['help', ['help']],
        ],

        'cleaner':{
          'action': 'both',
          'newline': '<br>',
          'notStyle': 'position:absolute;top:0;left:0;right:0',
          'icon': '<i class="note-icon">Clear Style</i>',
          'keepHtml': 'false',
          'keepOnlyTags': ['<p>', '<br>', '<ul>', '<li>', '<b>', '<strong>','<i>', '<a>'],
          'keepClasses': 'false',
          'badTags': ['style', 'script', 'applet', 'embed', 'noframes', 'noscript', 'html'],
          'badAttributes': ['style', 'start'],
          'limitChars': 'false',
          'limitDisplay': 'text',
          'limitStop': 'false'
        },

        'codemirror': {
            'mode': 'htmlmixed',
            'lineNumbers': 'true',
            # You have to include theme file in 'css' or 'css_for_inplace' before using it.
            'theme': 'monokai',
        },
    },

    # Need authentication while uploading attachments.
    'attachment_require_authentication': True,

    # Set `upload_to` function for attachments.
    #'attachment_upload_to': my_custom_upload_to_func(),

    # Set custom storage class for attachments.
    #'attachment_storage_class': 'my.custom.storage.class.name',

    # Set custom model for attachments (default: 'django_summernote.Attachment')
    #'attachment_model': 'my.custom.attachment.model', # must inherit 'django_summernote.AbstractAttachment'

    # You can disable attachment feature.
    'disable_attachment': False,

    # Set `True` to return attachment paths in absolute URIs.
    'attachment_absolute_uri': False,

    # test_func in summernote upload view. (Allow upload images only when user passes the test)
    # https://docs.djangoproject.com/en/2.2/topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin
    #def example_test_func(request):
     #   return request.user.groups.filter(name='group_name').exists()

    #'test_func_upload_view': example_test_func,

    # You can add custom css/js for SummernoteWidget.
    #'css': (
    #),
    #'js': (
    #),

    'css': ('https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css',
            'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/theme/monokai.min.css'
            ),
    'js': (
        'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.js',
        cleaner,


        #'/../static/js/summernote-cleaner.js'
    ),

    #'css_for_inplace': ('https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css',),
    #'js_for_inplace': ('https://code.jquery.com/ui/1.12.1/jquery-ui.min.js', ),

    # You can also add custom css/js for SummernoteInplaceWidget.
    # !!! Be sure to put {{ form.media }} in template before initiate summernote.
    #'css_for_inplace': (
    #),
    #'js_for_inplace': (
    #),

    # Codemirror as codeview
    #If any codemirror settings are defined, it will include codemirror files automatically.
    #'css': (
     #   'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/theme/monokai.min.css',
    #),

    # Lazy initialize
    # If you want to initialize summernote at the bottom of page, set this as True
    # and call `initSummernote()` on your page.
    'lazy': False,

    # To use external plugins,
    # Include them within `css` and `js`.
    #'js': {
    #    '/some_static_folder/summernote-ext-print.js',
    #    '//somewhere_in_internet/summernote-plugin-name.js',
    #},
}

# uri to report policy violations
# uri to report policy violations
#CSP_REPORT_URI = '<add your reporting uri>'
  
# default source as self
#CSP_DEFAULT_SRC = ("'self'", )
CSP_DEFAULT_SRC = ("*", 
    "'unsafe-inline'", 
    "'unsafe-eval'",
    "data:",
    "blob:",
    "filesystem:",
    "about:",
    "ws:",
    "wss:"
    )
    
    # blob: filesystem: about: ws: wss:)
  
# style from our domain and bootstrapcdn
'''
CSP_STYLE_SRC = ("'self'", 
    "unsafe-inline",
    "https://fonts.googleapis.com/",
    "https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com")
  
# scripts from our domain and other domains
CSP_SCRIPT_SRC = ("'self'", 
    "unsafe-inline",
    "https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com")
  
# images from our domain and other domains
CSP_IMG_SRC = ("'self'",
    "https://bucketeer-83011bf8-623d-4ad2-8e34-40829bae363d.s3.amazonaws.com")
  
# loading manifest, workers, frames, etc
CSP_FONT_SRC = ("'self'", )
CSP_CONNECT_SRC = ("'self'", 
    "www.google-analytics.com" )
CSP_OBJECT_SRC = ("'self'", )
CSP_BASE_URI = ("'self'", )
CSP_FRAME_ANCESTORS = ("'self'", )
CSP_FORM_ACTION = ("'self'", )
CSP_INCLUDE_NONCE_IN = ('script-src', )
CSP_MANIFEST_SRC = ("'self'", )
CSP_WORKER_SRC = ("'self'", )
CSP_MEDIA_SRC = ("'self'", )
'''